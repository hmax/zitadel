openapi: 3.0.0
info:
  title: Unified API
  description: Combined API for all services.
  version: 1.0.0
externalDocs:
  description: Detailed information about ZITADEL
  url: https://zitadel.com/docs
paths:
  /v2/features/system:
    get:
      summary: Get system level features
      description: Returns all configured features for the system. Unset fields mean the feature is the current system default.
      operationId: FeatureService_GetSystemFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2GetSystemFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
    delete:
      summary: Reset system level features
      description: Deletes ALL configured features for the system, reverting the behaviors to system defaults.
      operationId: FeatureService_ResetSystemFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2ResetSystemFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
    put:
      summary: Set system level features
      description: Configure and set features that apply to the complete system. Only fields present in the request are set or unset.
      operationId: FeatureService_SetSystemFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2SetSystemFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/featurev2SetSystemFeaturesRequest'
  /v2/features/instance:
    get:
      summary: Get instance level features
      description: Returns all configured features for an instance. Unset fields mean the feature is the current system default.
      operationId: FeatureService_GetInstanceFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2GetInstanceFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: inheritance
          description: 'Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource''s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the instance, it will be omitted from the response or Not Found is returned when the instance has no features flags at all.'
          in: query
          required: false
          type: boolean
    delete:
      summary: Reset instance level features
      description: Deletes ALL configured features for an instance, reverting the behaviors to system defaults.
      operationId: FeatureService_ResetInstanceFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2ResetInstanceFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
    put:
      summary: Set instance level features
      description: Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.
      operationId: FeatureService_SetInstanceFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2SetInstanceFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/featurev2SetInstanceFeaturesRequest'
  /v2/features/organization/{organizationId}:
    get:
      summary: Get organization level features
      description: Returns all configured features for an organization. Unset fields mean the feature is the current instance default.
      operationId: FeatureService_GetOrganizationFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2GetOrganizationFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - name: inheritance
          description: 'Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource''s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the organization, it will be omitted from the response or Not Found is returned when the organization has no features flags at all.'
          in: query
          required: false
          type: boolean
    delete:
      summary: Reset organization level features
      description: Deletes ALL configured features for an organization, reverting the behaviors to instance defaults.
      operationId: FeatureService_ResetOrganizationFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2ResetOrganizationFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
    put:
      summary: Set organization level features
      description: Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.
      operationId: FeatureService_SetOrganizationFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2SetOrganizationFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/featurev2FeatureServiceSetOrganizationFeaturesBody'
  /v2/features/user/{userId}:
    get:
      summary: Get organization level features
      description: Returns all configured features for an organization. Unset fields mean the feature is the current instance default.
      operationId: FeatureService_GetUserFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2GetUserFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: inheritance
          description: 'Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource''s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the user, it will be ommitted from the response or Not Found is returned when the user has no features flags at all.'
          in: query
          required: false
          type: boolean
    delete:
      summary: Reset user level features
      description: Deletes ALL configured features for a user, reverting the behaviors to organization defaults.
      operationId: FeatureService_ResetUserFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2ResetUserFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
    put:
      summary: Set user level features
      description: Configure and set features that apply to an user. Only fields present in the request are set or unset.
      operationId: FeatureService_SetUserFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2SetUserFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/featurev2FeatureServiceSetUserFeaturesBody'
  /v2beta/features/system:
    get:
      summary: Get system level features
      description: Returns all configured features for the system. Unset fields mean the feature is the current system default.
      operationId: FeatureService_GetSystemFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2betaGetSystemFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
    delete:
      summary: Reset system level features
      description: Deletes ALL configured features for the system, reverting the behaviors to system defaults.
      operationId: FeatureService_ResetSystemFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2betaResetSystemFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
    put:
      summary: Set system level features
      description: Configure and set features that apply to the complete system. Only fields present in the request are set or unset.
      operationId: FeatureService_SetSystemFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2betaSetSystemFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/featurev2betaSetSystemFeaturesRequest'
  /v2beta/features/instance:
    get:
      summary: Get instance level features
      description: Returns all configured features for an instance. Unset fields mean the feature is the current system default.
      operationId: FeatureService_GetInstanceFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2betaGetInstanceFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: inheritance
          description: 'Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource''s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the instance, it will be omitted from the response or Not Found is returned when the instance has no features flags at all.'
          in: query
          required: false
          type: boolean
    delete:
      summary: Reset instance level features
      description: Deletes ALL configured features for an instance, reverting the behaviors to system defaults.
      operationId: FeatureService_ResetInstanceFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2betaResetInstanceFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
    put:
      summary: Set instance level features
      description: Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.
      operationId: FeatureService_SetInstanceFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2betaSetInstanceFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/featurev2betaSetInstanceFeaturesRequest'
  /v2beta/features/organization/{organizationId}:
    get:
      summary: Get organization level features
      description: Returns all configured features for an organization. Unset fields mean the feature is the current instance default.
      operationId: FeatureService_GetOrganizationFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2betaGetOrganizationFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - name: inheritance
          description: 'Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource''s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the organization, it will be omitted from the response or Not Found is returned when the organization has no features flags at all.'
          in: query
          required: false
          type: boolean
    delete:
      summary: Reset organization level features
      description: Deletes ALL configured features for an organization, reverting the behaviors to instance defaults.
      operationId: FeatureService_ResetOrganizationFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2betaResetOrganizationFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
    put:
      summary: Set organization level features
      description: Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.
      operationId: FeatureService_SetOrganizationFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2betaSetOrganizationFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/featurev2betaFeatureServiceSetOrganizationFeaturesBody'
  /v2beta/features/user/{userId}:
    get:
      summary: Get organization level features
      description: Returns all configured features for an organization. Unset fields mean the feature is the current instance default.
      operationId: FeatureService_GetUserFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2betaGetUserFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: inheritance
          description: 'Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource''s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the user, it will be ommitted from the response or Not Found is returned when the user has no features flags at all.'
          in: query
          required: false
          type: boolean
    delete:
      summary: Reset user level features
      description: Deletes ALL configured features for a user, reverting the behaviors to organization defaults.
      operationId: FeatureService_ResetUserFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2betaResetUserFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
    put:
      summary: Set user level features
      description: Configure and set features that apply to an user. Only fields present in the request are set or unset.
      operationId: FeatureService_SetUserFeatures
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/featurev2betaSetUserFeaturesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/featurev2betaFeatureServiceSetUserFeaturesBody'
  /v2/idps/{id}:
    get:
      summary: Get identity provider (IdP) by ID
      description: Returns an identity provider (social/enterprise login) by its ID, which can be of the type Google, AzureAD, etc.
      operationId: IdentityProviderService_GetIDPByID
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/idpv2GetIDPByIDResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
  /v2/oidc/auth_requests/{authRequestId}:
    get:
      summary: Get OIDC Auth Request details
      description: Get OIDC Auth Request details by ID, obtained from the redirect URL. Returns details that are parsed from the application's Auth Request.
      operationId: OIDCService_GetAuthRequest
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/oidcv2GetAuthRequestResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: authRequestId
          description: ID of the Auth Request, as obtained from the redirect URL.
          in: path
          required: true
          type: string
    post:
      summary: Finalize an Auth Request and get the callback URL.
      description: Finalize an Auth Request and get the callback URL for success or failure. The user must be redirected to the URL in order to inform the application about the success or failure. On success, the URL contains details for the application to obtain the tokens. This method can only be called once for an Auth request.
      operationId: OIDCService_CreateCallback
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/oidcv2CreateCallbackResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: authRequestId
          description: ID of the Auth Request.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/oidcv2OIDCServiceCreateCallbackBody'
  /v2beta/oidc/auth_requests/{authRequestId}:
    get:
      summary: Get OIDC Auth Request details
      description: Get OIDC Auth Request details by ID, obtained from the redirect URL. Returns details that are parsed from the application's Auth Request.
      operationId: OIDCService_GetAuthRequest
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/oidcv2betaGetAuthRequestResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: authRequestId
          description: ID of the Auth Request, as obtained from the redirect URL.
          in: path
          required: true
          type: string
    post:
      summary: Finalize an Auth Request and get the callback URL.
      description: Finalize an Auth Request and get the callback URL for success or failure. The user must be redirected to the URL in order to inform the application about the success or failure. On success, the URL contains details for the application to obtain the tokens. This method can only be called once for an Auth request.
      operationId: OIDCService_CreateCallback
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/oidcv2betaCreateCallbackResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: authRequestId
          description: Set this field when the authorization flow failed. It creates a callback URL to the application, with the error details set.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/oidcv2betaOIDCServiceCreateCallbackBody'
  /v2/users/human:
    post:
      summary: Create a new human user
      description: Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.
      operationId: UserService_AddHumanUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2AddHumanUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2AddHumanUserRequest'
      tags:
        - Users
  /v2/users/{userId}:
    get:
      summary: User by ID
      description: Returns the full user object (human or machine) including the profile, email, etc..
      operationId: UserService_GetUserByID
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2GetUserByIDResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          description: User ID of the user you like to get.
          in: path
          required: true
          type: string
      tags:
        - Users
    delete:
      summary: Delete user
      description: The state of the user will be changed to 'deleted'. The user will not be able to log in anymore. Endpoints requesting this user will return an error 'User not found..
      operationId: UserService_DeleteUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2DeleteUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
  /v2/users:
    post:
      summary: Search Users
      description: Search for users. By default, we will return all users of your instance that you have permission to read. Make sure to include a limit and sorting for pagination.
      operationId: UserService_ListUsers
      responses:
        '200':
          description: A list of all users matching the query
          schema:
            $ref: '#/definitions/userv2ListUsersResponse'
        '400':
          description: invalid list query
          schema:
            $ref: '#/definitions/rpcStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2ListUsersRequest'
  /v2/users/{userId}/email:
    post:
      summary: Change the user email
      description: Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email..
      operationId: UserService_SetEmail
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2SetEmailResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceSetEmailBody'
  /v2/users/{userId}/email/resend:
    post:
      summary: Resend code to verify user email
      description: Resend code to verify user email.
      operationId: UserService_ResendEmailCode
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2ResendEmailCodeResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceResendEmailCodeBody'
  /v2/users/{userId}/email/send:
    post:
      summary: Send code to verify user email
      description: Send code to verify user email.
      operationId: UserService_SendEmailCode
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v2SendEmailCodeResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/UserServiceSendEmailCodeBody'
  /v2/users/{userId}/email/verify:
    post:
      summary: Verify the email
      description: Verify the email with the generated code.
      operationId: UserService_VerifyEmail
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2VerifyEmailResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceVerifyEmailBody'
  /v2/users/{userId}/phone:
    delete:
      summary: Delete the user phone
      description: Delete the phone number of a user.
      operationId: UserService_RemovePhone
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2RemovePhoneResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceRemovePhoneBody'
    post:
      summary: Set the user phone
      description: Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms..
      operationId: UserService_SetPhone
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2SetPhoneResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceSetPhoneBody'
  /v2/users/{userId}/phone/resend:
    post:
      summary: Resend code to verify user phone
      description: Resend code to verify user phone.
      operationId: UserService_ResendPhoneCode
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2ResendPhoneCodeResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceResendPhoneCodeBody'
  /v2/users/{userId}/phone/verify:
    post:
      summary: Verify the phone
      description: Verify the phone with the generated code..
      operationId: UserService_VerifyPhone
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2VerifyPhoneResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceVerifyPhoneBody'
  /v2/users/human/{userId}:
    put:
      summary: Update User
      description: Update all information from a user..
      operationId: UserService_UpdateHumanUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2UpdateHumanUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceUpdateHumanUserBody'
  /v2/users/{userId}/deactivate:
    post:
      summary: Deactivate user
      description: The state of the user will be changed to 'deactivated'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'deactivated'. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data..
      operationId: UserService_DeactivateUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2DeactivateUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceDeactivateUserBody'
  /v2/users/{userId}/reactivate:
    post:
      summary: Reactivate user
      description: Reactivate a user with the state 'deactivated'. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state 'deactivated'..
      operationId: UserService_ReactivateUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2ReactivateUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceReactivateUserBody'
  /v2/users/{userId}/lock:
    post:
      summary: Lock user
      description: The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..
      operationId: UserService_LockUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2LockUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceLockUserBody'
  /v2/users/{userId}/unlock:
    post:
      summary: Unlock user
      description: The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..
      operationId: UserService_UnlockUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2UnlockUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceUnlockUserBody'
  /v2/users/{userId}/passkeys:
    post:
      summary: Start the registration of passkey for a user
      description: Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey..
      operationId: UserService_RegisterPasskey
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2RegisterPasskeyResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceRegisterPasskeyBody'
  /v2/users/{userId}/passkeys/{passkeyId}:
    delete:
      summary: Remove passkey from a user
      description: Remove passkey from a user.
      operationId: UserService_RemovePasskey
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v2RemovePasskeyResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: passkeyId
          in: path
          required: true
          type: string
    post:
      summary: Verify a passkey for a user
      description: Verify the passkey registration with the public key credential..
      operationId: UserService_VerifyPasskeyRegistration
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2VerifyPasskeyRegistrationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: passkeyId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceVerifyPasskeyRegistrationBody'
  /v2/users/{userId}/passkeys/registration_link:
    post:
      summary: Create a passkey registration link for a user
      description: Create a passkey registration link which includes a code and either return it or send it to the user..
      operationId: UserService_CreatePasskeyRegistrationLink
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2CreatePasskeyRegistrationLinkResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceCreatePasskeyRegistrationLinkBody'
  /v2/users/{userId}/passkeys/_search:
    post:
      summary: List passkeys of an user
      description: List passkeys of an user
      operationId: UserService_ListPasskeys
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v2ListPasskeysResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/UserServiceListPasskeysBody'
  /v2/users/{userId}/u2f:
    post:
      summary: Start the registration of a u2f token for a user
      description: Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token..
      operationId: UserService_RegisterU2F
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2RegisterU2FResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceRegisterU2FBody'
  /v2/users/{userId}/u2f/{u2fId}:
    delete:
      summary: Remove u2f token from a user
      description: Remove u2f token from a user
      operationId: UserService_RemoveU2F
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v2RemoveU2FResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: u2fId
          in: path
          required: true
          type: string
    post:
      summary: Verify a u2f token for a user
      description: Verify the u2f token registration with the public key credential..
      operationId: UserService_VerifyU2FRegistration
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2VerifyU2FRegistrationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: u2fId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceVerifyU2FRegistrationBody'
  /v2/users/{userId}/totp:
    delete:
      summary: Remove TOTP generator from a user
      description: Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.
      operationId: UserService_RemoveTOTP
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2RemoveTOTPResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
    post:
      summary: Start the registration of a TOTP generator for a user
      description: Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device..
      operationId: UserService_RegisterTOTP
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2RegisterTOTPResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceRegisterTOTPBody'
  /v2/users/{userId}/totp/verify:
    post:
      summary: Verify a TOTP generator for a user
      description: Verify the TOTP registration with a generated code..
      operationId: UserService_VerifyTOTPRegistration
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2VerifyTOTPRegistrationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceVerifyTOTPRegistrationBody'
  /v2/users/{userId}/otp_sms:
    delete:
      summary: Remove One-Time Password (OTP) SMS from a user
      description: Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.
      operationId: UserService_RemoveOTPSMS
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2RemoveOTPSMSResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
    post:
      summary: Add OTP SMS for a user
      description: Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor..
      operationId: UserService_AddOTPSMS
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2AddOTPSMSResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceAddOTPSMSBody'
  /v2/users/{userId}/otp_email:
    delete:
      summary: Remove One-Time Password (OTP) Email from a user
      description: Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.
      operationId: UserService_RemoveOTPEmail
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2RemoveOTPEmailResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
    post:
      summary: Add OTP Email for a user
      description: Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor..
      operationId: UserService_AddOTPEmail
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2AddOTPEmailResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceAddOTPEmailBody'
  /v2/idp_intents:
    post:
      summary: Start flow with an identity provider
      description: Start a flow with an identity provider, for external login, registration or linking..
      operationId: UserService_StartIdentityProviderIntent
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2StartIdentityProviderIntentResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2StartIdentityProviderIntentRequest'
  /v2/idp_intents/{idpIntentId}:
    post:
      summary: Retrieve the information returned by the identity provider
      description: Retrieve the information returned by the identity provider for registration or updating an existing user with new information..
      operationId: UserService_RetrieveIdentityProviderIntent
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2RetrieveIdentityProviderIntentResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: idpIntentId
          description: ID of the idp intent, previously returned on the success response of the IDP callback
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceRetrieveIdentityProviderIntentBody'
  /v2/users/{userId}/links:
    post:
      summary: Add link to an identity provider to an user
      description: Add link to an identity provider to an user..
      operationId: UserService_AddIDPLink
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2AddIDPLinkResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceAddIDPLinkBody'
  /v2/users/{userId}/links/_search:
    post:
      summary: List links to an identity provider of an user
      description: List links to an identity provider of an user.
      operationId: UserService_ListIDPLinks
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v2ListIDPLinksResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/UserServiceListIDPLinksBody'
  /v2/users/{userId}/links/{idpId}/{linkedUserId}:
    delete:
      summary: Remove link of an identity provider to an user
      description: Remove link of an identity provider to an user.
      operationId: UserService_RemoveIDPLink
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v2RemoveIDPLinkResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: idpId
          in: path
          required: true
          type: string
        - name: linkedUserId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/UserServiceRemoveIDPLinkBody'
  /v2/users/{userId}/password_reset:
    post:
      summary: Request a code to reset a password
      description: Request a code to reset a password..
      operationId: UserService_PasswordReset
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2PasswordResetResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServicePasswordResetBody'
  /v2/users/{userId}/password:
    post:
      summary: Change password
      description: Change the password of a user with either a verification code or the current password..
      operationId: UserService_SetPassword
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2SetPasswordResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2UserServiceSetPasswordBody'
  /v2/users/{userId}/authentication_methods:
    get:
      summary: List all possible authentication methods of a user
      description: List all possible authentication methods of a user like password, passwordless, (T)OTP and more..
      operationId: UserService_ListAuthenticationMethodTypes
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2ListAuthenticationMethodTypesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: domainQuery.includeWithoutDomain
          description: List also auth method types without domain information like passkey and U2F added through V1 APIs / Login UI.
          in: query
          required: false
          type: boolean
        - name: domainQuery.domain
          description: List only auth methods with specific domain.
          in: query
          required: false
          type: string
  /v2/users/{userId}/authentication_factors/_search:
    post:
      operationId: UserService_ListAuthenticationFactors
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v2ListAuthenticationFactorsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: authFactors
          description: Specify the Auth Factors you are interested in
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - OTP
              - OTP_SMS
              - OTP_EMAIL
              - U2F
          collectionFormat: multi
        - name: states
          description: Specify the state of the Auth Factors
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - AUTH_FACTOR_STATE_UNSPECIFIED
              - AUTH_FACTOR_STATE_NOT_READY
              - AUTH_FACTOR_STATE_READY
              - AUTH_FACTOR_STATE_REMOVED
          collectionFormat: multi
  /v2/users/{userId}/invite_code:
    post:
      summary: Create an invite code for a user
      description: Create an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization's available methods.
      operationId: UserService_CreateInviteCode
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v2CreateInviteCodeResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/UserServiceCreateInviteCodeBody'
  /v2/users/{userId}/invite_code/resend:
    post:
      summary: Resend an invite code for a user
      description: |-
        Resend an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization's available methods.
        A resend is only possible if a code has been created previously and sent to the user. If there is no code or it was directly returned, an error will be returned.
      operationId: UserService_ResendInviteCode
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v2ResendInviteCodeResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
  /v2/users/{userId}/invite_code/verify:
    post:
      summary: Verify an invite code for a user
      description: |-
        Verify the invite code of a user previously issued. This will set their email to a verified state and
        allow the user to set up their first authentication method (password, passkeys, IdP) depending on the organization's available methods.
      operationId: UserService_VerifyInviteCode
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v2VerifyInviteCodeResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/UserServiceVerifyInviteCodeBody'
  /v2/organizations:
    post:
      summary: Create an Organization
      description: Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
      operationId: OrganizationService_AddOrganization
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/orgv2AddOrganizationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/orgv2AddOrganizationRequest'
  /v2/organizations/_search:
    post:
      summary: Search Organizations
      description: Search for Organizations. By default, we will return all organization of the instance. Make sure to include a limit and sorting for pagination..
      operationId: OrganizationService_ListOrganizations
      responses:
        '200':
          description: A list of all organizations matching the query
          schema:
            $ref: '#/definitions/v2ListOrganizationsResponse'
        '400':
          description: invalid list query
          schema:
            $ref: '#/definitions/rpcStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/v2ListOrganizationsRequest'
  /v2beta/users/human:
    post:
      summary: Create a new human user
      description: |-
        Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA)
      operationId: UserService_AddHumanUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaAddHumanUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaAddHumanUserRequest'
      deprecated: true
  /v2beta/users/{userId}:
    get:
      summary: User by ID
      description: |-
        Returns the full user object (human or machine) including the profile, email, etc.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_GetUserByID
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaGetUserByIDResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          description: User ID of the user you like to get.
          in: path
          required: true
          type: string
      deprecated: true
    delete:
      summary: Delete user
      description: |-
        The state of the user will be changed to 'deleted'. The user will not be able to log in anymore. Endpoints requesting this user will return an error 'User not found.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_DeleteUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaDeleteUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      deprecated: true
    put:
      summary: Update User
      description: |-
        Update all information from a user.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_UpdateHumanUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaUpdateHumanUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: username
          in: query
          required: false
          type: string
        - name: profile.givenName
          in: query
          required: true
          type: string
        - name: profile.familyName
          in: query
          required: true
          type: string
        - name: profile.nickName
          in: query
          required: false
          type: string
        - name: profile.displayName
          in: query
          required: false
          type: string
        - name: profile.preferredLanguage
          in: query
          required: false
          type: string
        - name: profile.gender
          in: query
          required: false
          type: string
          enum:
            - GENDER_UNSPECIFIED
            - GENDER_FEMALE
            - GENDER_MALE
            - GENDER_DIVERSE
          default: GENDER_UNSPECIFIED
        - name: email.email
          in: query
          required: true
          type: string
        - name: email.sendCode.urlTemplate
          description: '"Optionally set a url_template, which will be used in the verification mail sent by ZITADEL to guide the user to your verification page. If no template is set, the default ZITADEL url will be used."'
          in: query
          required: false
          type: string
        - name: email.isVerified
          in: query
          required: false
          type: boolean
        - name: phone.phone
          in: query
          required: false
          type: string
        - name: phone.isVerified
          in: query
          required: false
          type: boolean
        - name: password.password.password
          in: query
          required: true
          type: string
        - name: password.password.changeRequired
          in: query
          required: false
          type: boolean
        - name: password.hashedPassword.hash
          description: '"Encoded hash of a password in Modular Crypt Format: https://zitadel.com/docs/concepts/architecture/secrets#hashed-secrets"'
          in: query
          required: true
          type: string
        - name: password.hashedPassword.changeRequired
          in: query
          required: false
          type: boolean
        - name: password.currentPassword
          in: query
          required: true
          type: string
        - name: password.verificationCode
          description: '"the verification code generated during password reset request"'
          in: query
          required: true
          type: string
      deprecated: true
  /v2beta/users:
    post:
      summary: Search Users
      description: |-
        Search for users. By default, we will return all users of your instance that you have permission to read. Make sure to include a limit and sorting for pagination.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_ListUsers
      responses:
        '200':
          description: A list of all users matching the query
          schema:
            $ref: '#/definitions/userv2betaListUsersResponse'
        '400':
          description: invalid list query
          schema:
            $ref: '#/definitions/rpcStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaListUsersRequest'
      deprecated: true
  /v2beta/users/{userId}/email:
    post:
      summary: Change the user email
      description: |-
        Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_SetEmail
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaSetEmailResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceSetEmailBody'
      deprecated: true
  /v2beta/users/{userId}/email/resend:
    post:
      summary: Resend code to verify user email
      description: |-
        Resend code to verify user email

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_ResendEmailCode
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaResendEmailCodeResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceResendEmailCodeBody'
      deprecated: true
  /v2beta/users/{userId}/email/verify:
    post:
      summary: Verify the email
      description: |-
        Verify the email with the generated code.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_VerifyEmail
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaVerifyEmailResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceVerifyEmailBody'
      deprecated: true
  /v2beta/users/{userId}/phone:
    delete:
      summary: Delete the user phone
      description: Delete the phone number of a user.
      operationId: UserService_RemovePhone
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaRemovePhoneResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceRemovePhoneBody'
      deprecated: true
    post:
      summary: Set the user phone
      description: |-
        Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_SetPhone
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaSetPhoneResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceSetPhoneBody'
      deprecated: true
  /v2beta/users/{userId}/phone/resend:
    post:
      summary: Resend code to verify user phone
      description: |-
        Resend code to verify user phone

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_ResendPhoneCode
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaResendPhoneCodeResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceResendPhoneCodeBody'
      deprecated: true
  /v2beta/users/{userId}/phone/verify:
    post:
      summary: Verify the phone
      description: |-
        Verify the phone with the generated code.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_VerifyPhone
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaVerifyPhoneResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceVerifyPhoneBody'
      deprecated: true
  /v2beta/users/{userId}/deactivate:
    post:
      summary: Deactivate user
      description: |-
        The state of the user will be changed to 'deactivated'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'deactivated'. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_DeactivateUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaDeactivateUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceDeactivateUserBody'
      deprecated: true
  /v2beta/users/{userId}/reactivate:
    post:
      summary: Reactivate user
      description: |-
        Reactivate a user with the state 'deactivated'. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state 'deactivated'.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_ReactivateUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaReactivateUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceReactivateUserBody'
      deprecated: true
  /v2beta/users/{userId}/lock:
    post:
      summary: Lock user
      description: |-
        The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.).

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_LockUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaLockUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceLockUserBody'
      deprecated: true
  /v2beta/users/{userId}/unlock:
    post:
      summary: Unlock user
      description: |-
        The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.).

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_UnlockUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaUnlockUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceUnlockUserBody'
      deprecated: true
  /v2beta/users/{userId}/passkeys:
    post:
      summary: Start the registration of passkey for a user
      description: |-
        Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_RegisterPasskey
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaRegisterPasskeyResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceRegisterPasskeyBody'
      deprecated: true
  /v2beta/users/{userId}/passkeys/{passkeyId}:
    post:
      summary: Verify a passkey for a user
      description: |-
        Verify the passkey registration with the public key credential.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_VerifyPasskeyRegistration
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaVerifyPasskeyRegistrationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: passkeyId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceVerifyPasskeyRegistrationBody'
      deprecated: true
  /v2beta/users/{userId}/passkeys/registration_link:
    post:
      summary: Create a passkey registration link for a user
      description: |-
        Create a passkey registration link which includes a code and either return it or send it to the user.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_CreatePasskeyRegistrationLink
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaCreatePasskeyRegistrationLinkResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceCreatePasskeyRegistrationLinkBody'
      deprecated: true
  /v2beta/users/{userId}/u2f:
    post:
      summary: Start the registration of a u2f token for a user
      description: |-
        Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_RegisterU2F
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaRegisterU2FResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceRegisterU2FBody'
      deprecated: true
  /v2beta/users/{userId}/u2f/{u2fId}:
    post:
      summary: Verify a u2f token for a user
      description: |-
        Verify the u2f token registration with the public key credential.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_VerifyU2FRegistration
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaVerifyU2FRegistrationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: u2fId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceVerifyU2FRegistrationBody'
      deprecated: true
  /v2beta/users/{userId}/totp:
    delete:
      summary: Remove TOTP generator from a user
      description: |-
        Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_RemoveTOTP
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaRemoveTOTPResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      deprecated: true
    post:
      summary: Start the registration of a TOTP generator for a user
      description: |-
        Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_RegisterTOTP
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaRegisterTOTPResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceRegisterTOTPBody'
      deprecated: true
  /v2beta/users/{userId}/totp/verify:
    post:
      summary: Verify a TOTP generator for a user
      description: |-
        Verify the TOTP registration with a generated code.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_VerifyTOTPRegistration
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaVerifyTOTPRegistrationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceVerifyTOTPRegistrationBody'
      deprecated: true
  /v2beta/users/{userId}/otp_sms:
    delete:
      summary: Remove One-Time Password (OTP) SMS from a user
      description: |-
        Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_RemoveOTPSMS
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaRemoveOTPSMSResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      deprecated: true
    post:
      summary: Add OTP SMS for a user
      description: |-
        Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_AddOTPSMS
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaAddOTPSMSResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceAddOTPSMSBody'
      deprecated: true
  /v2beta/users/{userId}/otp_email:
    delete:
      summary: Remove One-Time Password (OTP) Email from a user
      description: |-
        Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_RemoveOTPEmail
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaRemoveOTPEmailResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      deprecated: true
    post:
      summary: Add OTP Email for a user
      description: |-
        Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_AddOTPEmail
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaAddOTPEmailResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceAddOTPEmailBody'
      deprecated: true
  /v2beta/idp_intents:
    post:
      summary: Start flow with an identity provider
      description: |-
        Start a flow with an identity provider, for external login, registration or linking.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_StartIdentityProviderIntent
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaStartIdentityProviderIntentResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaStartIdentityProviderIntentRequest'
      deprecated: true
  /v2beta/idp_intents/{idpIntentId}:
    post:
      summary: Retrieve the information returned by the identity provider
      description: |-
        Retrieve the information returned by the identity provider for registration or updating an existing user with new information.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_RetrieveIdentityProviderIntent
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaRetrieveIdentityProviderIntentResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: idpIntentId
          description: ID of the idp intent, previously returned on the success response of the IDP callback
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceRetrieveIdentityProviderIntentBody'
      deprecated: true
  /v2beta/users/{userId}/links:
    post:
      summary: Add link to an identity provider to an user
      description: |-
        Add link to an identity provider to an user.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_AddIDPLink
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaAddIDPLinkResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceAddIDPLinkBody'
      deprecated: true
  /v2beta/users/{userId}/password_reset:
    post:
      summary: Request a code to reset a password
      description: |-
        Request a code to reset a password.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_PasswordReset
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaPasswordResetResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServicePasswordResetBody'
      deprecated: true
  /v2beta/users/{userId}/password:
    post:
      summary: Change password
      description: |-
        Change the password of a user with either a verification code or the current password.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_SetPassword
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaSetPasswordResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv2betaUserServiceSetPasswordBody'
      deprecated: true
  /v2beta/users/{userId}/authentication_methods:
    get:
      summary: List all possible authentication methods of a user
      description: |-
        List all possible authentication methods of a user like password, passwordless, (T)OTP and more.

        Deprecated: please move to the corresponding endpoint under user service v2 (GA).
      operationId: UserService_ListAuthenticationMethodTypes
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userv2betaListAuthenticationMethodTypesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      deprecated: true
  /v2beta/organizations:
    post:
      summary: Create an Organization
      description: Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
      operationId: OrganizationService_AddOrganization
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/orgv2betaAddOrganizationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/orgv2betaAddOrganizationRequest'
  /resources/v3alpha/actions/targets:
    post:
      summary: Create a target
      description: Create a new target, which can be used in executions.
      operationId: ZITADELActions_CreateTarget
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v3alphaCreateTargetResponse'
        '201':
          description: Target successfully created
          schema:
            $ref: '#/definitions/v3alphaCreateTargetResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: target
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/v3alphaTarget'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
  /resources/v3alpha/actions/targets/{id}:
    get:
      summary: Target by ID
      description: Returns the target identified by the requested ID.
      operationId: ZITADELActions_GetTarget
      responses:
        '200':
          description: Target successfully retrieved
          schema:
            $ref: '#/definitions/v3alphaGetTargetResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
    delete:
      summary: Delete a target
      description: Delete an existing target. This will remove it from any configured execution as well.
      operationId: ZITADELActions_DeleteTarget
      responses:
        '200':
          description: Target successfully deleted
          schema:
            $ref: '#/definitions/v3alphaDeleteTargetResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
    patch:
      summary: Patch a target
      description: Patch an existing target.
      operationId: ZITADELActions_PatchTarget
      responses:
        '200':
          description: Target successfully updated or left unchanged
          schema:
            $ref: '#/definitions/v3alphaPatchTargetResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: target
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/actionv3alphaPatchTarget'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
  /resources/v3alpha/actions/targets/_search:
    post:
      summary: Search targets
      description: |-
        Search all matching targets. By default all targets of the instance are returned.
        Make sure to include a limit and sorting for pagination.
      operationId: ZITADELActions_SearchTargets
      responses:
        '200':
          description: A list of all targets matching the query
          schema:
            $ref: '#/definitions/v3alphaSearchTargetsResponse'
        '400':
          description: invalid list query
          schema:
            $ref: '#/definitions/rpcStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: filters
          description: Define the criteria to query for.
          in: body
          required: true
          schema:
            type: array
            items:
              type: object
              $ref: '#/components/schemas/v3alphaTargetSearchFilter'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: query.offset
          in: query
          required: false
          type: string
          format: uint64
        - name: query.limit
          description: Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error.
          in: query
          required: false
          type: integer
          format: int64
        - name: query.desc
          description: default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results.
          in: query
          required: false
          type: boolean
        - name: sortingColumn
          description: The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
          in: query
          required: false
          type: string
          enum:
            - TARGET_FIELD_NAME_UNSPECIFIED
            - TARGET_FIELD_NAME_ID
            - TARGET_FIELD_NAME_CREATED_DATE
            - TARGET_FIELD_NAME_CHANGED_DATE
            - TARGET_FIELD_NAME_NAME
            - TARGET_FIELD_NAME_TARGET_TYPE
            - TARGET_FIELD_NAME_URL
            - TARGET_FIELD_NAME_TIMEOUT
            - TARGET_FIELD_NAME_INTERRUPT_ON_ERROR
          default: TARGET_FIELD_NAME_UNSPECIFIED
  /resources/v3alpha/actions/executions:
    put:
      summary: Sets an execution to call a target or include the targets of another execution.
      description: Setting an empty list of targets will remove all targets from the execution, making it a noop.
      operationId: ZITADELActions_SetExecution
      responses:
        '200':
          description: Execution successfully updated or left unchanged
          schema:
            $ref: '#/definitions/v3alphaSetExecutionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/v3alphaSetExecutionRequest'
  /resources/v3alpha/actions/executions/_search:
    post:
      summary: Search executions
      description: |-
        Search all matching executions. By default all executions of the instance are returned that have at least one execution target.
        Make sure to include a limit and sorting for pagination.
      operationId: ZITADELActions_SearchExecutions
      responses:
        '200':
          description: A list of all non noop executions matching the query
          schema:
            $ref: '#/definitions/v3alphaSearchExecutionsResponse'
        '400':
          description: invalid list query
          schema:
            $ref: '#/definitions/rpcStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: filters
          description: Define the criteria to query for.
          in: body
          required: true
          schema:
            type: array
            items:
              type: object
              $ref: '#/components/schemas/v3alphaExecutionSearchFilter'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: query.offset
          in: query
          required: false
          type: string
          format: uint64
        - name: query.limit
          description: Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error.
          in: query
          required: false
          type: integer
          format: int64
        - name: query.desc
          description: default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results.
          in: query
          required: false
          type: boolean
        - name: sortingColumn
          description: The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
          in: query
          required: false
          type: string
          enum:
            - EXECUTION_FIELD_NAME_UNSPECIFIED
            - EXECUTION_FIELD_NAME_ID
            - EXECUTION_FIELD_NAME_CREATED_DATE
            - EXECUTION_FIELD_NAME_CHANGED_DATE
          default: EXECUTION_FIELD_NAME_UNSPECIFIED
  /resources/v3alpha/actions/executions/functions:
    get:
      summary: List all available functions
      description: List all available functions which can be used as condition for executions.
      operationId: ZITADELActions_ListExecutionFunctions
      responses:
        '200':
          description: List all functions successfully
          schema:
            $ref: '#/definitions/v3alphaListExecutionFunctionsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
  /resources/v3alpha/actions/executions/methods:
    get:
      summary: List all available methods
      description: List all available methods which can be used as condition for executions.
      operationId: ZITADELActions_ListExecutionMethods
      responses:
        '200':
          description: List all methods successfully
          schema:
            $ref: '#/definitions/v3alphaListExecutionMethodsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
  /resources/v3alpha/actions/executions/services:
    get:
      summary: List all available service
      description: List all available services which can be used as condition for executions.
      operationId: ZITADELActions_ListExecutionServices
      responses:
        '200':
          description: List all services successfully
          schema:
            $ref: '#/definitions/v3alphaListExecutionServicesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
  /:
    post:
      summary: Create a set of debug events.
      description: Create a set of debug events which will be pushed to the eventstore and reduced to the projection.
      operationId: ZITADELDebugEvents_CreateDebugEvents
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v3alphaCreateDebugEventsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: events
          in: body
          required: true
          schema:
            type: array
            items:
              type: object
              $ref: '#/components/schemas/debug_eventsv3alphaEvent'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: aggregateId
          description: unique identifier for the aggregate we want to push events to.
          in: query
          required: true
          type: string
  /v3alpha/debug_events/{id}:
    get:
      operationId: ZITADELDebugEvents_GetDebugEventsStateById
      responses:
        '200':
          description: Debug events state successfully retrieved
          schema:
            $ref: '#/definitions/v3alphaGetDebugEventsStateByIdResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the aggregate.
          in: path
          required: true
          type: string
        - name: triggerBulk
          in: query
          required: false
          type: boolean
  /v3alpha/debug_events:
    get:
      operationId: ZITADELDebugEvents_ListDebugEventsStates
      responses:
        '200':
          description: Debug events states successfully retrieved
          schema:
            $ref: '#/definitions/v3alphaListDebugEventsStatesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: triggerBulk
          in: query
          required: false
          type: boolean
  /resources/v3alpha/users/_search:
    post:
      summary: Search users
      description: |-
        Search all matching users. By default, we will return all users of your instance.
        Make sure to include a limit and sorting for pagination.
      operationId: ZITADELUsers_SearchUsers
      responses:
        '200':
          description: A list of all users matching the query
          schema:
            $ref: '#/definitions/v3alphaSearchUsersResponse'
        '400':
          description: invalid list query
          schema:
            $ref: '#/definitions/rpcStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: filters
          description: Define the criteria to query for.
          in: body
          required: true
          schema:
            type: array
            items:
              type: object
              $ref: '#/components/schemas/resourcesuserv3alphaSearchFilter'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: query.offset
          in: query
          required: false
          type: string
          format: uint64
        - name: query.limit
          description: Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error.
          in: query
          required: false
          type: integer
          format: int64
        - name: query.desc
          description: default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results.
          in: query
          required: false
          type: boolean
        - name: sortingColumn
          description: the field the result is sorted.
          in: query
          required: false
          type: string
          enum:
            - FIELD_NAME_UNSPECIFIED
            - FIELD_NAME_ID
            - FIELD_NAME_CREATION_DATE
            - FIELD_NAME_CHANGE_DATE
            - FIELD_NAME_EMAIL
            - FIELD_NAME_PHONE
            - FIELD_NAME_STATE
            - FIELD_NAME_SCHEMA_ID
            - FIELD_NAME_SCHEMA_TYPE
          default: FIELD_NAME_UNSPECIFIED
  /resources/v3alpha/users/{id}:
    get:
      summary: User by ID
      description: Returns the user identified by the requested ID.
      operationId: ZITADELUsers_GetUser
      responses:
        '200':
          description: User successfully retrieved
          schema:
            $ref: '#/definitions/v3alphaGetUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
    delete:
      summary: Delete a user
      description: |-
        Delete an existing user and change the state to 'deleted'.
        The user will be able to log in anymore.
      operationId: ZITADELUsers_DeleteUser
      responses:
        '200':
          description: User successfully deleted
          schema:
            $ref: '#/definitions/userv3alphaDeleteUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
    patch:
      summary: Patch a user
      description: Patch an existing user with data based on a user schema.
      operationId: ZITADELUsers_PatchUser
      responses:
        '200':
          description: User successfully updated or left unchanged
          schema:
            $ref: '#/definitions/v3alphaPatchUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv3alphaPatchUser'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users:
    post:
      summary: Create a user
      description: Create a new user with an optional data schema.
      operationId: ZITADELUsers_CreateUser
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v3alphaCreateUserResponse'
        '201':
          description: User successfully created
          schema:
            $ref: '#/definitions/v3alphaCreateUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv3alphaCreateUser'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/_deactivate:
    post:
      summary: Deactivate a user
      description: |-
        Deactivate an existing user and change the state 'deactivated'.
        The user will not be able to log in anymore.
        Use deactivate user when the user should not be able to use the account anymore,
        but you still need access to the user data.

        The endpoint returns an error if the user is already in the state 'deactivated'.
      operationId: ZITADELUsers_DeactivateUser
      responses:
        '200':
          description: User successfully deactivated
          schema:
            $ref: '#/definitions/userv3alphaDeactivateUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/_activate:
    post:
      summary: Activate a user
      description: |-
        Activate a previously deactivated user and change the state to 'active'.
        The user will be able to log in again.

        The endpoint returns an error if the user is not in the state 'deactivated'.
      operationId: ZITADELUsers_ActivateUser
      responses:
        '200':
          description: User successfully activated
          schema:
            $ref: '#/definitions/v3alphaActivateUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/_lock:
    post:
      summary: Lock a user
      description: |-
        Lock an existing user and change the state 'locked'.
        The user will not be able to log in anymore.
        Use lock user when the user should temporarily not be able to log in
        because of an event that happened (wrong password, etc.)

        The endpoint returns an error if the user is already in the state 'locked'.
      operationId: ZITADELUsers_LockUser
      responses:
        '200':
          description: User successfully locked
          schema:
            $ref: '#/definitions/userv3alphaLockUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/_unlock:
    post:
      summary: Unlock a user
      description: |-
        Unlock a previously locked user and change the state to 'active'.
        The user will be able to log in again.

        The endpoint returns an error if the user is not in the state 'locked'.
      operationId: ZITADELUsers_UnlockUser
      responses:
        '200':
          description: User successfully unlocked
          schema:
            $ref: '#/definitions/userv3alphaUnlockUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/email:
    put:
      summary: Set contact email
      description: |-
        Add or update the contact email address of a user.
        If the email is not passed as verified, a verification code will be generated,
        which can be either returned or will be sent to the user by email.
      operationId: ZITADELUsers_SetContactEmail
      responses:
        '200':
          description: Email successfully set
          schema:
            $ref: '#/definitions/v3alphaSetContactEmailResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: email
          description: Set the user's contact email and it's verification state.
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv3alphaSetEmail'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/email/_verify:
    post:
      summary: Verify the contact email
      description: Verify the contact email with the provided code.
      operationId: ZITADELUsers_VerifyContactEmail
      responses:
        '200':
          description: Email successfully verified
          schema:
            $ref: '#/definitions/v3alphaVerifyContactEmailResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: verificationCode
          description: Set the verification code generated during the set contact email request.
          in: body
          required: true
          schema:
            type: string
            example: SKJd342k
            maxLength: 20
            minLength: 1
            required:
              - verificationCode
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/email/_resend:
    post:
      summary: Resend the contact email code
      description: Resend the email with the verification code for the contact email address.
      operationId: ZITADELUsers_ResendContactEmailCode
      responses:
        '200':
          description: Code resend successfully requested
          schema:
            $ref: '#/definitions/v3alphaResendContactEmailCodeResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/ZITADELUsersResendContactEmailCodeBody'
  /resources/v3alpha/users/{id}/phone:
    put:
      summary: Set contact phone
      description: |-
        Add or update the contact phone number of a user.
        If the phone is not passed as verified, a verification code will be generated,
        which can be either returned or will be sent to the user by SMS.
      operationId: ZITADELUsers_SetContactPhone
      responses:
        '200':
          description: Contact phone successfully set
          schema:
            $ref: '#/definitions/v3alphaSetContactPhoneResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: phone
          description: Set the user's contact phone and it's verification state.
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv3alphaSetPhone'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/phone/_verify:
    post:
      summary: Verify the contact phone
      description: Verify the contact phone with the provided code.
      operationId: ZITADELUsers_VerifyContactPhone
      responses:
        '200':
          description: Contact phone successfully verified
          schema:
            $ref: '#/definitions/v3alphaVerifyContactPhoneResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: verificationCode
          description: Set the verification code generated during the set contact phone request.
          in: body
          required: true
          schema:
            type: string
            example: SKJd342k
            maxLength: 20
            minLength: 1
            required:
              - verificationCode
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/phone/_resend:
    post:
      summary: Resend the contact phone code
      description: Resend the phone with the verification code for the contact phone number.
      operationId: ZITADELUsers_ResendContactPhoneCode
      responses:
        '200':
          description: Code resend successfully requested
          schema:
            $ref: '#/definitions/v3alphaResendContactPhoneCodeResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/ZITADELUsersResendContactPhoneCodeBody'
  /resources/v3alpha/users/{id}/username:
    post:
      summary: Add a username
      description: Add a new unique username to a user. The username will be used to identify the user on authentication.
      operationId: ZITADELUsers_AddUsername
      responses:
        '200':
          description: Username successfully added
          schema:
            $ref: '#/definitions/v3alphaAddUsernameResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: username
          description: Set the user's new username.
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/v3alphaSetUsername'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/username/{usernameId}:
    delete:
      summary: Remove a username
      description: Remove an existing username of a user, so it cannot be used for authentication anymore.
      operationId: ZITADELUsers_RemoveUsername
      responses:
        '200':
          description: Username successfully removed
          schema:
            $ref: '#/definitions/v3alphaRemoveUsernameResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: usernameId
          description: unique identifier of the username.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/password:
    post:
      summary: Set a password
      description: Add, update or reset a user's password with either a verification code or the current password.
      operationId: ZITADELUsers_SetPassword
      responses:
        '200':
          description: Password successfully set
          schema:
            $ref: '#/definitions/userv3alphaSetPasswordResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: newPassword
          description: Provide the new password (in plain text or as hash).
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv3alphaSetPassword'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/password/_reset:
    post:
      summary: Request password reset
      description: Request a code to be able to set a new password.
      operationId: ZITADELUsers_RequestPasswordReset
      responses:
        '200':
          description: Password reset successfully requested
          schema:
            $ref: '#/definitions/v3alphaRequestPasswordResetResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/ZITADELUsersRequestPasswordResetBody'
  /resources/v3alpha/users/{id}/webauthn:
    post:
      summary: Start a WebAuthN registration
      description: |-
        Start the registration of a new WebAuthN device (e.g. Passkeys) for a user.
        As a response the public key credential creation options are returned,
        which are used to verify the device.
      operationId: ZITADELUsers_StartWebAuthNRegistration
      responses:
        '200':
          description: WebAuthN registration successfully started
          schema:
            $ref: '#/definitions/v3alphaStartWebAuthNRegistrationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: registration
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv3alphaStartWebAuthNRegistration'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/webauthn/{webAuthNId}/_verify:
    post:
      summary: Verify a WebAuthN registration
      description: Verify the WebAuthN registration started by StartWebAuthNRegistration with the public key credential.
      operationId: ZITADELUsers_VerifyWebAuthNRegistration
      responses:
        '200':
          description: WebAuthN registration successfully verified
          schema:
            $ref: '#/definitions/v3alphaVerifyWebAuthNRegistrationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: webAuthNId
          description: unique identifier of the WebAuthN registration, which was returned in the start webauthn registration.
          in: path
          required: true
          type: string
        - name: verify
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv3alphaVerifyWebAuthNRegistration'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/webauthn/registration_link:
    post:
      summary: Create a WebAuthN registration link
      description: |-
        Create a link, which includes a code, that can either be returned or directly sent to the user.
        The code will allow the user to start a new WebAuthN registration.
      operationId: ZITADELUsers_CreateWebAuthNRegistrationLink
      responses:
        '200':
          description: WebAuthN registration successfully created
          schema:
            $ref: '#/definitions/v3alphaCreateWebAuthNRegistrationLinkResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/ZITADELUsersCreateWebAuthNRegistrationLinkBody'
  /resources/v3alpha/users/{id}/webauthn/{webAuthNId}:
    delete:
      summary: Remove a WebAuthN authenticator
      description: Remove an existing WebAuthN authenticator from a user, so it cannot be used for authentication anymore.
      operationId: ZITADELUsers_RemoveWebAuthNAuthenticator
      responses:
        '200':
          description: WebAuthN authenticator successfully removed
          schema:
            $ref: '#/definitions/v3alphaRemoveWebAuthNAuthenticatorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: webAuthNId
          description: unique identifier of the WebAuthN authenticator.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/totp:
    post:
      summary: Start a TOTP registration
      description: |-
        Start the registration of a new time-based one-time password (TOTP) generator for a user.
        As a response a secret is returned, which is used to initialize a TOTP app or device.
      operationId: ZITADELUsers_StartTOTPRegistration
      responses:
        '200':
          description: TOTP registration successfully started
          schema:
            $ref: '#/definitions/v3alphaStartTOTPRegistrationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/totp/{totpId}/_verify:
    post:
      summary: Verify a TOTP registration
      description: Verify the time-based one-time password (TOTP) registration with the generated code.
      operationId: ZITADELUsers_VerifyTOTPRegistration
      responses:
        '200':
          description: TOTP registration successfully verified
          schema:
            $ref: '#/definitions/userv3alphaVerifyTOTPRegistrationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: totpId
          description: unique identifier of the TOTP registration, which was returned in the start TOTP registration.
          in: path
          required: true
          type: string
        - name: code
          description: Code generated by TOTP app or device.
          in: body
          required: true
          schema:
            type: string
            example: '123456'
            maxLength: 9
            minLength: 6
            required:
              - code
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/totp/{totpId}:
    delete:
      summary: Remove a TOTP authenticator
      description: Remove an existing time-based one-time password (TOTP) authenticator from a user, so it cannot be used for authentication anymore.
      operationId: ZITADELUsers_RemoveTOTPAuthenticator
      responses:
        '200':
          description: TOTP authenticator successfully removed
          schema:
            $ref: '#/definitions/v3alphaRemoveTOTPAuthenticatorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: totpId
          description: unique identifier of the TOTP authenticator.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/otp_sms:
    post:
      summary: Add a OTP SMS authenticator
      description: |-
        Add a new one-time password (OTP) SMS authenticator to a user.
        If the phone is not passed as verified, a verification code will be generated,
        which can be either returned or will be sent to the user by SMS.
      operationId: ZITADELUsers_AddOTPSMSAuthenticator
      responses:
        '200':
          description: OTP SMS authenticator successfully added
          schema:
            $ref: '#/definitions/v3alphaAddOTPSMSAuthenticatorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: phone
          description: Set the user's phone for the OTP SMS authenticator and it's verification state.
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv3alphaSetPhone'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/otp_sms/{otpSmsId}/_verify:
    post:
      summary: Verify OTP SMS registration
      description: Verify the OTP SMS registration with the provided code.
      operationId: ZITADELUsers_VerifyOTPSMSRegistration
      responses:
        '200':
          description: OTP SMS authenticator successfully verified
          schema:
            $ref: '#/definitions/v3alphaVerifyOTPSMSRegistrationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: otpSmsId
          description: unique identifier of the OTP SMS registration, which was returned in the add OTP SMS.
          in: path
          required: true
          type: string
        - name: code
          description: Set the verification code generated during the add OTP SMS request.
          in: body
          required: true
          schema:
            type: string
            example: SKJd342k
            maxLength: 200
            minLength: 1
            required:
              - code
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/otp_sms/{otpSmsId}:
    delete:
      summary: Remove a OTP SMS authenticator
      description: Remove an existing one-time password (OTP) SMS authenticator from a user, so it cannot be used for authentication anymore.
      operationId: ZITADELUsers_RemoveOTPSMSAuthenticator
      responses:
        '200':
          description: OTP SMS authenticator successfully removed
          schema:
            $ref: '#/definitions/v3alphaRemoveOTPSMSAuthenticatorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: otpSmsId
          description: unique identifier of the OTP SMS authenticator.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/otp_email:
    post:
      summary: Add a OTP Email authenticator
      description: |-
        Add a new one-time password (OTP) Email authenticator to a user.
        If the email is not passed as verified, a verification code will be generated,
        which can be either returned or will be sent to the user by email.
      operationId: ZITADELUsers_AddOTPEmailAuthenticator
      responses:
        '200':
          description: OTP Email authenticator successfully added
          schema:
            $ref: '#/definitions/v3alphaAddOTPEmailAuthenticatorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: email
          description: Set the user's email for the OTP Email authenticator and it's verification state.
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv3alphaSetEmail'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/otp_email/{otpEmailId}/_verify:
    post:
      summary: Verify OTP Email registration
      description: Verify the OTP Email registration with the provided code.
      operationId: ZITADELUsers_VerifyOTPEmailRegistration
      responses:
        '200':
          description: OTP Email authenticator successfully verified
          schema:
            $ref: '#/definitions/v3alphaVerifyOTPEmailRegistrationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: otpEmailId
          description: unique identifier of the OTP Email registration, which was returned in the add OTP Email.
          in: path
          required: true
          type: string
        - name: code
          description: Set the verification code generated during the add OTP Email request.
          in: body
          required: true
          schema:
            type: string
            example: SKJd342k
            maxLength: 200
            minLength: 1
            required:
              - code
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/otp_email/{otpEmailId}:
    delete:
      summary: Remove a OTP Email authenticator
      description: Remove an existing one-time password (OTP) Email authenticator from a user, so it cannot be used for authentication anymore.
      operationId: ZITADELUsers_RemoveOTPEmailAuthenticator
      responses:
        '200':
          description: OTP Email authenticator successfully removed
          schema:
            $ref: '#/definitions/v3alphaRemoveOTPEmailAuthenticatorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: otpEmailId
          description: unique identifier of the OTP Email authenticator.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/idp_intents:
    post:
      summary: Start an IDP authentication intent
      description: Start a new authentication intent on configured identity provider (IDP) for external login, registration or linking.
      operationId: ZITADELUsers_StartIdentityProviderIntent
      responses:
        '200':
          description: IDP intent successfully started
          schema:
            $ref: '#/definitions/userv3alphaStartIdentityProviderIntentResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userv3alphaStartIdentityProviderIntentRequest'
  /resources/v3alpha/idp_intents/{idpIntentId}:
    get:
      summary: Get the information of the IDP authentication intent
      description: Get the information returned by the identity provider (IDP) for registration or updating an existing user with new information.
      operationId: ZITADELUsers_GetIdentityProviderIntent
      responses:
        '200':
          description: IDP intent successfully retrieved
          schema:
            $ref: '#/definitions/v3alphaGetIdentityProviderIntentResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: idpIntentId
          description: ID of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
        - name: idpIntentToken
          description: Token of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent.
          in: query
          required: true
          type: string
  /resources/v3alpha/users/{id}/idps:
    post:
      summary: Add an IDP authenticator to a user
      description: |-
        Add a new identity provider (IDP) authenticator to an existing user.
        This will allow the user to authenticate with the provided IDP.
      operationId: ZITADELUsers_AddIDPAuthenticator
      responses:
        '200':
          description: IDP authenticator successfully added
          schema:
            $ref: '#/definitions/v3alphaAddIDPAuthenticatorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: authenticator
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/v3alphaIDPAuthenticator'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/users/{id}/idps/{idpId}:
    delete:
      summary: Remove an IDP authenticator
      description: Remove an existing identity provider (IDP) authenticator from a user, so it cannot be used for authentication anymore.
      operationId: ZITADELUsers_RemoveIDPAuthenticator
      responses:
        '200':
          description: IDP authenticator successfully removed
          schema:
            $ref: '#/definitions/v3alphaRemoveIDPAuthenticatorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the user.
          in: path
          required: true
          type: string
        - name: idpId
          description: unique identifier of the identity provider (IDP) authenticator.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: organization.orgId
          in: query
          required: false
          type: string
        - name: organization.orgDomain
          in: query
          required: false
          type: string
  /resources/v3alpha/user_schemas/_search:
    post:
      summary: Search user schemas
      description: Search all matching user schemas. By default, we will return all user schema of your instance. Make sure to include a limit and sorting for pagination.
      operationId: ZITADELUserSchemas_SearchUserSchemas
      responses:
        '200':
          description: A list of all user schema matching the search
          schema:
            $ref: '#/definitions/v3alphaSearchUserSchemasResponse'
        '400':
          description: invalid search
          schema:
            $ref: '#/definitions/rpcStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: filters
          description: Define the criteria to filter for.
          in: body
          required: true
          schema:
            type: array
            items:
              type: object
              $ref: '#/components/schemas/resourcesuserschemav3alphaSearchFilter'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
        - name: query.offset
          in: query
          required: false
          type: string
          format: uint64
        - name: query.limit
          description: Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error.
          in: query
          required: false
          type: integer
          format: int64
        - name: query.desc
          description: default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results.
          in: query
          required: false
          type: boolean
        - name: sortingColumn
          description: The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
          in: query
          required: false
          type: string
          enum:
            - FIELD_NAME_UNSPECIFIED
            - FIELD_NAME_TYPE
            - FIELD_NAME_STATE
            - FIELD_NAME_REVISION
            - FIELD_NAME_CHANGE_DATE
            - FIELD_NAME_CREATION_DATE
          default: FIELD_NAME_UNSPECIFIED
  /resources/v3alpha/user_schemas/{id}:
    get:
      summary: User schema by ID
      description: Returns the user schema identified by the requested ID.
      operationId: ZITADELUserSchemas_GetUserSchema
      responses:
        '200':
          description: Schema successfully retrieved
          schema:
            $ref: '#/definitions/v3alphaGetUserSchemaResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the schema.
          in: path
          required: true
          type: string
    delete:
      summary: Delete a user schema
      description: Delete an existing user schema. This operation is only allowed if there are no associated users to it.
      operationId: ZITADELUserSchemas_DeleteUserSchema
      responses:
        '200':
          description: Schema successfully deleted
          schema:
            $ref: '#/definitions/v3alphaDeleteUserSchemaResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the schema.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
    patch:
      summary: Patch a user schema
      description: Patch an existing user schema to a new revision. Users based on the current revision will not be affected until they are updated.
      operationId: ZITADELUserSchemas_PatchUserSchema
      responses:
        '200':
          description: Schema successfully updated
          schema:
            $ref: '#/definitions/v3alphaPatchUserSchemaResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the schema.
          in: path
          required: true
          type: string
        - name: userSchema
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/userschemav3alphaPatchUserSchema'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
  /resources/v3alpha/user_schemas:
    post:
      summary: Create a user schema
      description: Create the first revision of a new user schema. The schema can then be used on users to store and validate their data.
      operationId: ZITADELUserSchemas_CreateUserSchema
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v3alphaCreateUserSchemaResponse'
        '201':
          description: Schema successfully created
          schema:
            $ref: '#/definitions/v3alphaCreateUserSchemaResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: userSchema
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/v3alphaUserSchema'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
  /resources/v3alpha/user_schemas/{id}/_deactivate:
    post:
      summary: Deactivate a user schema
      description: Deactivate an existing user schema and change it into a read-only state. Users based on this schema cannot be updated anymore, but are still able to authenticate.
      operationId: ZITADELUserSchemas_DeactivateUserSchema
      responses:
        '200':
          description: Schema successfully deactivated
          schema:
            $ref: '#/definitions/v3alphaDeactivateUserSchemaResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the schema.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
  /resources/v3alpha/user_schemas/{id}/_reactivate:
    post:
      summary: Reactivate a user schema
      description: Reactivate an previously deactivated user schema and change it into an active state again.
      operationId: ZITADELUserSchemas_ReactivateUserSchema
      responses:
        '200':
          description: Schema successfully reactivated
          schema:
            $ref: '#/definitions/v3alphaReactivateUserSchemaResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          description: unique identifier of the schema.
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
  /resources/v3alpha/web_keys:
    get:
      summary: List web key details for the instance
      description: List web key details for the instance
      operationId: ZITADELWebKeys_ListWebKeys
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v3alphaListWebKeysResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
    post:
      summary: Generate a web key pair for the instance
      description: Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation. The public key can be used to valite OIDC tokens.
      operationId: ZITADELWebKeys_CreateWebKey
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v3alphaCreateWebKeyResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: key
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/v3alphaWebKey'
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
  /resources/v3alpha/web_keys/{id}/_activate:
    post:
      summary: Activate a signing key for the instance
      description: Switch the active signing web key. The previously active key will be deactivated. Note that the JWKs OIDC endpoint returns a cacheable response. Therefore it is not advised to activate a key that has been created within the cache duration (default is 5min), as the public key may not have been propagated to caches and clients yet.
      operationId: ZITADELWebKeys_ActivateWebKey
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v3alphaActivateWebKeyResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
  /resources/v3alpha/web_keys/{id}:
    delete:
      summary: Delete a web key pair for the instance
      description: Delete a web key pair. Only inactive keys can be deleted. Once a key is deleted, any tokens signed by this key will be invalid.
      operationId: ZITADELWebKeys_DeleteWebKey
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v3alphaDeleteWebKeyResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: instance.id
          in: query
          required: false
          type: string
        - name: instance.domain
          in: query
          required: false
          type: string
  /v2/saml/saml_requests/{samlRequestId}:
    get:
      summary: Get SAML Request details
      description: Get SAML Request details by ID. Returns details that are parsed from the application's SAML Request.
      operationId: SAMLService_GetSAMLRequest
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v2GetSAMLRequestResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: samlRequestId
          description: ID of the SAML Request, as obtained from the redirect URL.
          in: path
          required: true
          type: string
    post:
      summary: Finalize a SAML Request and get the response.
      description: Finalize a SAML Request and get the response definition for success or failure. The response must be handled as per the SAML definition to inform the application about the success or failure. On success, the response contains details for the application to obtain the SAMLResponse. This method can only be called once for an SAML request.
      operationId: SAMLService_CreateResponse
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/v2CreateResponseResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: samlRequestId
          description: ID of the SAML Request.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/SAMLServiceCreateResponseBody'
  /v2/sessions/search:
    post:
      summary: Search sessions
      description: Search for sessions
      operationId: SessionService_ListSessions
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sessionv2ListSessionsResponse'
        '400':
          description: invalid list query
          schema:
            $ref: '#/definitions/rpcStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/sessionv2ListSessionsRequest'
  /v2/sessions/{sessionId}:
    get:
      summary: Get a session
      description: Get a session and all its information like the time of the user or password verification
      operationId: SessionService_GetSession
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sessionv2GetSessionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: sessionId
          in: path
          required: true
          type: string
        - name: sessionToken
          in: query
          required: false
          type: string
    delete:
      summary: Terminate an existing session
      description: Terminate your own session or if granted any other session.
      operationId: SessionService_DeleteSession
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sessionv2DeleteSessionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: sessionId
          description: '"id of the session to terminate"'
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/sessionv2SessionServiceDeleteSessionBody'
    patch:
      summary: Update an existing session
      description: Update an existing session with new information.
      operationId: SessionService_SetSession
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sessionv2SetSessionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: sessionId
          description: '"id of the session to update"'
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/sessionv2SessionServiceSetSessionBody'
  /v2/sessions:
    post:
      summary: Create a new session
      description: Create a new session. A token will be returned, which is required for further updates of the session.
      operationId: SessionService_CreateSession
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sessionv2CreateSessionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/sessionv2CreateSessionRequest'
  /v2beta/sessions/search:
    post:
      summary: Search sessions
      description: Search for sessions
      operationId: SessionService_ListSessions
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sessionv2betaListSessionsResponse'
        '400':
          description: invalid list query
          schema:
            $ref: '#/definitions/rpcStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/sessionv2betaListSessionsRequest'
  /v2beta/sessions/{sessionId}:
    get:
      summary: Get a session
      description: Get a session and all its information like the time of the user or password verification
      operationId: SessionService_GetSession
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sessionv2betaGetSessionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: sessionId
          in: path
          required: true
          type: string
        - name: sessionToken
          in: query
          required: false
          type: string
    delete:
      summary: Terminate an existing session
      description: Terminate your own session or if granted any other session.
      operationId: SessionService_DeleteSession
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sessionv2betaDeleteSessionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: sessionId
          description: '"id of the session to terminate"'
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/sessionv2betaSessionServiceDeleteSessionBody'
    patch:
      summary: Update an existing session
      description: Update an existing session with new information.
      operationId: SessionService_SetSession
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sessionv2betaSetSessionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: sessionId
          description: '"id of the session to update"'
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/sessionv2betaSessionServiceSetSessionBody'
  /v2beta/sessions:
    post:
      summary: Create a new session
      description: Create a new session. A token will be returned, which is required for further updates of the session.
      operationId: SessionService_CreateSession
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sessionv2betaCreateSessionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/sessionv2betaCreateSessionRequest'
  /v2/settings:
    get:
      summary: Get basic information over the instance
      description: Return the basic information of the instance for the requested context
      operationId: SettingsService_GetGeneralSettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2GetGeneralSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
  /v2/settings/login:
    get:
      summary: Get the login settings
      description: Return the settings for the requested context
      operationId: SettingsService_GetLoginSettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2GetLoginSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2/settings/login/idps:
    get:
      summary: Get the current active identity providers
      description: Return the current active identity providers for the requested context
      operationId: SettingsService_GetActiveIdentityProviders
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2GetActiveIdentityProvidersResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
        - name: creationAllowed
          in: query
          required: false
          type: boolean
        - name: linkingAllowed
          in: query
          required: false
          type: boolean
        - name: autoCreation
          in: query
          required: false
          type: boolean
        - name: autoLinking
          in: query
          required: false
          type: boolean
  /v2/settings/password/complexity:
    get:
      summary: Get the password complexity settings
      description: Return the password complexity settings for the requested context
      operationId: SettingsService_GetPasswordComplexitySettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2GetPasswordComplexitySettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2/settings/password/expiry:
    get:
      summary: Get the password expiry settings
      description: Return the password expiry settings for the requested context
      operationId: SettingsService_GetPasswordExpirySettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2GetPasswordExpirySettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2/settings/branding:
    get:
      summary: Get the current active branding settings
      description: Return the current active branding settings for the requested context
      operationId: SettingsService_GetBrandingSettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2GetBrandingSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2/settings/domain:
    get:
      summary: Get the domain settings
      description: Return the domain settings for the requested context
      operationId: SettingsService_GetDomainSettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2GetDomainSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2/settings/legal_support:
    get:
      summary: Get the legal and support settings
      description: Return the legal settings for the requested context
      operationId: SettingsService_GetLegalAndSupportSettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2GetLegalAndSupportSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2/settings/lockout:
    get:
      summary: Get the lockout settings
      description: Return the lockout settings for the requested context, which define when a user will be locked
      operationId: SettingsService_GetLockoutSettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2GetLockoutSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2/settings/security:
    get:
      summary: Get Security Settings
      description: Returns the security settings of the ZITADEL instance.
      operationId: SettingsService_GetSecuritySettings
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/settingsv2GetSecuritySettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - Settings
  /v2/policies/security:
    put:
      summary: Set Security Settings
      description: Set the security settings of the ZITADEL instance.
      operationId: SettingsService_SetSecuritySettings
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/settingsv2SetSecuritySettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/settingsv2SetSecuritySettingsRequest'
      tags:
        - Settings
  /v2beta/settings:
    get:
      summary: Get basic information over the instance
      description: Return the basic information of the instance for the requested context
      operationId: SettingsService_GetGeneralSettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2betaGetGeneralSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
  /v2beta/settings/login:
    get:
      summary: Get the login settings
      description: Return the settings for the requested context
      operationId: SettingsService_GetLoginSettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2betaGetLoginSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2beta/settings/login/idps:
    get:
      summary: Get the current active identity providers
      description: Return the current active identity providers for the requested context
      operationId: SettingsService_GetActiveIdentityProviders
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2betaGetActiveIdentityProvidersResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2beta/settings/password/complexity:
    get:
      summary: Get the password complexity settings
      description: Return the password complexity settings for the requested context
      operationId: SettingsService_GetPasswordComplexitySettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2betaGetPasswordComplexitySettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2beta/settings/password/expiry:
    get:
      summary: Get the password expiry settings
      description: Return the password expiry settings for the requested context
      operationId: SettingsService_GetPasswordExpirySettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2betaGetPasswordExpirySettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2beta/settings/branding:
    get:
      summary: Get the current active branding settings
      description: Return the current active branding settings for the requested context
      operationId: SettingsService_GetBrandingSettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2betaGetBrandingSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2beta/settings/domain:
    get:
      summary: Get the domain settings
      description: Return the domain settings for the requested context
      operationId: SettingsService_GetDomainSettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2betaGetDomainSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2beta/settings/legal_support:
    get:
      summary: Get the legal and support settings
      description: Return the legal settings for the requested context
      operationId: SettingsService_GetLegalAndSupportSettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2betaGetLegalAndSupportSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2beta/settings/lockout:
    get:
      summary: Get the lockout settings
      description: Return the lockout settings for the requested context, which define when a user will be locked
      operationId: SettingsService_GetLockoutSettings
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/settingsv2betaGetLockoutSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ctx.orgId
          in: query
          required: false
          type: string
        - name: ctx.instance
          in: query
          required: false
          type: boolean
  /v2beta/settings/security:
    get:
      summary: Get Security Settings
      description: Returns the security settings of the ZITADEL instance.
      operationId: SettingsService_GetSecuritySettings
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/settingsv2betaGetSecuritySettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
  /v2beta/policies/security:
    put:
      summary: Set Security Settings
      description: Set the security settings of the ZITADEL instance.
      operationId: SettingsService_SetSecuritySettings
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/settingsv2betaSetSecuritySettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/settingsv2betaSetSecuritySettingsRequest'
components:
  schemas:
    featurev2ImprovedPerformance:
      type: string
      enum:
        - IMPROVED_PERFORMANCE_UNSPECIFIED
        - IMPROVED_PERFORMANCE_ORG_BY_ID
        - IMPROVED_PERFORMANCE_PROJECT_GRANT
        - IMPROVED_PERFORMANCE_PROJECT
        - IMPROVED_PERFORMANCE_USER_GRANT
        - IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED
      default: IMPROVED_PERFORMANCE_UNSPECIFIED
      description: |2-
         - IMPROVED_PERFORMANCE_ORG_BY_ID: Uses the eventstore to query the org by id
        instead of the sql table.
         - IMPROVED_PERFORMANCE_PROJECT_GRANT: Improves performance on write side by using
        optimized processes to query data to determine
        correctnes of data.
         - IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED: Improve performance on write side when
        users are checked against verified domains
        from other organizations.
    featurev2LoginV2:
      type: object
      properties:
        required:
          type: boolean
          description: Require that all users must use the new login UI. If enabled, all users will be redirected to the login V2 regardless of the application's preference.
        baseUri:
          type: string
          description: Optionally specify a base uri of the login UI. If unspecified the default URI will be used.
    featurev2SetSystemFeaturesRequest:
      type: object
      properties:
        loginDefaultOrg:
          type: boolean
          example: true
          description: The login UI will use the settings of the default org (and not from the instance) if no organization context is set
        oidcTriggerIntrospectionProjections:
          type: boolean
          example: true
          description: Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature.
        oidcLegacyIntrospection:
          type: boolean
          example: true
          description: We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature.
        userSchema:
          type: boolean
          example: true
          description: User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.
        oidcTokenExchange:
          type: boolean
          example: true
          description: Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance.
        actions:
          type: boolean
          example: true
          description: Actions allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.
        improvedPerformance:
          type: array
          example:
            - 1
          items:
            $ref: '#/components/schemas/featurev2ImprovedPerformance'
          description: Improves performance of specified execution paths.
        oidcSingleV1SessionTermination:
          type: boolean
          example: true
          description: If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions.
        disableUserTokenEvent:
          type: boolean
          example: true
          description: Do not push user token meta-event user.token.v2.added to improve performance on many concurrent single (machine-)user logins
        enableBackChannelLogout:
          type: boolean
          example: true
          description: If the flag is enabled, you'll be able to use the OIDC Back-Channel Logout to be notified in your application about terminated user sessions.
        loginV2:
          $ref: '#/components/schemas/featurev2LoginV2'
          description: Specify the login UI for all users and applications regardless of their preference.
    featurev2SetInstanceFeaturesRequest:
      type: object
      properties:
        loginDefaultOrg:
          type: boolean
          example: true
          description: The login UI will use the settings of the default org (and not from the instance) if no organization context is set
        oidcTriggerIntrospectionProjections:
          type: boolean
          example: true
          description: Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature.
        oidcLegacyIntrospection:
          type: boolean
          example: true
          description: We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature.
        userSchema:
          type: boolean
          example: true
          description: User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.
        oidcTokenExchange:
          type: boolean
          example: true
          description: Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance.
        actions:
          type: boolean
          example: true
          description: Actions allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.
        improvedPerformance:
          type: array
          example:
            - 1
          items:
            $ref: '#/components/schemas/featurev2ImprovedPerformance'
          description: Improves performance of specified execution paths.
        webKey:
          type: boolean
          example: true
          description: Enable the webkey/v3alpha API. The first time this feature is enabled, web keys are generated and activated.
        debugOidcParentError:
          type: boolean
          example: true
          description: Return parent errors to OIDC clients for debugging purposes. Parent errors may contain sensitive data or unwanted details about the system status of zitadel. Only enable if really needed.
        oidcSingleV1SessionTermination:
          type: boolean
          example: true
          description: If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions.
        disableUserTokenEvent:
          type: boolean
          example: true
          description: Do not push user token meta-event user.token.v2.added to improve performance on many concurrent single (machine-)user logins
        enableBackChannelLogout:
          type: boolean
          example: true
          description: If the flag is enabled, you'll be able to use the OIDC Back-Channel Logout to be notified in your application about terminated user sessions.
        loginV2:
          $ref: '#/components/schemas/featurev2LoginV2'
          description: Specify the login UI for all users and applications regardless of their preference.
    featurev2FeatureServiceSetOrganizationFeaturesBody:
      type: object
    featurev2FeatureServiceSetUserFeaturesBody:
      type: object
    featurev2betaImprovedPerformance:
      type: string
      enum:
        - IMPROVED_PERFORMANCE_UNSPECIFIED
        - IMPROVED_PERFORMANCE_ORG_BY_ID
        - IMPROVED_PERFORMANCE_PROJECT_GRANT
        - IMPROVED_PERFORMANCE_PROJECT
        - IMPROVED_PERFORMANCE_USER_GRANT
        - IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED
      default: IMPROVED_PERFORMANCE_UNSPECIFIED
      description: |2-
         - IMPROVED_PERFORMANCE_ORG_BY_ID: Uses the eventstore to query the org by id
        instead of the sql table.
         - IMPROVED_PERFORMANCE_PROJECT_GRANT: Improves performance on write side by using
        optimized processes to query data to determine
        correctnes of data.
         - IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED: Improve performance on write side when
        users are checked against verified domains
        from other organizations.
    featurev2betaSetSystemFeaturesRequest:
      type: object
      properties:
        loginDefaultOrg:
          type: boolean
          example: true
          description: The login UI will use the settings of the default org (and not from the instance) if no organization context is set
        oidcTriggerIntrospectionProjections:
          type: boolean
          example: true
          description: Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature.
        oidcLegacyIntrospection:
          type: boolean
          example: true
          description: We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature.
        userSchema:
          type: boolean
          example: true
          description: User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.
        oidcTokenExchange:
          type: boolean
          example: true
          description: Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance.
        actions:
          type: boolean
          example: true
          description: Actions allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.
        improvedPerformance:
          type: array
          example:
            - 1
          items:
            $ref: '#/components/schemas/featurev2betaImprovedPerformance'
          description: Improves performance of specified execution paths.
        oidcSingleV1SessionTermination:
          type: boolean
          example: true
          description: If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions.
    featurev2betaSetInstanceFeaturesRequest:
      type: object
      properties:
        loginDefaultOrg:
          type: boolean
          example: true
          description: The login UI will use the settings of the default org (and not from the instance) if no organization context is set
        oidcTriggerIntrospectionProjections:
          type: boolean
          example: true
          description: Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature.
        oidcLegacyIntrospection:
          type: boolean
          example: true
          description: We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature.
        userSchema:
          type: boolean
          example: true
          description: User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.
        oidcTokenExchange:
          type: boolean
          example: true
          description: Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance.
        actions:
          type: boolean
          example: true
          description: Actions allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.
        improvedPerformance:
          type: array
          example:
            - 1
          items:
            $ref: '#/components/schemas/featurev2betaImprovedPerformance'
          description: Improves performance of specified execution paths.
        webKey:
          type: boolean
          example: true
          description: Enable the webkey/v3alpha API. The first time this feature is enabled, web keys are generated and activated.
        debugOidcParentError:
          type: boolean
          example: true
          description: Return parent errors to OIDC clients for debugging purposes. Parent errors may contain sensitive data or unwanted details about the system status of zitadel. Only enable if really needed.
        oidcSingleV1SessionTermination:
          type: boolean
          example: true
          description: If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions.
    featurev2betaFeatureServiceSetOrganizationFeaturesBody:
      type: object
    featurev2betaFeatureServiceSetUserFeaturesBody:
      type: object
    zitadeloidcv2Session:
      type: object
      properties:
        sessionId:
          type: string
          example: '163840776835432705'
          description: ID of the session, used to login the user. Connects the session to the Auth Request.
          maxLength: 200
          minLength: 1
        sessionToken:
          type: string
          description: Token to verify the session is valid
          maxLength: 200
          minLength: 1
    zitadeloidcv2ErrorReason:
      type: string
      enum:
        - ERROR_REASON_UNSPECIFIED
        - ERROR_REASON_INVALID_REQUEST
        - ERROR_REASON_UNAUTHORIZED_CLIENT
        - ERROR_REASON_ACCESS_DENIED
        - ERROR_REASON_UNSUPPORTED_RESPONSE_TYPE
        - ERROR_REASON_INVALID_SCOPE
        - ERROR_REASON_SERVER_ERROR
        - ERROR_REASON_TEMPORARY_UNAVAILABLE
        - ERROR_REASON_INTERACTION_REQUIRED
        - ERROR_REASON_LOGIN_REQUIRED
        - ERROR_REASON_ACCOUNT_SELECTION_REQUIRED
        - ERROR_REASON_CONSENT_REQUIRED
        - ERROR_REASON_INVALID_REQUEST_URI
        - ERROR_REASON_INVALID_REQUEST_OBJECT
        - ERROR_REASON_REQUEST_NOT_SUPPORTED
        - ERROR_REASON_REQUEST_URI_NOT_SUPPORTED
        - ERROR_REASON_REGISTRATION_NOT_SUPPORTED
      default: ERROR_REASON_UNSPECIFIED
      title: |-
        - ERROR_REASON_INVALID_REQUEST: Error states from https://datatracker.ietf.org/doc/html/rfc6749#section-4.2.2.1
         - ERROR_REASON_INTERACTION_REQUIRED: Error states from https://openid.net/specs/openid-connect-core-1_0.html#AuthError
    zitadeloidcv2AuthorizationError:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/zitadeloidcv2ErrorReason'
        errorDescription:
          type: string
        errorUri:
          type: string
    oidcv2OIDCServiceCreateCallbackBody:
      type: object
      properties:
        session:
          $ref: '#/components/schemas/zitadeloidcv2Session'
        error:
          $ref: '#/components/schemas/zitadeloidcv2AuthorizationError'
          description: Set this field when the authorization flow failed. It creates a callback URL to the application, with the error details set.
    zitadeloidcv2betaSession:
      type: object
      properties:
        sessionId:
          type: string
          example: '163840776835432705'
          description: ID of the session, used to login the user. Connects the session to the Auth Request.
          maxLength: 200
          minLength: 1
        sessionToken:
          type: string
          description: Token to verify the session is valid
          maxLength: 200
          minLength: 1
    oidcv2betaErrorReason:
      type: string
      enum:
        - ERROR_REASON_UNSPECIFIED
        - ERROR_REASON_INVALID_REQUEST
        - ERROR_REASON_UNAUTHORIZED_CLIENT
        - ERROR_REASON_ACCESS_DENIED
        - ERROR_REASON_UNSUPPORTED_RESPONSE_TYPE
        - ERROR_REASON_INVALID_SCOPE
        - ERROR_REASON_SERVER_ERROR
        - ERROR_REASON_TEMPORARY_UNAVAILABLE
        - ERROR_REASON_INTERACTION_REQUIRED
        - ERROR_REASON_LOGIN_REQUIRED
        - ERROR_REASON_ACCOUNT_SELECTION_REQUIRED
        - ERROR_REASON_CONSENT_REQUIRED
        - ERROR_REASON_INVALID_REQUEST_URI
        - ERROR_REASON_INVALID_REQUEST_OBJECT
        - ERROR_REASON_REQUEST_NOT_SUPPORTED
        - ERROR_REASON_REQUEST_URI_NOT_SUPPORTED
        - ERROR_REASON_REGISTRATION_NOT_SUPPORTED
      default: ERROR_REASON_UNSPECIFIED
      title: |-
        - ERROR_REASON_INVALID_REQUEST: Error states from https://datatracker.ietf.org/doc/html/rfc6749#section-4.2.2.1
         - ERROR_REASON_INTERACTION_REQUIRED: Error states from https://openid.net/specs/openid-connect-core-1_0.html#AuthError
    oidcv2betaAuthorizationError:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/oidcv2betaErrorReason'
        errorDescription:
          type: string
        errorUri:
          type: string
    oidcv2betaOIDCServiceCreateCallbackBody:
      type: object
      properties:
        session:
          $ref: '#/components/schemas/zitadeloidcv2betaSession'
        error:
          $ref: '#/components/schemas/oidcv2betaAuthorizationError'
          description: Set this field when the authorization flow failed. It creates a callback URL to the application, with the error details set.
    zitadelobjectv2Organization:
      type: object
      properties:
        orgId:
          type: string
        orgDomain:
          type: string
    userv2Gender:
      type: string
      enum:
        - GENDER_UNSPECIFIED
        - GENDER_FEMALE
        - GENDER_MALE
        - GENDER_DIVERSE
      default: GENDER_UNSPECIFIED
    userv2SetHumanProfile:
      type: object
      properties:
        givenName:
          type: string
          example: Minnie
          maxLength: 200
          minLength: 1
        familyName:
          type: string
          example: Mouse
          maxLength: 200
          minLength: 1
        nickName:
          type: string
          example: Mini
          maxLength: 200
        displayName:
          type: string
          example: Minnie Mouse
          maxLength: 200
        preferredLanguage:
          type: string
          example: en
          maxLength: 10
        gender:
          $ref: '#/components/schemas/userv2Gender'
          example: GENDER_FEMALE
      required:
        - givenName
        - familyName
    userv2SendEmailVerificationCode:
      type: object
      properties:
        urlTemplate:
          type: string
          example: https://example.com/email/verify?userID={{.UserID}}&code={{.Code}}&orgID={{.OrgID}}
          description: |-
            Optionally set a url_template, which will be used in the verification mail sent by ZITADEL to guide the user to your verification page.
            If no template is set, the default ZITADEL url will be used.

            The following placeholders can be used: UserID, OrgID, Code
          maxLength: 200
          minLength: 1
    userv2ReturnEmailVerificationCode:
      type: object
    userv2SetHumanEmail:
      type: object
      properties:
        email:
          type: string
          example: mini@mouse.com
          maxLength: 200
          minLength: 1
        sendCode:
          $ref: '#/components/schemas/userv2SendEmailVerificationCode'
        returnCode:
          $ref: '#/components/schemas/userv2ReturnEmailVerificationCode'
        isVerified:
          type: boolean
      required:
        - email
    userv2SendPhoneVerificationCode:
      type: object
    userv2ReturnPhoneVerificationCode:
      type: object
    userv2SetHumanPhone:
      type: object
      properties:
        phone:
          type: string
          example: '+41791234567'
          maxLength: 200
        sendCode:
          $ref: '#/components/schemas/userv2SendPhoneVerificationCode'
        returnCode:
          $ref: '#/components/schemas/userv2ReturnPhoneVerificationCode'
        isVerified:
          type: boolean
    userv2SetMetadataEntry:
      type: object
      properties:
        key:
          type: string
          example: my-key
          maxLength: 200
          minLength: 1
        value:
          type: string
          format: byte
          example: VGhpcyBpcyBteSB0ZXN0IHZhbHVl
          description: The value has to be base64 encoded.
          maxLength: 500000
          minLength: 1
      required:
        - key
        - value
    userv2Password:
      type: object
      properties:
        password:
          type: string
          example: Secr3tP4ssw0rd!
          maxLength: 200
          minLength: 1
        changeRequired:
          type: boolean
      required:
        - password
    userv2HashedPassword:
      type: object
      properties:
        hash:
          type: string
          example: $2a$12$lJ08fqVr8bFJilRVnDT9QeULI7YW.nT3iwUv6dyg0aCrfm3UY8XR2
          description: '"Encoded hash of a password in Modular Crypt Format: https://zitadel.com/docs/concepts/architecture/secrets#hashed-secrets"'
          maxLength: 200
          minLength: 1
        changeRequired:
          type: boolean
      required:
        - hash
    userv2IDPLink:
      type: object
      properties:
        idpId:
          type: string
          example: d654e6ba-70a3-48ef-a95d-37c8d8a7901a
          description: ID of the identity provider
          maxLength: 200
          minLength: 1
        userId:
          type: string
          example: '6516849804890468048461403518'
          description: ID of the user of the identity provider
          maxLength: 200
          minLength: 1
        userName:
          type: string
          example: user@external.com
          description: username of the user of the identity provider
          maxLength: 200
          minLength: 1
    userv2AddHumanUserRequest:
      type: object
      properties:
        userId:
          type: string
          example: d654e6ba-70a3-48ef-a95d-37c8d8a7901a
          description: optionally set your own id unique for the user.
          maxLength: 200
          minLength: 1
        username:
          type: string
          example: minnie-mouse
          description: optionally set a unique username, if none is provided the email will be used.
          maxLength: 200
          minLength: 1
        organization:
          $ref: '#/components/schemas/zitadelobjectv2Organization'
        profile:
          $ref: '#/components/schemas/userv2SetHumanProfile'
        email:
          $ref: '#/components/schemas/userv2SetHumanEmail'
        phone:
          $ref: '#/components/schemas/userv2SetHumanPhone'
        metadata:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/userv2SetMetadataEntry'
        password:
          $ref: '#/components/schemas/userv2Password'
        hashedPassword:
          $ref: '#/components/schemas/userv2HashedPassword'
        idpLinks:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/userv2IDPLink'
        totpSecret:
          type: string
          example: TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK
          description: |-
            An Implementation of RFC 6238 is used, with HMAC-SHA-1 and time-step of 30 seconds.
            Currently no other options are supported, and if anything different is used the validation will fail.
          maxLength: 200
          minLength: 1
      required:
        - profile
        - email
    objectv2ListQuery:
      type: object
      properties:
        offset:
          type: string
          format: uint64
          example: '0'
        limit:
          type: integer
          format: int64
          example: 100
          description: Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken.
        asc:
          type: boolean
          description: default is descending
      description: Object unspecific list filters like offset, limit and asc/desc.
      title: General List Query
    userv2UserFieldName:
      type: string
      enum:
        - USER_FIELD_NAME_UNSPECIFIED
        - USER_FIELD_NAME_USER_NAME
        - USER_FIELD_NAME_FIRST_NAME
        - USER_FIELD_NAME_LAST_NAME
        - USER_FIELD_NAME_NICK_NAME
        - USER_FIELD_NAME_DISPLAY_NAME
        - USER_FIELD_NAME_EMAIL
        - USER_FIELD_NAME_STATE
        - USER_FIELD_NAME_TYPE
        - USER_FIELD_NAME_CREATION_DATE
      default: USER_FIELD_NAME_UNSPECIFIED
    objectv2TextQueryMethod:
      type: string
      enum:
        - TEXT_QUERY_METHOD_EQUALS
        - TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE
        - TEXT_QUERY_METHOD_STARTS_WITH
        - TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE
        - TEXT_QUERY_METHOD_CONTAINS
        - TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE
        - TEXT_QUERY_METHOD_ENDS_WITH
        - TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE
      default: TEXT_QUERY_METHOD_EQUALS
    userv2UserNameQuery:
      type: object
      properties:
        userName:
          type: string
          example: gigi-giraffe
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2TextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific user name.
      required:
        - userName
    userv2FirstNameQuery:
      type: object
      properties:
        firstName:
          type: string
          example: Gigi
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2TextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific first name.
      required:
        - firstName
    userv2LastNameQuery:
      type: object
      properties:
        lastName:
          type: string
          example: Giraffe
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2TextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific last name.
      required:
        - lastName
    userv2NickNameQuery:
      type: object
      properties:
        nickName:
          type: string
          example: Gigi
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2TextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific nickname.
      required:
        - nickName
    userv2DisplayNameQuery:
      type: object
      properties:
        displayName:
          type: string
          example: Gigi Giraffe
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2TextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific display name.
      required:
        - displayName
    userv2EmailQuery:
      type: object
      properties:
        emailAddress:
          type: string
          example: gigi@zitadel.com
          description: email address of the user
          maxLength: 200
        method:
          $ref: '#/components/schemas/objectv2TextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific email.
      required:
        - emailAddress
    userv2UserState:
      type: string
      enum:
        - USER_STATE_UNSPECIFIED
        - USER_STATE_ACTIVE
        - USER_STATE_INACTIVE
        - USER_STATE_DELETED
        - USER_STATE_LOCKED
        - USER_STATE_INITIAL
      default: USER_STATE_UNSPECIFIED
    userv2StateQuery:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/userv2UserState'
          description: current state of the user
      description: Query for users with a specific state.
      required:
        - state
    userv2Type:
      type: string
      enum:
        - TYPE_UNSPECIFIED
        - TYPE_HUMAN
        - TYPE_MACHINE
      default: TYPE_UNSPECIFIED
    userv2TypeQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/userv2Type'
          description: the type of the user
      description: Query for users with a specific type.
      required:
        - type
    userv2LoginNameQuery:
      type: object
      properties:
        loginName:
          type: string
          example: gigi@zitadel.cloud
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2TextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific state.
      required:
        - loginName
    userv2InUserIDQuery:
      type: object
      properties:
        userIds:
          type: array
          example:
            - '69629023906488334'
            - '69622366012355662'
          items:
            type: string
          description: the ids of the users to include
      description: Query for users with ID in list of IDs.
    zitadeluserv2SearchQuery:
      type: object
      properties:
        userNameQuery:
          $ref: '#/components/schemas/userv2UserNameQuery'
        firstNameQuery:
          $ref: '#/components/schemas/userv2FirstNameQuery'
        lastNameQuery:
          $ref: '#/components/schemas/userv2LastNameQuery'
        nickNameQuery:
          $ref: '#/components/schemas/userv2NickNameQuery'
        displayNameQuery:
          $ref: '#/components/schemas/userv2DisplayNameQuery'
        emailQuery:
          $ref: '#/components/schemas/userv2EmailQuery'
        stateQuery:
          $ref: '#/components/schemas/userv2StateQuery'
        typeQuery:
          $ref: '#/components/schemas/userv2TypeQuery'
        loginNameQuery:
          $ref: '#/components/schemas/userv2LoginNameQuery'
        inUserIdsQuery:
          $ref: '#/components/schemas/userv2InUserIDQuery'
        orQuery:
          $ref: '#/components/schemas/userv2OrQuery'
        andQuery:
          $ref: '#/components/schemas/userv2AndQuery'
        notQuery:
          $ref: '#/components/schemas/userv2NotQuery'
        inUserEmailsQuery:
          $ref: '#/components/schemas/userv2InUserEmailsQuery'
        organizationIdQuery:
          $ref: '#/components/schemas/userv2OrganizationIdQuery'
        phoneQuery:
          $ref: '#/components/schemas/userv2PhoneQuery'
    userv2OrQuery:
      type: object
      properties:
        queries:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/zitadeluserv2SearchQuery'
          description: the sub queries to 'OR'
      description: Connect multiple sub-condition with and OR operator.
    userv2AndQuery:
      type: object
      properties:
        queries:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/zitadeluserv2SearchQuery'
          description: the sub queries to 'AND'
      description: Connect multiple sub-condition with and AND operator.
    userv2NotQuery:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/zitadeluserv2SearchQuery'
          description: the sub query to negate (NOT)
      description: Negate the sub-condition.
    userv2InUserEmailsQuery:
      type: object
      properties:
        userEmails:
          type: array
          example:
            - test@example.com
            - test@example.org
          items:
            type: string
          description: the emails of the users to include
      description: Query for users with email in list of emails.
    userv2OrganizationIdQuery:
      type: object
      properties:
        organizationId:
          type: string
          example: '69629023906488334'
          maxLength: 200
          minLength: 1
      description: Query for users under a specific organization as resource owner.
      required:
        - organizationId
    userv2PhoneQuery:
      type: object
      properties:
        number:
          type: string
          example: '+41791234567'
          description: Phone number of the user
          maxLength: 20
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2TextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific phone.
      required:
        - number
    userv2ListUsersRequest:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/objectv2ListQuery'
          title: list limitations and ordering
        sortingColumn:
          $ref: '#/components/schemas/userv2UserFieldName'
          title: the field the result is sorted
        queries:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/zitadeluserv2SearchQuery'
          title: criteria the client is looking for
    userv2UserServiceSetEmailBody:
      type: object
      properties:
        email:
          type: string
          example: mini@mouse.com
          maxLength: 200
          minLength: 1
        sendCode:
          $ref: '#/components/schemas/userv2SendEmailVerificationCode'
        returnCode:
          $ref: '#/components/schemas/userv2ReturnEmailVerificationCode'
        isVerified:
          type: boolean
      required:
        - email
    userv2UserServiceResendEmailCodeBody:
      type: object
      properties:
        sendCode:
          $ref: '#/components/schemas/userv2SendEmailVerificationCode'
        returnCode:
          $ref: '#/components/schemas/userv2ReturnEmailVerificationCode'
    UserServiceSendEmailCodeBody:
      type: object
      properties:
        sendCode:
          $ref: '#/components/schemas/userv2SendEmailVerificationCode'
        returnCode:
          $ref: '#/components/schemas/userv2ReturnEmailVerificationCode'
    userv2UserServiceVerifyEmailBody:
      type: object
      properties:
        verificationCode:
          type: string
          example: SKJd342k
          description: '"the verification code generated during the set email request"'
          maxLength: 20
          minLength: 1
      required:
        - verificationCode
    userv2UserServiceSetPhoneBody:
      type: object
      properties:
        phone:
          type: string
          example: '+41791234567'
          maxLength: 200
          minLength: 1
        sendCode:
          $ref: '#/components/schemas/userv2SendPhoneVerificationCode'
        returnCode:
          $ref: '#/components/schemas/userv2ReturnPhoneVerificationCode'
        isVerified:
          type: boolean
      required:
        - phone
    userv2UserServiceRemovePhoneBody:
      type: object
    userv2UserServiceResendPhoneCodeBody:
      type: object
      properties:
        sendCode:
          $ref: '#/components/schemas/userv2SendPhoneVerificationCode'
        returnCode:
          $ref: '#/components/schemas/userv2ReturnPhoneVerificationCode'
    userv2UserServiceVerifyPhoneBody:
      type: object
      properties:
        verificationCode:
          type: string
          example: SKJd342k
          description: '"the verification code generated during the set phone request"'
          maxLength: 20
          minLength: 1
      required:
        - verificationCode
    userv2SetPassword:
      type: object
      properties:
        password:
          $ref: '#/components/schemas/userv2Password'
        hashedPassword:
          $ref: '#/components/schemas/userv2HashedPassword'
        currentPassword:
          type: string
          example: Secr3tP4ssw0rd!
          maxLength: 200
          minLength: 1
        verificationCode:
          type: string
          example: SKJd342k
          description: '"the verification code generated during password reset request"'
          maxLength: 20
          minLength: 1
      required:
        - currentPassword
        - verificationCode
    userv2UserServiceUpdateHumanUserBody:
      type: object
      properties:
        username:
          type: string
          example: minnie-mouse
          maxLength: 200
          minLength: 1
        profile:
          $ref: '#/components/schemas/userv2SetHumanProfile'
        email:
          $ref: '#/components/schemas/userv2SetHumanEmail'
        phone:
          $ref: '#/components/schemas/userv2SetHumanPhone'
        password:
          $ref: '#/components/schemas/userv2SetPassword'
    userv2UserServiceDeactivateUserBody:
      type: object
    userv2UserServiceReactivateUserBody:
      type: object
    userv2UserServiceLockUserBody:
      type: object
    userv2UserServiceUnlockUserBody:
      type: object
    userv2PasskeyRegistrationCode:
      type: object
      properties:
        id:
          type: string
          example: e2a48d6a-362b-4db6-a1fb-34feab84dc62
          description: '"id to the one time code generated by ZITADEL"'
          maxLength: 200
        code:
          type: string
          example: SomeSpecialCode
          description: '"one time code generated by ZITADEL"'
          maxLength: 200
      required:
        - id
        - code
    userv2PasskeyAuthenticator:
      type: string
      enum:
        - PASSKEY_AUTHENTICATOR_UNSPECIFIED
        - PASSKEY_AUTHENTICATOR_PLATFORM
        - PASSKEY_AUTHENTICATOR_CROSS_PLATFORM
      default: PASSKEY_AUTHENTICATOR_UNSPECIFIED
    userv2UserServiceRegisterPasskeyBody:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/userv2PasskeyRegistrationCode'
          description: '"one time code generated by ZITADEL; required to start the passkey registration without user authentication"'
        authenticator:
          $ref: '#/components/schemas/userv2PasskeyAuthenticator'
          description: '"Optionally specify the authenticator type of the passkey device (platform or cross-platform). If none is provided, both values are allowed."'
        domain:
          type: string
          description: '"Domain on which the user is authenticated."'
    userv2UserServiceVerifyPasskeyRegistrationBody:
      type: object
      properties:
        publicKeyCredential:
          type: object
          example:
            id: pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00
            rawId: pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00
            response:
              attestationObject: o2NmbXRmcGFja2VkZ2F0dFN0bXSiY2FsZyZjc2lnWEcwRQIgRKS3VpeE9tfExXRzkoUKnG4rQWPvtSSt4YtDGgTx32oCIQDPey-2YJ4uIg-QCM4jj6aE2U3tgMFM_RP7Efx6xRu3JGhhdXRoRGF0YVikSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAADju76085Yhmlt1CEOHkwLQAIKWsFWqxeMT8SxZnwp0ZMF1nk6yhs2m3AIvdixCNVgtNpQECAyYgASFYIMGUDSP2FAQn2MIfPMy7cyB_Y30VqixVgGULTBtFjfRiIlggjUGfQo3_-CrMmH3S-ZQkFKWKnNBQEAMkFtG-9A4zqW0
              clientDataJSON: eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiQlhXdHh0WGxJeFZZa0pHT1dVaUVmM25zby02aXZKdWw2YmNmWHdMVlFIayIsIm9yaWdpbiI6Imh0dHBzOi8vbG9jYWxob3N0OjgwODAifQ
            type: public-key
          description: 'PublicKeyCredential Interface. Generated helper methods populate the field from JSON created by a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#publickeycredential'
          maxLength: 1048576
          minLength: 55
        passkeyName:
          type: string
          example: fido key
          maxLength: 200
          minLength: 1
      required:
        - publicKeyCredential
        - passkeyName
    userv2SendPasskeyRegistrationLink:
      type: object
      properties:
        urlTemplate:
          type: string
          example: https://example.com/passkey/register?userID={{.UserID}}&orgID={{.OrgID}}&codeID={{.CodeID}}&code={{.Code}}
          description: |-
            Optionally set a url_template, which will be used in the mail sent by ZITADEL to guide the user to your passkey registration page.
            If no template is set, the default ZITADEL url will be used.

            The following placeholders can be used: UserID, OrgID, CodeID, Code
          maxLength: 200
          minLength: 1
    userv2ReturnPasskeyRegistrationCode:
      type: object
    userv2UserServiceCreatePasskeyRegistrationLinkBody:
      type: object
      properties:
        sendLink:
          $ref: '#/components/schemas/userv2SendPasskeyRegistrationLink'
        returnCode:
          $ref: '#/components/schemas/userv2ReturnPasskeyRegistrationCode'
    UserServiceListPasskeysBody:
      type: object
    userv2UserServiceRegisterU2FBody:
      type: object
      properties:
        domain:
          type: string
          description: '"Domain on which the user is authenticated."'
    userv2UserServiceVerifyU2FRegistrationBody:
      type: object
      properties:
        publicKeyCredential:
          type: object
          example:
            id: pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00
            rawId: pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00
            response:
              attestationObject: o2NmbXRmcGFja2VkZ2F0dFN0bXSiY2FsZyZjc2lnWEcwRQIgRKS3VpeE9tfExXRzkoUKnG4rQWPvtSSt4YtDGgTx32oCIQDPey-2YJ4uIg-QCM4jj6aE2U3tgMFM_RP7Efx6xRu3JGhhdXRoRGF0YVikSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAADju76085Yhmlt1CEOHkwLQAIKWsFWqxeMT8SxZnwp0ZMF1nk6yhs2m3AIvdixCNVgtNpQECAyYgASFYIMGUDSP2FAQn2MIfPMy7cyB_Y30VqixVgGULTBtFjfRiIlggjUGfQo3_-CrMmH3S-ZQkFKWKnNBQEAMkFtG-9A4zqW0
              clientDataJSON: eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiQlhXdHh0WGxJeFZZa0pHT1dVaUVmM25zby02aXZKdWw2YmNmWHdMVlFIayIsIm9yaWdpbiI6Imh0dHBzOi8vbG9jYWxob3N0OjgwODAifQ
            type: public-key
          description: 'PublicKeyCredential Interface. Generated helper methods populate the field from JSON created by a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#publickeycredential'
          maxLength: 1048576
          minLength: 55
        tokenName:
          type: string
          example: fido key
          maxLength: 200
          minLength: 1
      required:
        - publicKeyCredential
        - tokenName
    userv2UserServiceRegisterTOTPBody:
      type: object
    userv2UserServiceVerifyTOTPRegistrationBody:
      type: object
      properties:
        code:
          type: string
          example: '123456'
          description: Code generated by TOTP app or device
      required:
        - code
    userv2UserServiceAddOTPSMSBody:
      type: object
    userv2UserServiceAddOTPEmailBody:
      type: object
    userv2RedirectURLs:
      type: object
      properties:
        successUrl:
          type: string
          example: https://custom.com/login/idp/success
          description: URL on which the user will be redirected after a successful login
          maxLength: 2048
          minLength: 1
        failureUrl:
          type: string
          example: https://custom.com/login/idp/fail
          description: URL on which the user will be redirected after a failed login
          maxLength: 2048
          minLength: 1
    userv2LDAPCredentials:
      type: object
      properties:
        username:
          type: string
          example: username
          description: Username used to login through LDAP
          maxLength: 200
          minLength: 1
        password:
          type: string
          example: Password1!
          description: Password used to login through LDAP
          maxLength: 200
          minLength: 1
    userv2StartIdentityProviderIntentRequest:
      type: object
      properties:
        idpId:
          type: string
          example: '163840776835432705'
          description: ID for existing identity provider
          maxLength: 200
          minLength: 1
        urls:
          $ref: '#/components/schemas/userv2RedirectURLs'
        ldap:
          $ref: '#/components/schemas/userv2LDAPCredentials'
    userv2UserServiceRetrieveIdentityProviderIntentBody:
      type: object
      properties:
        idpIntentToken:
          type: string
          example: SJKL3ioIDpo342ioqw98fjp3sdf32wahb=
          description: token of the idp intent, previously returned on the success response of the IDP callback
          maxLength: 200
          minLength: 1
    userv2UserServiceAddIDPLinkBody:
      type: object
      properties:
        idpLink:
          $ref: '#/components/schemas/userv2IDPLink'
    UserServiceListIDPLinksBody:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/objectv2ListQuery'
          title: list limitations and ordering
    UserServiceRemoveIDPLinkBody:
      type: object
    userv2NotificationType:
      type: string
      enum:
        - NOTIFICATION_TYPE_Unspecified
        - NOTIFICATION_TYPE_Email
        - NOTIFICATION_TYPE_SMS
      default: NOTIFICATION_TYPE_Unspecified
    userv2SendPasswordResetLink:
      type: object
      properties:
        notificationType:
          $ref: '#/components/schemas/userv2NotificationType'
        urlTemplate:
          type: string
          example: https://example.com/password/changey?userID={{.UserID}}&code={{.Code}}&orgID={{.OrgID}}
          description: |-
            Optionally set a url_template, which will be used in the password reset mail sent by ZITADEL to guide the user to your password change page.
            If no template is set, the default ZITADEL url will be used.

            The following placeholders can be used: UserID, OrgID, Code
          maxLength: 200
          minLength: 1
    userv2ReturnPasswordResetCode:
      type: object
    userv2UserServicePasswordResetBody:
      type: object
      properties:
        sendLink:
          $ref: '#/components/schemas/userv2SendPasswordResetLink'
        returnCode:
          $ref: '#/components/schemas/userv2ReturnPasswordResetCode'
    userv2UserServiceSetPasswordBody:
      type: object
      properties:
        newPassword:
          $ref: '#/components/schemas/userv2Password'
        currentPassword:
          type: string
          example: Secr3tP4ssw0rd!
          maxLength: 200
          minLength: 1
        verificationCode:
          type: string
          example: SKJd342k
          description: '"the verification code generated during password reset request"'
          maxLength: 20
          minLength: 1
      required:
        - currentPassword
        - verificationCode
    v2SendInviteCode:
      type: object
      properties:
        urlTemplate:
          type: string
          example: https://example.com/user/invite?userID={{.UserID}}&code={{.Code}}&orgID={{.OrgID}}
          description: |-
            Optionally set a url_template, which will be used in the invite mail sent by ZITADEL to guide the user to your invitation page.
            If no template is set, the default ZITADEL url will be used.

            The following placeholders can be used: UserID, OrgID, Code
          maxLength: 200
          minLength: 1
        applicationName:
          type: string
          example: CustomerPortal
          description: |-
            Optionally set an application name, which will be used in the invite mail sent by ZITADEL.
            If no application name is set, ZITADEL will be used as default.
          maxLength: 200
          minLength: 1
    v2ReturnInviteCode:
      type: object
    UserServiceCreateInviteCodeBody:
      type: object
      properties:
        sendCode:
          $ref: '#/components/schemas/v2SendInviteCode'
        returnCode:
          $ref: '#/components/schemas/v2ReturnInviteCode'
    UserServiceVerifyInviteCodeBody:
      type: object
      properties:
        verificationCode:
          type: string
          example: SKJd342k
          description: '"the verification code generated during the invite code request"'
          maxLength: 20
          minLength: 1
      required:
        - verificationCode
    orgv2AddOrganizationRequestAdmin:
      type: object
      properties:
        userId:
          type: string
        human:
          $ref: '#/components/schemas/userv2AddHumanUserRequest'
        roles:
          type: array
          items:
            type: string
          title: specify Org Member Roles for the provided user (default is ORG_OWNER if roles are empty)
    orgv2AddOrganizationRequest:
      type: object
      properties:
        name:
          type: string
          example: ZITADEL
          maxLength: 200
          minLength: 1
        admins:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/orgv2AddOrganizationRequestAdmin'
      required:
        - name
    v2OrganizationFieldName:
      type: string
      enum:
        - ORGANIZATION_FIELD_NAME_UNSPECIFIED
        - ORGANIZATION_FIELD_NAME_NAME
      default: ORGANIZATION_FIELD_NAME_UNSPECIFIED
    v2OrganizationNameQuery:
      type: object
      properties:
        name:
          type: string
          example: gigi-giraffe
          description: Name of the organization.
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2TextQueryMethod'
          description: Defines which text equality method is used.
      required:
        - name
    v2OrganizationDomainQuery:
      type: object
      properties:
        domain:
          type: string
          example: citadel.cloud
          description: Domain used in organization, not necessary primary domain.
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2TextQueryMethod'
          description: Defines which text equality method is used.
      required:
        - domain
    v2OrganizationState:
      type: string
      enum:
        - ORGANIZATION_STATE_UNSPECIFIED
        - ORGANIZATION_STATE_ACTIVE
        - ORGANIZATION_STATE_INACTIVE
        - ORGANIZATION_STATE_REMOVED
      default: ORGANIZATION_STATE_UNSPECIFIED
    v2OrganizationStateQuery:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/v2OrganizationState'
          description: Current state of the organization.
    v2OrganizationIDQuery:
      type: object
      properties:
        id:
          type: string
          example: '69629023906488334'
          description: Unique identifier of the organization.
          maxLength: 200
          minLength: 1
      required:
        - id
    v2DefaultOrganizationQuery:
      type: object
    zitadelorgv2SearchQuery:
      type: object
      properties:
        nameQuery:
          $ref: '#/components/schemas/v2OrganizationNameQuery'
        domainQuery:
          $ref: '#/components/schemas/v2OrganizationDomainQuery'
        stateQuery:
          $ref: '#/components/schemas/v2OrganizationStateQuery'
        idQuery:
          $ref: '#/components/schemas/v2OrganizationIDQuery'
        defaultQuery:
          $ref: '#/components/schemas/v2DefaultOrganizationQuery'
    v2ListOrganizationsRequest:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/objectv2ListQuery'
          title: list limitations and ordering
        sortingColumn:
          $ref: '#/components/schemas/v2OrganizationFieldName'
          title: the field the result is sorted
        queries:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/zitadelorgv2SearchQuery'
          title: criteria the client is looking for
    objectv2betaOrganization:
      type: object
      properties:
        orgId:
          type: string
        orgDomain:
          type: string
    userv2betaGender:
      type: string
      enum:
        - GENDER_UNSPECIFIED
        - GENDER_FEMALE
        - GENDER_MALE
        - GENDER_DIVERSE
      default: GENDER_UNSPECIFIED
    userv2betaSetHumanProfile:
      type: object
      properties:
        givenName:
          type: string
          example: Minnie
          maxLength: 200
          minLength: 1
        familyName:
          type: string
          example: Mouse
          maxLength: 200
          minLength: 1
        nickName:
          type: string
          example: Mini
          maxLength: 200
        displayName:
          type: string
          example: Minnie Mouse
          maxLength: 200
        preferredLanguage:
          type: string
          example: en
          maxLength: 10
        gender:
          $ref: '#/components/schemas/userv2betaGender'
          example: GENDER_FEMALE
      required:
        - givenName
        - familyName
    userv2betaSendEmailVerificationCode:
      type: object
      properties:
        urlTemplate:
          type: string
          example: https://example.com/email/verify?userID={{.UserID}}&code={{.Code}}&orgID={{.OrgID}}
          description: '"Optionally set a url_template, which will be used in the verification mail sent by ZITADEL to guide the user to your verification page. If no template is set, the default ZITADEL url will be used."'
          maxLength: 200
          minLength: 1
    userv2betaReturnEmailVerificationCode:
      type: object
    userv2betaSetHumanEmail:
      type: object
      properties:
        email:
          type: string
          example: mini@mouse.com
          maxLength: 200
          minLength: 1
        sendCode:
          $ref: '#/components/schemas/userv2betaSendEmailVerificationCode'
        returnCode:
          $ref: '#/components/schemas/userv2betaReturnEmailVerificationCode'
        isVerified:
          type: boolean
      required:
        - email
    userv2betaSendPhoneVerificationCode:
      type: object
    userv2betaReturnPhoneVerificationCode:
      type: object
    userv2betaSetHumanPhone:
      type: object
      properties:
        phone:
          type: string
          example: '+41791234567'
          maxLength: 200
        sendCode:
          $ref: '#/components/schemas/userv2betaSendPhoneVerificationCode'
        returnCode:
          $ref: '#/components/schemas/userv2betaReturnPhoneVerificationCode'
        isVerified:
          type: boolean
    userv2betaSetMetadataEntry:
      type: object
      properties:
        key:
          type: string
          example: my-key
          maxLength: 200
          minLength: 1
        value:
          type: string
          format: byte
          example: VGhpcyBpcyBteSB0ZXN0IHZhbHVl
          description: The value has to be base64 encoded.
          maxLength: 500000
          minLength: 1
      required:
        - key
        - value
    userv2betaPassword:
      type: object
      properties:
        password:
          type: string
          example: Secr3tP4ssw0rd!
          maxLength: 200
          minLength: 1
        changeRequired:
          type: boolean
      required:
        - password
    userv2betaHashedPassword:
      type: object
      properties:
        hash:
          type: string
          example: $2a$12$lJ08fqVr8bFJilRVnDT9QeULI7YW.nT3iwUv6dyg0aCrfm3UY8XR2
          description: '"Encoded hash of a password in Modular Crypt Format: https://zitadel.com/docs/concepts/architecture/secrets#hashed-secrets"'
          maxLength: 200
          minLength: 1
        changeRequired:
          type: boolean
      required:
        - hash
    userv2betaIDPLink:
      type: object
      properties:
        idpId:
          type: string
          example: d654e6ba-70a3-48ef-a95d-37c8d8a7901a
          description: ID of the identity provider
          maxLength: 200
          minLength: 1
        userId:
          type: string
          example: '6516849804890468048461403518'
          description: ID of the user of the identity provider
          maxLength: 200
          minLength: 1
        userName:
          type: string
          example: user@external.com
          description: username of the user of the identity provider
          maxLength: 200
          minLength: 1
    userv2betaAddHumanUserRequest:
      type: object
      properties:
        userId:
          type: string
          example: d654e6ba-70a3-48ef-a95d-37c8d8a7901a
          description: optionally set your own id unique for the user.
          maxLength: 200
          minLength: 1
        username:
          type: string
          example: minnie-mouse
          description: optionally set a unique username, if none is provided the email will be used.
          maxLength: 200
          minLength: 1
        organization:
          $ref: '#/components/schemas/objectv2betaOrganization'
        profile:
          $ref: '#/components/schemas/userv2betaSetHumanProfile'
        email:
          $ref: '#/components/schemas/userv2betaSetHumanEmail'
        phone:
          $ref: '#/components/schemas/userv2betaSetHumanPhone'
        metadata:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/userv2betaSetMetadataEntry'
        password:
          $ref: '#/components/schemas/userv2betaPassword'
        hashedPassword:
          $ref: '#/components/schemas/userv2betaHashedPassword'
        idpLinks:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/userv2betaIDPLink'
        totpSecret:
          type: string
          example: TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK
          description: |-
            An Implementation of RFC 6238 is used, with HMAC-SHA-1 and time-step of 30 seconds.
            Currently no other options are supported, and if anything different is used the validation will fail.
          maxLength: 200
          minLength: 1
      required:
        - profile
        - email
    objectv2betaListQuery:
      type: object
      properties:
        offset:
          type: string
          format: uint64
          example: '0'
        limit:
          type: integer
          format: int64
          example: 100
          description: Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken.
        asc:
          type: boolean
          description: default is descending
      description: Object unspecific list filters like offset, limit and asc/desc.
      title: General List Query
    userv2betaUserFieldName:
      type: string
      enum:
        - USER_FIELD_NAME_UNSPECIFIED
        - USER_FIELD_NAME_USER_NAME
        - USER_FIELD_NAME_FIRST_NAME
        - USER_FIELD_NAME_LAST_NAME
        - USER_FIELD_NAME_NICK_NAME
        - USER_FIELD_NAME_DISPLAY_NAME
        - USER_FIELD_NAME_EMAIL
        - USER_FIELD_NAME_STATE
        - USER_FIELD_NAME_TYPE
        - USER_FIELD_NAME_CREATION_DATE
      default: USER_FIELD_NAME_UNSPECIFIED
    objectv2betaTextQueryMethod:
      type: string
      enum:
        - TEXT_QUERY_METHOD_EQUALS
        - TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE
        - TEXT_QUERY_METHOD_STARTS_WITH
        - TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE
        - TEXT_QUERY_METHOD_CONTAINS
        - TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE
        - TEXT_QUERY_METHOD_ENDS_WITH
        - TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE
      default: TEXT_QUERY_METHOD_EQUALS
    userv2betaUserNameQuery:
      type: object
      properties:
        userName:
          type: string
          example: gigi-giraffe
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2betaTextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific user name.
      required:
        - userName
    userv2betaFirstNameQuery:
      type: object
      properties:
        firstName:
          type: string
          example: Gigi
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2betaTextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific first name.
      required:
        - firstName
    userv2betaLastNameQuery:
      type: object
      properties:
        lastName:
          type: string
          example: Giraffe
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2betaTextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific last name.
      required:
        - lastName
    userv2betaNickNameQuery:
      type: object
      properties:
        nickName:
          type: string
          example: Gigi
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2betaTextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific nickname.
      required:
        - nickName
    userv2betaDisplayNameQuery:
      type: object
      properties:
        displayName:
          type: string
          example: Gigi Giraffe
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2betaTextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific display name.
      required:
        - displayName
    userv2betaEmailQuery:
      type: object
      properties:
        emailAddress:
          type: string
          example: gigi@zitadel.com
          description: email address of the user
          maxLength: 200
        method:
          $ref: '#/components/schemas/objectv2betaTextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific email.
      required:
        - emailAddress
    userv2betaUserState:
      type: string
      enum:
        - USER_STATE_UNSPECIFIED
        - USER_STATE_ACTIVE
        - USER_STATE_INACTIVE
        - USER_STATE_DELETED
        - USER_STATE_LOCKED
        - USER_STATE_INITIAL
      default: USER_STATE_UNSPECIFIED
    userv2betaStateQuery:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/userv2betaUserState'
          description: current state of the user
      description: Query for users with a specific state.
      required:
        - state
    userv2betaType:
      type: string
      enum:
        - TYPE_UNSPECIFIED
        - TYPE_HUMAN
        - TYPE_MACHINE
      default: TYPE_UNSPECIFIED
    userv2betaTypeQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/userv2betaType'
          description: the type of the user
      description: Query for users with a specific type.
      required:
        - type
    userv2betaLoginNameQuery:
      type: object
      properties:
        loginName:
          type: string
          example: gigi@zitadel.cloud
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2betaTextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific state.
      required:
        - loginName
    userv2betaInUserIDQuery:
      type: object
      properties:
        userIds:
          type: array
          example:
            - '69629023906488334'
            - '69622366012355662'
          items:
            type: string
          description: the ids of the users to include
      description: Query for users with ID in list of IDs.
    zitadeluserv2betaSearchQuery:
      type: object
      properties:
        userNameQuery:
          $ref: '#/components/schemas/userv2betaUserNameQuery'
        firstNameQuery:
          $ref: '#/components/schemas/userv2betaFirstNameQuery'
        lastNameQuery:
          $ref: '#/components/schemas/userv2betaLastNameQuery'
        nickNameQuery:
          $ref: '#/components/schemas/userv2betaNickNameQuery'
        displayNameQuery:
          $ref: '#/components/schemas/userv2betaDisplayNameQuery'
        emailQuery:
          $ref: '#/components/schemas/userv2betaEmailQuery'
        stateQuery:
          $ref: '#/components/schemas/userv2betaStateQuery'
        typeQuery:
          $ref: '#/components/schemas/userv2betaTypeQuery'
        loginNameQuery:
          $ref: '#/components/schemas/userv2betaLoginNameQuery'
        inUserIdsQuery:
          $ref: '#/components/schemas/userv2betaInUserIDQuery'
        orQuery:
          $ref: '#/components/schemas/userv2betaOrQuery'
        andQuery:
          $ref: '#/components/schemas/userv2betaAndQuery'
        notQuery:
          $ref: '#/components/schemas/userv2betaNotQuery'
        inUserEmailsQuery:
          $ref: '#/components/schemas/userv2betaInUserEmailsQuery'
        organizationIdQuery:
          $ref: '#/components/schemas/userv2betaOrganizationIdQuery'
        phoneQuery:
          $ref: '#/components/schemas/userv2betaPhoneQuery'
    userv2betaOrQuery:
      type: object
      properties:
        queries:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/zitadeluserv2betaSearchQuery'
          description: the sub queries to 'OR'
      description: Connect multiple sub-condition with and OR operator.
    userv2betaAndQuery:
      type: object
      properties:
        queries:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/zitadeluserv2betaSearchQuery'
          description: the sub queries to 'AND'
      description: Connect multiple sub-condition with and AND operator.
    userv2betaNotQuery:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/zitadeluserv2betaSearchQuery'
          description: the sub query to negate (NOT)
      description: Negate the sub-condition.
    userv2betaInUserEmailsQuery:
      type: object
      properties:
        userEmails:
          type: array
          example:
            - test@example.com
            - test@example.org
          items:
            type: string
          description: the emails of the users to include
      description: Query for users with email in list of emails.
    userv2betaOrganizationIdQuery:
      type: object
      properties:
        organizationId:
          type: string
          example: '69629023906488334'
          maxLength: 200
          minLength: 1
      description: Query for users under a specific organization as resource owner.
      required:
        - organizationId
    userv2betaPhoneQuery:
      type: object
      properties:
        number:
          type: string
          example: '+41791234567'
          description: Phone number of the user
          maxLength: 20
          minLength: 1
        method:
          $ref: '#/components/schemas/objectv2betaTextQueryMethod'
          description: defines which text equality method is used
      description: Query for users with a specific phone.
      required:
        - number
    userv2betaListUsersRequest:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/objectv2betaListQuery'
          title: list limitations and ordering
        sortingColumn:
          $ref: '#/components/schemas/userv2betaUserFieldName'
          title: the field the result is sorted
        queries:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/zitadeluserv2betaSearchQuery'
          title: criteria the client is looking for
    userv2betaUserServiceSetEmailBody:
      type: object
      properties:
        email:
          type: string
          example: mini@mouse.com
          maxLength: 200
          minLength: 1
        sendCode:
          $ref: '#/components/schemas/userv2betaSendEmailVerificationCode'
        returnCode:
          $ref: '#/components/schemas/userv2betaReturnEmailVerificationCode'
        isVerified:
          type: boolean
      required:
        - email
    userv2betaUserServiceResendEmailCodeBody:
      type: object
      properties:
        sendCode:
          $ref: '#/components/schemas/userv2betaSendEmailVerificationCode'
        returnCode:
          $ref: '#/components/schemas/userv2betaReturnEmailVerificationCode'
    userv2betaUserServiceVerifyEmailBody:
      type: object
      properties:
        verificationCode:
          type: string
          example: SKJd342k
          description: '"the verification code generated during the set email request"'
          maxLength: 20
          minLength: 1
      required:
        - verificationCode
    userv2betaUserServiceSetPhoneBody:
      type: object
      properties:
        phone:
          type: string
          example: '+41791234567'
          maxLength: 200
          minLength: 1
        sendCode:
          $ref: '#/components/schemas/userv2betaSendPhoneVerificationCode'
        returnCode:
          $ref: '#/components/schemas/userv2betaReturnPhoneVerificationCode'
        isVerified:
          type: boolean
      required:
        - phone
    userv2betaUserServiceRemovePhoneBody:
      type: object
    userv2betaUserServiceResendPhoneCodeBody:
      type: object
      properties:
        sendCode:
          $ref: '#/components/schemas/userv2betaSendPhoneVerificationCode'
        returnCode:
          $ref: '#/components/schemas/userv2betaReturnPhoneVerificationCode'
    userv2betaUserServiceVerifyPhoneBody:
      type: object
      properties:
        verificationCode:
          type: string
          example: SKJd342k
          description: '"the verification code generated during the set phone request"'
          maxLength: 20
          minLength: 1
      required:
        - verificationCode
    userv2betaUserServiceDeactivateUserBody:
      type: object
    userv2betaUserServiceReactivateUserBody:
      type: object
    userv2betaUserServiceLockUserBody:
      type: object
    userv2betaUserServiceUnlockUserBody:
      type: object
    userv2betaPasskeyRegistrationCode:
      type: object
      properties:
        id:
          type: string
          example: e2a48d6a-362b-4db6-a1fb-34feab84dc62
          description: '"id to the one time code generated by ZITADEL"'
          maxLength: 200
        code:
          type: string
          example: SomeSpecialCode
          description: '"one time code generated by ZITADEL"'
          maxLength: 200
      required:
        - id
        - code
    userv2betaPasskeyAuthenticator:
      type: string
      enum:
        - PASSKEY_AUTHENTICATOR_UNSPECIFIED
        - PASSKEY_AUTHENTICATOR_PLATFORM
        - PASSKEY_AUTHENTICATOR_CROSS_PLATFORM
      default: PASSKEY_AUTHENTICATOR_UNSPECIFIED
    userv2betaUserServiceRegisterPasskeyBody:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/userv2betaPasskeyRegistrationCode'
          description: '"one time code generated by ZITADEL; required to start the passkey registration without user authentication"'
        authenticator:
          $ref: '#/components/schemas/userv2betaPasskeyAuthenticator'
          description: '"Optionally specify the authenticator type of the passkey device (platform or cross-platform). If none is provided, both values are allowed."'
        domain:
          type: string
          description: '"Domain on which the user is authenticated."'
    userv2betaUserServiceVerifyPasskeyRegistrationBody:
      type: object
      properties:
        publicKeyCredential:
          type: object
          example:
            id: pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00
            rawId: pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00
            response:
              attestationObject: o2NmbXRmcGFja2VkZ2F0dFN0bXSiY2FsZyZjc2lnWEcwRQIgRKS3VpeE9tfExXRzkoUKnG4rQWPvtSSt4YtDGgTx32oCIQDPey-2YJ4uIg-QCM4jj6aE2U3tgMFM_RP7Efx6xRu3JGhhdXRoRGF0YVikSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAADju76085Yhmlt1CEOHkwLQAIKWsFWqxeMT8SxZnwp0ZMF1nk6yhs2m3AIvdixCNVgtNpQECAyYgASFYIMGUDSP2FAQn2MIfPMy7cyB_Y30VqixVgGULTBtFjfRiIlggjUGfQo3_-CrMmH3S-ZQkFKWKnNBQEAMkFtG-9A4zqW0
              clientDataJSON: eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiQlhXdHh0WGxJeFZZa0pHT1dVaUVmM25zby02aXZKdWw2YmNmWHdMVlFIayIsIm9yaWdpbiI6Imh0dHBzOi8vbG9jYWxob3N0OjgwODAifQ
            type: public-key
          description: 'PublicKeyCredential Interface. Generated helper methods populate the field from JSON created by a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#publickeycredential'
          maxLength: 1048576
          minLength: 55
        passkeyName:
          type: string
          example: fido key
          maxLength: 200
          minLength: 1
      required:
        - publicKeyCredential
        - passkeyName
    userv2betaSendPasskeyRegistrationLink:
      type: object
      properties:
        urlTemplate:
          type: string
          example: https://example.com/passkey/register?userID={{.UserID}}&orgID={{.OrgID}}&codeID={{.CodeID}}&code={{.Code}}
          description: '"Optionally set a url_template, which will be used in the mail sent by ZITADEL to guide the user to your passkey registration page. If no template is set, the default ZITADEL url will be used."'
          maxLength: 200
          minLength: 1
    userv2betaReturnPasskeyRegistrationCode:
      type: object
    userv2betaUserServiceCreatePasskeyRegistrationLinkBody:
      type: object
      properties:
        sendLink:
          $ref: '#/components/schemas/userv2betaSendPasskeyRegistrationLink'
        returnCode:
          $ref: '#/components/schemas/userv2betaReturnPasskeyRegistrationCode'
    userv2betaUserServiceRegisterU2FBody:
      type: object
      properties:
        domain:
          type: string
          description: '"Domain on which the user is authenticated."'
    userv2betaUserServiceVerifyU2FRegistrationBody:
      type: object
      properties:
        publicKeyCredential:
          type: object
          example:
            id: pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00
            rawId: pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00
            response:
              attestationObject: o2NmbXRmcGFja2VkZ2F0dFN0bXSiY2FsZyZjc2lnWEcwRQIgRKS3VpeE9tfExXRzkoUKnG4rQWPvtSSt4YtDGgTx32oCIQDPey-2YJ4uIg-QCM4jj6aE2U3tgMFM_RP7Efx6xRu3JGhhdXRoRGF0YVikSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAADju76085Yhmlt1CEOHkwLQAIKWsFWqxeMT8SxZnwp0ZMF1nk6yhs2m3AIvdixCNVgtNpQECAyYgASFYIMGUDSP2FAQn2MIfPMy7cyB_Y30VqixVgGULTBtFjfRiIlggjUGfQo3_-CrMmH3S-ZQkFKWKnNBQEAMkFtG-9A4zqW0
              clientDataJSON: eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiQlhXdHh0WGxJeFZZa0pHT1dVaUVmM25zby02aXZKdWw2YmNmWHdMVlFIayIsIm9yaWdpbiI6Imh0dHBzOi8vbG9jYWxob3N0OjgwODAifQ
            type: public-key
          description: 'PublicKeyCredential Interface. Generated helper methods populate the field from JSON created by a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#publickeycredential'
          maxLength: 1048576
          minLength: 55
        tokenName:
          type: string
          example: fido key
          maxLength: 200
          minLength: 1
      required:
        - publicKeyCredential
        - tokenName
    userv2betaUserServiceRegisterTOTPBody:
      type: object
    userv2betaUserServiceVerifyTOTPRegistrationBody:
      type: object
      properties:
        code:
          type: string
          example: '123456'
          description: Code generated by TOTP app or device
      required:
        - code
    userv2betaUserServiceAddOTPSMSBody:
      type: object
    userv2betaUserServiceAddOTPEmailBody:
      type: object
    userv2betaRedirectURLs:
      type: object
      properties:
        successUrl:
          type: string
          example: https://custom.com/login/idp/success
          description: URL on which the user will be redirected after a successful login
          maxLength: 2048
          minLength: 1
        failureUrl:
          type: string
          example: https://custom.com/login/idp/fail
          description: URL on which the user will be redirected after a failed login
          maxLength: 2048
          minLength: 1
    userv2betaLDAPCredentials:
      type: object
      properties:
        username:
          type: string
          example: username
          description: Username used to login through LDAP
          maxLength: 200
          minLength: 1
        password:
          type: string
          example: Password1!
          description: Password used to login through LDAP
          maxLength: 200
          minLength: 1
    userv2betaStartIdentityProviderIntentRequest:
      type: object
      properties:
        idpId:
          type: string
          example: '163840776835432705'
          description: ID for existing identity provider
          maxLength: 200
          minLength: 1
        urls:
          $ref: '#/components/schemas/userv2betaRedirectURLs'
        ldap:
          $ref: '#/components/schemas/userv2betaLDAPCredentials'
    userv2betaUserServiceRetrieveIdentityProviderIntentBody:
      type: object
      properties:
        idpIntentToken:
          type: string
          example: SJKL3ioIDpo342ioqw98fjp3sdf32wahb=
          description: token of the idp intent, previously returned on the success response of the IDP callback
          maxLength: 200
          minLength: 1
    userv2betaUserServiceAddIDPLinkBody:
      type: object
      properties:
        idpLink:
          $ref: '#/components/schemas/userv2betaIDPLink'
    userv2betaNotificationType:
      type: string
      enum:
        - NOTIFICATION_TYPE_Unspecified
        - NOTIFICATION_TYPE_Email
        - NOTIFICATION_TYPE_SMS
      default: NOTIFICATION_TYPE_Unspecified
    userv2betaSendPasswordResetLink:
      type: object
      properties:
        notificationType:
          $ref: '#/components/schemas/userv2betaNotificationType'
        urlTemplate:
          type: string
          example: https://example.com/password/changey?userID={{.UserID}}&code={{.Code}}&orgID={{.OrgID}}
          description: '"Optionally set a url_template, which will be used in the password reset mail sent by ZITADEL to guide the user to your password change page. If no template is set, the default ZITADEL url will be used."'
          maxLength: 200
          minLength: 1
    userv2betaReturnPasswordResetCode:
      type: object
    userv2betaUserServicePasswordResetBody:
      type: object
      properties:
        sendLink:
          $ref: '#/components/schemas/userv2betaSendPasswordResetLink'
        returnCode:
          $ref: '#/components/schemas/userv2betaReturnPasswordResetCode'
    userv2betaUserServiceSetPasswordBody:
      type: object
      properties:
        newPassword:
          $ref: '#/components/schemas/userv2betaPassword'
        currentPassword:
          type: string
          example: Secr3tP4ssw0rd!
          maxLength: 200
          minLength: 1
        verificationCode:
          type: string
          example: SKJd342k
          description: '"the verification code generated during password reset request"'
          maxLength: 20
          minLength: 1
      required:
        - currentPassword
        - verificationCode
    orgv2betaAddOrganizationRequestAdmin:
      type: object
      properties:
        userId:
          type: string
        human:
          $ref: '#/components/schemas/userv2betaAddHumanUserRequest'
        roles:
          type: array
          items:
            type: string
          title: specify Org Member Roles for the provided user (default is ORG_OWNER if roles are empty)
    orgv2betaAddOrganizationRequest:
      type: object
      properties:
        name:
          type: string
          example: ZITADEL
          maxLength: 200
          minLength: 1
        admins:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/orgv2betaAddOrganizationRequestAdmin'
      required:
        - name
    v3alphaSetRESTWebhook:
      type: object
      properties:
        interruptOnError:
          type: boolean
          description: Define if any error stops the whole execution. By default the process continues as normal.
      description: Wait for response but response body is ignored, status is checked, call is sent as post.
    v3alphaSetRESTCall:
      type: object
      properties:
        interruptOnError:
          type: boolean
          description: Define if any error stops the whole execution. By default the process continues as normal.
      description: Wait for response and response body is used, status is checked, call is sent as post.
    v3alphaSetRESTAsync:
      type: object
      description: Call is executed in parallel to others, ZITADEL does not wait until the call is finished. The state is ignored, call is sent as post.
    v3alphaTarget:
      type: object
      properties:
        name:
          type: string
          example: ip_allow_list
          maxLength: 1000
          minLength: 1
        restWebhook:
          $ref: '#/components/schemas/v3alphaSetRESTWebhook'
        restCall:
          $ref: '#/components/schemas/v3alphaSetRESTCall'
        restAsync:
          $ref: '#/components/schemas/v3alphaSetRESTAsync'
        timeout:
          type: string
          example: 10s
          description: if the target doesn't respond before this timeout expires, the the connection is closed and the action fails
        endpoint:
          type: string
          example: https://example.com/hooks/ip_check
          maxLength: 1000
          minLength: 1
    actionv3alphaPatchTarget:
      type: object
      properties:
        name:
          type: string
          example: ip_allow_list
          maxLength: 1000
          minLength: 1
        restWebhook:
          $ref: '#/components/schemas/v3alphaSetRESTWebhook'
        restCall:
          $ref: '#/components/schemas/v3alphaSetRESTCall'
        restAsync:
          $ref: '#/components/schemas/v3alphaSetRESTAsync'
        timeout:
          type: string
          example: 10s
          description: if the target doesn't respond before this timeout expires, the the connection is closed and the action fails
        endpoint:
          type: string
          example: https://example.com/hooks/ip_check
          maxLength: 1000
          minLength: 1
        expirationSigningKey:
          type: string
          example: 0s
          description: |-
            Regenerate the key used for signing and checking the payload sent to the target.
            Set the graceful period for the existing key. During that time, the previous
            signing key and the new one will be used to sign the request to allow you a smooth
            transition onf your API.

            Note that we currently only allow an immediate rotation ("0s") and will support
            longer expirations in the future.
    v3alphaTextFilterMethod:
      type: string
      enum:
        - TEXT_FILTER_METHOD_EQUALS
        - TEXT_FILTER_METHOD_EQUALS_IGNORE_CASE
        - TEXT_FILTER_METHOD_STARTS_WITH
        - TEXT_FILTER_METHOD_STARTS_WITH_IGNORE_CASE
        - TEXT_FILTER_METHOD_CONTAINS
      default: TEXT_FILTER_METHOD_EQUALS
    v3alphaTargetNameFilter:
      type: object
      properties:
        targetName:
          type: string
          example: ip_allow_list
          description: Defines the name of the target to query for.
          maxLength: 200
        method:
          $ref: '#/components/schemas/v3alphaTextFilterMethod'
          description: defines which text equality method is used
    v3alphaInTargetIDsFilter:
      type: object
      properties:
        targetIds:
          type: array
          example:
            - '69629023906488334'
            - '69622366012355662'
          items:
            type: string
          description: the ids of the targets to include
    v3alphaTargetSearchFilter:
      type: object
      properties:
        targetNameFilter:
          $ref: '#/components/schemas/v3alphaTargetNameFilter'
        inTargetIdsFilter:
          $ref: '#/components/schemas/v3alphaInTargetIDsFilter'
    objectv3alphaInstance:
      type: object
      properties:
        id:
          type: string
        domain:
          type: string
    v3alphaRequestExecution:
      type: object
      properties:
        method:
          type: string
          example: /zitadel.session.v2.SessionService/ListSessions
          description: GRPC-method as condition.
          maxLength: 1000
          minLength: 1
        service:
          type: string
          example: zitadel.session.v2.SessionService
          description: GRPC-service as condition.
          maxLength: 1000
          minLength: 1
        all:
          type: boolean
          description: All calls to any available services and methods as condition.
    v3alphaResponseExecution:
      type: object
      properties:
        method:
          type: string
          example: /zitadel.session.v2.SessionService/ListSessions
          description: GRPC-method as condition.
          maxLength: 1000
          minLength: 1
        service:
          type: string
          example: zitadel.session.v2.SessionService
          description: GRPC-service as condition.
          maxLength: 1000
          minLength: 1
        all:
          type: boolean
          description: All calls to any available services and methods as condition.
    v3alphaFunctionExecution:
      type: object
      properties:
        name:
          type: string
      title: Executed on the specified function
    v3alphaEventExecution:
      type: object
      properties:
        event:
          type: string
          example: user.human.added
          description: Event name as condition.
          maxLength: 1000
          minLength: 1
        group:
          type: string
          example: user.human
          description: Event group as condition, all events under this group.
          maxLength: 1000
          minLength: 1
        all:
          type: boolean
          description: all events as condition.
    v3alphaCondition:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/v3alphaRequestExecution'
          description: Condition-type to execute if a request on the defined API point happens.
        response:
          $ref: '#/components/schemas/v3alphaResponseExecution'
          description: Condition-type to execute on response if a request on the defined API point happens.
        function:
          $ref: '#/components/schemas/v3alphaFunctionExecution'
          description: Condition-type to execute if function is used, replaces actions v1.
        event:
          $ref: '#/components/schemas/v3alphaEventExecution'
          description: Condition-type to execute if an event is created in the system.
    v3alphaExecutionTargetType:
      type: object
      properties:
        target:
          type: string
          description: Unique identifier of existing target to call.
        include:
          $ref: '#/components/schemas/v3alphaCondition'
          description: Unique identifier of existing execution to include targets of.
    v3alphaExecution:
      type: object
      properties:
        targets:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/v3alphaExecutionTargetType'
          description: Ordered list of targets/includes called during the execution.
    v3alphaSetExecutionRequest:
      type: object
      properties:
        instance:
          $ref: '#/components/schemas/objectv3alphaInstance'
          default: '"domain from HOST or :authority header"'
        condition:
          $ref: '#/components/schemas/v3alphaCondition'
        execution:
          $ref: '#/components/schemas/v3alphaExecution'
    v3alphaInConditionsFilter:
      type: object
      properties:
        conditions:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/v3alphaCondition'
          description: Defines the conditions to query for.
    v3alphaExecutionType:
      type: string
      enum:
        - EXECUTION_TYPE_UNSPECIFIED
        - EXECUTION_TYPE_REQUEST
        - EXECUTION_TYPE_RESPONSE
        - EXECUTION_TYPE_EVENT
        - EXECUTION_TYPE_FUNCTION
      default: EXECUTION_TYPE_UNSPECIFIED
    v3alphaExecutionTypeFilter:
      type: object
      properties:
        executionType:
          $ref: '#/components/schemas/v3alphaExecutionType'
          description: Defines the type to query for.
    v3alphaTargetFilter:
      type: object
      properties:
        targetId:
          type: string
          example: '69629023906488334'
          description: the id of the targets to include
    v3alphaIncludeFilter:
      type: object
      properties:
        include:
          $ref: '#/components/schemas/v3alphaCondition'
          example: request.zitadel.session.v2.SessionService
          description: the id of the include
    v3alphaExecutionSearchFilter:
      type: object
      properties:
        inConditionsFilter:
          $ref: '#/components/schemas/v3alphaInConditionsFilter'
        executionTypeFilter:
          $ref: '#/components/schemas/v3alphaExecutionTypeFilter'
        targetFilter:
          $ref: '#/components/schemas/v3alphaTargetFilter'
        includeFilter:
          $ref: '#/components/schemas/v3alphaIncludeFilter'
    v3alphaAddedEvent:
      type: object
      properties:
        projectionSleep:
          type: string
          example: 5s
          description: issues a pg_sleep command in the projection reducer, simulating a slow query.
        blob:
          type: string
          description: optional text that can be set as a state.
    v3alphaChangedEvent:
      type: object
      properties:
        projectionSleep:
          type: string
          example: 5s
          description: issues a pg_sleep command in the projection reducer, simulating a slow query.
        blob:
          type: string
          description: optional text that can be set as a state.
    v3alphaRemovedEvent:
      type: object
      properties:
        projectionSleep:
          type: string
          example: 5s
          description: issues a pg_sleep command in the projection reducer, simulating a slow query.
    debug_eventsv3alphaEvent:
      type: object
      properties:
        add:
          $ref: '#/components/schemas/v3alphaAddedEvent'
        change:
          $ref: '#/components/schemas/v3alphaChangedEvent'
        remove:
          $ref: '#/components/schemas/v3alphaRemovedEvent'
    resourcesuserv3alphaSearchFilter:
      type: object
      properties:
        orFilter:
          $ref: '#/components/schemas/resourcesuserv3alphaOrFilter'
          description: Union the results of each sub filter ('OR').
        andFilter:
          $ref: '#/components/schemas/resourcesuserv3alphaAndFilter'
          description: |-
            Limit the result to match all sub queries ('AND').
            Note that if you specify multiple queries, they will be implicitly used as andQueries.
            Use the andFilter in combination with orFilter and notFilter.
        notFilter:
          $ref: '#/components/schemas/resourcesuserv3alphaNotFilter'
          description: Exclude / Negate the result of the sub query ('NOT').
        userIdFilter:
          $ref: '#/components/schemas/v3alphaUserIDFilter'
          description: Limit the result to a specific user ID.
        organizationIdFilter:
          $ref: '#/components/schemas/v3alphaOrganizationIDFilter'
          description: Limit the result to a specific organization.
        usernameFilter:
          $ref: '#/components/schemas/v3alphaUsernameFilter'
          description: Limit the result to a specific username.
        emailFilter:
          $ref: '#/components/schemas/v3alphaEmailFilter'
          description: Limit the result to a specific contact email.
        phoneFilter:
          $ref: '#/components/schemas/v3alphaPhoneFilter'
          description: Limit the result to a specific contact phone.
        stateFilter:
          $ref: '#/components/schemas/resourcesuserv3alphaStateFilter'
          description: Limit the result to a specific state of the user.
        schemaIdFilter:
          $ref: '#/components/schemas/v3alphaSchemaIDFilter'
          description: Limit the result to a specific schema ID.
        schemaTypeFilter:
          $ref: '#/components/schemas/v3alphaSchemaTypeFilter'
          description: Limit the result to a specific schema type.
    resourcesuserv3alphaOrFilter:
      type: object
      properties:
        queries:
          type: array
          example:
            - userIdFilter:
                id: '163840776835432705'
                method: TEXT_FILTER_METHOD_EQUALS
            - userIdFilter:
                id: '163840776835943483'
                method: TEXT_FILTER_METHOD_EQUALS
          items:
            type: object
            $ref: '#/components/schemas/resourcesuserv3alphaSearchFilter'
    resourcesuserv3alphaAndFilter:
      type: object
      properties:
        queries:
          type: array
          example:
            - organizationIdFilter:
                id: '163840776835432705'
                method: TEXT_FILTER_METHOD_EQUALS
            - usernameFilter:
                method: TEXT_FILTER_METHOD_EQUALS
                username: gigi
          items:
            type: object
            $ref: '#/components/schemas/resourcesuserv3alphaSearchFilter'
    resourcesuserv3alphaNotFilter:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/resourcesuserv3alphaSearchFilter'
          example:
            schemaIDFilter:
              id: '163840776835432705'
    v3alphaUserIDFilter:
      type: object
      properties:
        id:
          type: string
          example: '163840776835432705'
          description: Defines the ID of the user to query for.
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/v3alphaTextFilterMethod'
          description: Defines which text comparison method used for the id query.
      required:
        - id
    v3alphaOrganizationIDFilter:
      type: object
      properties:
        id:
          type: string
          example: '163840776835432705'
          description: Defines the ID of the organization to query for.
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/v3alphaTextFilterMethod'
          description: Defines which text comparison method used for the id query.
      required:
        - id
    v3alphaUsernameFilter:
      type: object
      properties:
        username:
          type: string
          example: gigi-giraffe
          description: Defines the username to query for.
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/v3alphaTextFilterMethod'
          description: Defines which text comparison method used for the username query.
        isOrganizationSpecific:
          type: boolean
          description: Defines that the username must only be unique in the organisation.
      required:
        - username
    v3alphaEmailFilter:
      type: object
      properties:
        address:
          type: string
          example: gigi@zitadel.com
          description: email address of the user
          maxLength: 200
        method:
          $ref: '#/components/schemas/v3alphaTextFilterMethod'
          description: Defines which text comparison method used for the email query.
      required:
        - address
    v3alphaPhoneFilter:
      type: object
      properties:
        number:
          type: string
          example: '+41791234567'
          description: Defines the phone of the user to query for.
          maxLength: 20
          minLength: 1
        method:
          $ref: '#/components/schemas/v3alphaTextFilterMethod'
          description: Defines which text comparison method used for the phone query.
      required:
        - number
    resourcesuserv3alphaState:
      type: string
      enum:
        - USER_STATE_UNSPECIFIED
        - USER_STATE_ACTIVE
        - USER_STATE_INACTIVE
        - USER_STATE_DELETED
        - USER_STATE_LOCKED
      default: USER_STATE_UNSPECIFIED
    resourcesuserv3alphaStateFilter:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/resourcesuserv3alphaState'
          example: STATE_ACTIVE
          description: Defines the state to query for.
    v3alphaSchemaIDFilter:
      type: object
      properties:
        id:
          type: string
          example: '163840776835432705'
          description: Defines the ID of the schema to query for.
          maxLength: 200
          minLength: 1
      required:
        - id
    v3alphaSchemaTypeFilter:
      type: object
      properties:
        type:
          type: string
          example: employees
          description: Defines which type to query for.
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/v3alphaTextFilterMethod'
          description: Defines which text comparison method used for the type query.
      required:
        - type
    userv3alphaSendEmailVerificationCode:
      type: object
      properties:
        urlTemplate:
          type: string
          example: https://example.com/email/verify?userID={{.UserID}}&code={{.Code}}&orgID={{.OrgID}}
          description: |-
            Optionally set a url_template, which will be used in the verification mail sent by ZITADEL
            to guide the user to your verification page.
            If no template is set, the default ZITADEL url will be used.
          maxLength: 200
          minLength: 1
    userv3alphaReturnEmailVerificationCode:
      type: object
    userv3alphaSetEmail:
      type: object
      properties:
        address:
          type: string
          example: mini@mouse.com
          description: Set the email address.
          maxLength: 200
          minLength: 1
        sendCode:
          $ref: '#/components/schemas/userv3alphaSendEmailVerificationCode'
          description: Let ZITADEL send the link to the user via email.
        returnCode:
          $ref: '#/components/schemas/userv3alphaReturnEmailVerificationCode'
          description: Get the code back to provide it to the user in your preferred mechanism.
        isVerified:
          type: boolean
          description: Set the email as already verified.
      required:
        - address
    userv3alphaSendPhoneVerificationCode:
      type: object
    userv3alphaReturnPhoneVerificationCode:
      type: object
    userv3alphaSetPhone:
      type: object
      properties:
        number:
          type: string
          example: '+41791234567'
          description: Set the user's phone number.
          maxLength: 20
          minLength: 1
        sendCode:
          $ref: '#/components/schemas/userv3alphaSendPhoneVerificationCode'
          description: Let ZITADEL send the link to the user via SMS.
        returnCode:
          $ref: '#/components/schemas/userv3alphaReturnPhoneVerificationCode'
          description: Get the code back to provide it to the user in your preferred mechanism.
        isVerified:
          type: boolean
          description: Set the phone as already verified.
      required:
        - number
    v3alphaSetContact:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/userv3alphaSetEmail'
        phone:
          $ref: '#/components/schemas/userv3alphaSetPhone'
    userv3alphaPatchUser:
      type: object
      properties:
        schemaId:
          type: string
          example: '69629026806489455'
          maxLength: 200
          minLength: 1
        data:
          type: object
          example:
            description: the giraffe
            name: Gigi
        contact:
          $ref: '#/components/schemas/v3alphaSetContact'
          description: |-
            Set the contact information (email, phone) for the user.

            TODO: No SetAuthenticators?
    v3alphaSetUsername:
      type: object
      properties:
        username:
          type: string
          example: gigi-giraffe
          description: Set the user's username. This will be used for identification during authentication.
          maxLength: 200
          minLength: 1
        isOrganizationSpecific:
          type: boolean
          description: |-
            By default username must be unique across all organizations in an instance.
            This option allow to restrict the uniqueness to the user's own organization.
            As a result, this username can only be used if the authentication is limited
            to the corresponding organization.

            This can be useful if you provide multiple usernames for a single user, where one
            if specific to your organization, e.g.:
            - gigi-giraffe@zitadel.com (unique across organizations)
            - gigi-giraffe (unique only inside the ZITADEL organization)
      required:
        - username
    userv3alphaSetPassword:
      type: object
      properties:
        password:
          type: string
          example: Secr3tP4ssw0rd!
          description: Provide the plain text password. ZITADEL will take care to store it in a secure way (hash).
          maxLength: 200
          minLength: 1
        hash:
          type: string
          example: $2a$12$lJ08fqVr8bFJilRVnDT9QeULI7YW.nT3iwUv6dyg0aCrfm3UY8XR2
          description: |-
            Encoded hash of a password in Modular Crypt Format:
            https://zitadel.com/docs/concepts/architecture/secrets#hashed-secrets.
          maxLength: 200
          minLength: 1
        changeRequired:
          type: boolean
          description: Provide if the user needs to change the password on the next use.
        currentPassword:
          type: string
          example: Secr3tP4ssw0rd!
          description: Provide the current password to verify you're allowed to change the password.
          maxLength: 200
          minLength: 1
        verificationCode:
          type: string
          example: SKJd342k
          description: Or provider the verification code generated during password reset request.
          maxLength: 20
          minLength: 1
      required:
        - password
        - hash
        - currentPassword
        - verificationCode
    v3alphaSetAuthenticators:
      type: object
      properties:
        usernames:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/v3alphaSetUsername'
        password:
          $ref: '#/components/schemas/userv3alphaSetPassword'
    userv3alphaCreateUser:
      type: object
      properties:
        schemaId:
          type: string
          example: '69629026806489455'
          description: Define the schema the user's data schema by providing it's ID.
          maxLength: 200
          minLength: 1
        data:
          type: object
          example:
            description: the giraffe
            name: Gigi
        contact:
          $ref: '#/components/schemas/v3alphaSetContact'
          description: Set the contact information (email, phone) for the user.
        authenticators:
          $ref: '#/components/schemas/v3alphaSetAuthenticators'
          description: Set the initial authenticators of the user.
        userId:
          type: string
          example: '69629026806489455'
          description: Optionally set a unique identifier of the user. If unset, ZITADEL will take care of it.
          maxLength: 200
          minLength: 1
      required:
        - schemaId
    objectv3alphaOrganization:
      type: object
      properties:
        orgId:
          type: string
        orgDomain:
          type: string
    ZITADELUsersResendContactEmailCodeBody:
      type: object
      properties:
        instance:
          $ref: '#/components/schemas/objectv3alphaInstance'
          default: '"domain from HOST or :authority header"'
        organization:
          $ref: '#/components/schemas/objectv3alphaOrganization'
          description: Optionally expect the user to be in this organization.
        sendCode:
          $ref: '#/components/schemas/userv3alphaSendEmailVerificationCode'
          description: Let ZITADEL send the link to the user via email.
        returnCode:
          $ref: '#/components/schemas/userv3alphaReturnEmailVerificationCode'
          description: Get the code back to provide it to the user in your preferred mechanism.
    ZITADELUsersResendContactPhoneCodeBody:
      type: object
      properties:
        instance:
          $ref: '#/components/schemas/objectv3alphaInstance'
          default: '"domain from HOST or :authority header"'
        organization:
          $ref: '#/components/schemas/objectv3alphaOrganization'
          description: Optionally expect the user to be in this organization.
        sendCode:
          $ref: '#/components/schemas/userv3alphaSendPhoneVerificationCode'
          description: Let ZITADEL send the link to the user via SMS.
        returnCode:
          $ref: '#/components/schemas/userv3alphaReturnPhoneVerificationCode'
          description: Get the code back to provide it to the user in your preferred mechanism.
    v3alphaSendPasswordResetEmail:
      type: object
      properties:
        urlTemplate:
          type: string
          example: https://example.com/password/changey?userID={{.UserID}}&code={{.Code}}&orgID={{.OrgID}}
          description: |-
            Optionally set a url_template, which will be used in the password reset mail
            sent by ZITADEL to guide the user to your password change page.
            If no template is set, the default ZITADEL url will be used.
          maxLength: 200
          minLength: 1
    v3alphaSendPasswordResetSMS:
      type: object
    userv3alphaReturnPasswordResetCode:
      type: object
    ZITADELUsersRequestPasswordResetBody:
      type: object
      properties:
        instance:
          $ref: '#/components/schemas/objectv3alphaInstance'
          default: '"domain from HOST or :authority header"'
        organization:
          $ref: '#/components/schemas/objectv3alphaOrganization'
          description: Optionally expect the user to be in this organization.
        sendEmail:
          $ref: '#/components/schemas/v3alphaSendPasswordResetEmail'
          description: Let ZITADEL send the link to the user via email.
        sendSms:
          $ref: '#/components/schemas/v3alphaSendPasswordResetSMS'
          description: Let ZITADEL send the link to the user via SMS.
        returnCode:
          $ref: '#/components/schemas/userv3alphaReturnPasswordResetCode'
          description: Get the code back to provide it to the user in your preferred mechanism.
    v3alphaWebAuthNAuthenticatorType:
      type: string
      enum:
        - WEB_AUTH_N_AUTHENTICATOR_UNSPECIFIED
        - WEB_AUTH_N_AUTHENTICATOR_PLATFORM
        - WEB_AUTH_N_AUTHENTICATOR_CROSS_PLATFORM
      default: WEB_AUTH_N_AUTHENTICATOR_UNSPECIFIED
    v3alphaAuthenticatorRegistrationCode:
      type: object
      properties:
        id:
          type: string
          example: e2a48d6a-362b-4db6-a1fb-34feab84dc62
          description: ID to the one time code generated by ZITADEL.
          maxLength: 200
          minLength: 1
        code:
          type: string
          example: SKJd342k
          description: one time code generated by ZITADEL.
          maxLength: 200
          minLength: 1
      required:
        - id
        - code
    userv3alphaStartWebAuthNRegistration:
      type: object
      properties:
        domain:
          type: string
          example: my-domain.zitadel.cloud
          description: Domain on which the user currently is or will be authenticated.
          maxLength: 200
          minLength: 1
        authenticatorType:
          $ref: '#/components/schemas/v3alphaWebAuthNAuthenticatorType'
          description: |-
            Optionally specify the authenticator type of the passkey device (platform or cross-platform).
            If none is provided, both values are allowed.
        code:
          $ref: '#/components/schemas/v3alphaAuthenticatorRegistrationCode'
          description: |-
            Optionally provide a one time code generated by ZITADEL.
            This is required to start the passkey registration without user authentication.
      required:
        - domain
    userv3alphaVerifyWebAuthNRegistration:
      type: object
      properties:
        publicKeyCredential:
          type: object
          example:
            id: pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00
            rawId: pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00
            response:
              attestationObject: o2NmbXRmcGFja2VkZ2F0dFN0bXSiY2FsZyZjc2lnWEcwRQIgRKS3VpeE9tfExXRzkoUKnG4rQWPvtSSt4YtDGgTx32oCIQDPey-2YJ4uIg-QCM4jj6aE2U3tgMFM_RP7Efx6xRu3JGhhdXRoRGF0YVikSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAADju76085Yhmlt1CEOHkwLQAIKWsFWqxeMT8SxZnwp0ZMF1nk6yhs2m3AIvdixCNVgtNpQECAyYgASFYIMGUDSP2FAQn2MIfPMy7cyB_Y30VqixVgGULTBtFjfRiIlggjUGfQo3_-CrMmH3S-ZQkFKWKnNBQEAMkFtG-9A4zqW0
              clientDataJSON: eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiQlhXdHh0WGxJeFZZa0pHT1dVaUVmM25zby02aXZKdWw2YmNmWHdMVlFIayIsIm9yaWdpbiI6Imh0dHBzOi8vbG9jYWxob3N0OjgwODAifQ
            type: public-key
          title: |-
            PublicKeyCredential Interface.
            Generated helper methods populate the field from JSON created by a WebAuthN client.
            See also:  https://www.w3.org/TR/webauthn/#publickeycredential
          maxLength: 1048576
          minLength: 55
        webAuthNName:
          type: string
          example: fido key
          description: Provide a name for the WebAuthN device. This will help identify it in the future.
          maxLength: 200
          minLength: 1
      required:
        - publicKeyCredential
        - webAuthNName
    v3alphaSendWebAuthNRegistrationLink:
      type: object
      properties:
        urlTemplate:
          type: string
          example: https://example.com/passkey/register?userID={{.UserID}}&orgID={{.OrgID}}&codeID={{.CodeID}}&code={{.Code}}
          description: |-
            Optionally set a url_template, which will be used in the mail sent by ZITADEL
            to guide the user to your passkey registration page.
            If no template is set, the default ZITADEL url will be used.
          maxLength: 200
          minLength: 1
    v3alphaReturnWebAuthNRegistrationCode:
      type: object
    ZITADELUsersCreateWebAuthNRegistrationLinkBody:
      type: object
      properties:
        instance:
          $ref: '#/components/schemas/objectv3alphaInstance'
          default: '"domain from HOST or :authority header"'
        organization:
          $ref: '#/components/schemas/objectv3alphaOrganization'
          description: Optionally expect the user to be in this organization.
        sendLink:
          $ref: '#/components/schemas/v3alphaSendWebAuthNRegistrationLink'
          description: Let ZITADEL send the link to the user via email.
        returnCode:
          $ref: '#/components/schemas/v3alphaReturnWebAuthNRegistrationCode'
          description: Get the code back to provide it to the user in your preferred mechanism.
    userv3alphaRedirectURLs:
      type: object
      properties:
        successUrl:
          type: string
          example: https://custom.com/login/idp/success
          description: URL to which the user will be redirected after a successful login.
          maxLength: 2048
          minLength: 1
        failureUrl:
          type: string
          example: https://custom.com/login/idp/fail
          description: URL to which the user will be redirected after a failed login.
          maxLength: 2048
          minLength: 1
      required:
        - successUrl
        - failureUrl
    userv3alphaLDAPCredentials:
      type: object
      properties:
        username:
          type: string
          example: username
          description: Username used to login through LDAP.
          maxLength: 200
          minLength: 1
        password:
          type: string
          example: Password1!
          description: Password used to login through LDAP.
          maxLength: 200
          minLength: 1
      required:
        - username
        - password
    userv3alphaStartIdentityProviderIntentRequest:
      type: object
      properties:
        instance:
          $ref: '#/components/schemas/objectv3alphaInstance'
          default: '"domain from HOST or :authority header"'
        organization:
          $ref: '#/components/schemas/objectv3alphaOrganization'
          description: Optionally expect the user to be in this organization.
        idpId:
          type: string
          example: '163840776835432705'
          description: ID of an existing identity provider (IDP).
          maxLength: 200
          minLength: 1
        urls:
          $ref: '#/components/schemas/userv3alphaRedirectURLs'
        ldap:
          $ref: '#/components/schemas/userv3alphaLDAPCredentials'
      required:
        - idpId
    v3alphaIDPAuthenticator:
      type: object
      properties:
        idpId:
          type: string
          example: '69629026806489455'
          title: ID of the identity provider
          maxLength: 200
          minLength: 1
        userId:
          type: string
          example: d654e6ba-70a3-48ef-a95d-37c8d8a7901a
          title: ID of the user provided by the identity provider
          maxLength: 200
          minLength: 1
        userName:
          type: string
          example: user@external.com
          description: Username of the user provided by the identity provider.
          maxLength: 200
          minLength: 1
      required:
        - idpId
        - userId
        - userName
    resourcesuserschemav3alphaSearchFilter:
      type: object
      properties:
        orFilter:
          $ref: '#/components/schemas/resourcesuserschemav3alphaOrFilter'
          description: Union the results of each sub filter ('OR').
        andFilter:
          $ref: '#/components/schemas/resourcesuserschemav3alphaAndFilter'
          description: |-
            Limit the result to match all sub queries ('AND').
            Note that if you specify multiple queries, they will be implicitly used as andQueries.
            Use the andFilter in combination with orFilter and notFilter.
        notFilter:
          $ref: '#/components/schemas/resourcesuserschemav3alphaNotFilter'
          description: Exclude / Negate the result of the sub filter ('NOT').
        typeFilter:
          $ref: '#/components/schemas/v3alphaTypeFilter'
          description: Limit the result to a specific schema type.
        stateFilter:
          $ref: '#/components/schemas/resourcesuserschemav3alphaStateFilter'
          description: Limit the result to a specific state of the schema.
        idFilter:
          $ref: '#/components/schemas/v3alphaIDFilter'
          description: Limit the result to a specific schema ID.
    resourcesuserschemav3alphaOrFilter:
      type: object
      properties:
        queries:
          type: array
          example:
            - idFilter:
                id: '163840776835432705'
                method: TEXT_FILTER_METHOD_EQUALS
            - idFilter:
                id: '163840776835943483'
                method: TEXT_FILTER_METHOD_EQUALS
          items:
            type: object
            $ref: '#/components/schemas/resourcesuserschemav3alphaSearchFilter'
    resourcesuserschemav3alphaAndFilter:
      type: object
      properties:
        queries:
          type: array
          example:
            - typeFilter:
                id: employees
                method: TEXT_FILTER_METHOD_STARTS_WITH
            - stateFilter:
                state: STATE_ACTIVE
          items:
            type: object
            $ref: '#/components/schemas/resourcesuserschemav3alphaSearchFilter'
    resourcesuserschemav3alphaNotFilter:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/resourcesuserschemav3alphaSearchFilter'
          example:
            stateFilter:
              state: STATE_ACTIVE
    v3alphaTypeFilter:
      type: object
      properties:
        type:
          type: string
          example: employees
          description: Defines which type to filter for.
          maxLength: 200
        method:
          $ref: '#/components/schemas/v3alphaTextFilterMethod'
          description: Defines which text comparison method used for the type filter.
      required:
        - type
    resourcesuserschemav3alphaState:
      type: string
      enum:
        - STATE_UNSPECIFIED
        - STATE_ACTIVE
        - STATE_INACTIVE
      default: STATE_UNSPECIFIED
    resourcesuserschemav3alphaStateFilter:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/resourcesuserschemav3alphaState'
          example: STATE_ACTIVE
          description: Defines the state to filter for.
      required:
        - state
    v3alphaIDFilter:
      type: object
      properties:
        id:
          type: string
          example: '163840776835432705'
          description: Defines the ID of the user schema to filter for.
          maxLength: 200
          minLength: 1
        method:
          $ref: '#/components/schemas/v3alphaTextFilterMethod'
          description: Defines which text comparison method used for the id filter.
      required:
        - id
    v3alphaAuthenticatorType:
      type: string
      enum:
        - AUTHENTICATOR_TYPE_UNSPECIFIED
        - AUTHENTICATOR_TYPE_USERNAME
        - AUTHENTICATOR_TYPE_PASSWORD
        - AUTHENTICATOR_TYPE_WEBAUTHN
        - AUTHENTICATOR_TYPE_TOTP
        - AUTHENTICATOR_TYPE_OTP_EMAIL
        - AUTHENTICATOR_TYPE_OTP_SMS
        - AUTHENTICATOR_TYPE_AUTHENTICATION_KEY
        - AUTHENTICATOR_TYPE_IDENTITY_PROVIDER
      default: AUTHENTICATOR_TYPE_UNSPECIFIED
    userschemav3alphaPatchUserSchema:
      type: object
      properties:
        type:
          type: string
          example: employees
          description: Type is a human readable word describing the schema.
          maxLength: 200
          minLength: 1
        schema:
          type: object
          example:
            $schema: https://example.com/user/employees
            properties:
              description:
                type: string
              name:
                required: true
                type: string
            type: object
          description: JSON schema representation defining the user.
        possibleAuthenticators:
          type: array
          example:
            - AUTHENTICATOR_TYPE_USERNAME
            - AUTHENTICATOR_TYPE_PASSWORD
            - AUTHENTICATOR_TYPE_WEBAUTHN
          items:
            $ref: '#/components/schemas/v3alphaAuthenticatorType'
          description: |-
            Defines the possible types of authenticators.

            Removal of an authenticator does not remove the authenticator on a user.
      required:
        - type
        - schema
    v3alphaUserSchema:
      type: object
      properties:
        type:
          type: string
          example: employees
          description: Type is a human readable word describing the schema.
          maxLength: 200
          minLength: 1
        schema:
          type: object
          example:
            $schema: https://example.com/user/employees
            properties:
              description:
                type: string
              name:
                required: true
                type: string
            type: object
          description: JSON schema representation defining the user.
        possibleAuthenticators:
          type: array
          example:
            - AUTHENTICATOR_TYPE_USERNAME
            - AUTHENTICATOR_TYPE_PASSWORD
            - AUTHENTICATOR_TYPE_WEBAUTHN
          items:
            $ref: '#/components/schemas/v3alphaAuthenticatorType'
          description: Defines the possible types of authenticators.
      required:
        - type
        - schema
    WebKeyRSAConfigRSABits:
      type: string
      enum:
        - RSA_BITS_UNSPECIFIED
        - RSA_BITS_2048
        - RSA_BITS_3072
        - RSA_BITS_4096
      default: RSA_BITS_UNSPECIFIED
    WebKeyRSAConfigRSAHasher:
      type: string
      enum:
        - RSA_HASHER_UNSPECIFIED
        - RSA_HASHER_SHA256
        - RSA_HASHER_SHA384
        - RSA_HASHER_SHA512
      default: RSA_HASHER_UNSPECIFIED
    v3alphaWebKeyRSAConfig:
      type: object
      properties:
        bits:
          $ref: '#/components/schemas/WebKeyRSAConfigRSABits'
          title: bit size of the RSA key
        hasher:
          $ref: '#/components/schemas/WebKeyRSAConfigRSAHasher'
          title: signing algrithm used
    WebKeyECDSAConfigECDSACurve:
      type: string
      enum:
        - ECDSA_CURVE_UNSPECIFIED
        - ECDSA_CURVE_P256
        - ECDSA_CURVE_P384
        - ECDSA_CURVE_P512
      default: ECDSA_CURVE_UNSPECIFIED
    v3alphaWebKeyECDSAConfig:
      type: object
      properties:
        curve:
          $ref: '#/components/schemas/WebKeyECDSAConfigECDSACurve'
    v3alphaWebKeyED25519Config:
      type: object
    v3alphaWebKey:
      type: object
      properties:
        rsa:
          $ref: '#/components/schemas/v3alphaWebKeyRSAConfig'
        ecdsa:
          $ref: '#/components/schemas/v3alphaWebKeyECDSAConfig'
        ed25519:
          $ref: '#/components/schemas/v3alphaWebKeyED25519Config'
    zitadelsamlv2Session:
      type: object
      properties:
        sessionId:
          type: string
          example: '163840776835432705'
          description: ID of the session, used to login the user. Connects the session to the SAML Request.
          maxLength: 200
          minLength: 1
        sessionToken:
          type: string
          description: Token to verify the session is valid.
          maxLength: 200
          minLength: 1
    zitadelsamlv2ErrorReason:
      type: string
      enum:
        - ERROR_REASON_UNSPECIFIED
        - ERROR_REASON_VERSION_MISSMATCH
        - ERROR_REASON_AUTH_N_FAILED
        - ERROR_REASON_INVALID_ATTR_NAME_OR_VALUE
        - ERROR_REASON_INVALID_NAMEID_POLICY
        - ERROR_REASON_REQUEST_DENIED
        - ERROR_REASON_REQUEST_UNSUPPORTED
        - ERROR_REASON_UNSUPPORTED_BINDING
      default: ERROR_REASON_UNSPECIFIED
    zitadelsamlv2AuthorizationError:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/zitadelsamlv2ErrorReason'
        errorDescription:
          type: string
    SAMLServiceCreateResponseBody:
      type: object
      properties:
        session:
          $ref: '#/components/schemas/zitadelsamlv2Session'
        error:
          $ref: '#/components/schemas/zitadelsamlv2AuthorizationError'
          description: Set this field when the authorization flow failed. It creates a response depending on the SP, with the error details set.
    sessionv2IDsQuery:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
    sessionv2UserIDQuery:
      type: object
      properties:
        id:
          type: string
    zitadelv1TimestampQueryMethod:
      type: string
      enum:
        - TIMESTAMP_QUERY_METHOD_EQUALS
        - TIMESTAMP_QUERY_METHOD_GREATER
        - TIMESTAMP_QUERY_METHOD_GREATER_OR_EQUALS
        - TIMESTAMP_QUERY_METHOD_LESS
        - TIMESTAMP_QUERY_METHOD_LESS_OR_EQUALS
      default: TIMESTAMP_QUERY_METHOD_EQUALS
    sessionv2CreationDateQuery:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
        method:
          $ref: '#/components/schemas/zitadelv1TimestampQueryMethod'
          description: defines which timestamp comparison method is used
    v2CreatorQuery:
      type: object
      properties:
        id:
          type: string
          example: '69629023906488334'
          description: ID of the user who created the session. If empty, the calling user's ID is used.
          maxLength: 200
    v2UserAgentQuery:
      type: object
      properties:
        fingerprintId:
          type: string
          example: '69629023906488334'
          description: |-
            Finger print id of the user agent used for the session.
            Set an empty fingerprint_id to use the user agent from the call.
            If the user agent is not available from the current token, an error will be returned.
          maxLength: 200
    zitadelsessionv2SearchQuery:
      type: object
      properties:
        idsQuery:
          $ref: '#/components/schemas/sessionv2IDsQuery'
        userIdQuery:
          $ref: '#/components/schemas/sessionv2UserIDQuery'
        creationDateQuery:
          $ref: '#/components/schemas/sessionv2CreationDateQuery'
        creatorQuery:
          $ref: '#/components/schemas/v2CreatorQuery'
        userAgentQuery:
          $ref: '#/components/schemas/v2UserAgentQuery'
    sessionv2SessionFieldName:
      type: string
      enum:
        - SESSION_FIELD_NAME_UNSPECIFIED
        - SESSION_FIELD_NAME_CREATION_DATE
      default: SESSION_FIELD_NAME_UNSPECIFIED
    sessionv2ListSessionsRequest:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/objectv2ListQuery'
        queries:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/zitadelsessionv2SearchQuery'
        sortingColumn:
          $ref: '#/components/schemas/sessionv2SessionFieldName'
    sessionv2SessionServiceDeleteSessionBody:
      type: object
      properties:
        sessionToken:
          type: string
          description: '"The current token of the session, previously returned on the create / update request. The token is required unless the authenticated user terminates the own session or is granted the `session.delete` permission."'
    sessionv2CheckUser:
      type: object
      properties:
        userId:
          type: string
          example: d654e6ba-70a3-48ef-a95d-37c8d8a7901a
          maxLength: 200
          minLength: 1
        loginName:
          type: string
          example: mini@mouse.com
          maxLength: 200
          minLength: 1
    sessionv2CheckPassword:
      type: object
      properties:
        password:
          type: string
          example: V3ryS3cure!
          maxLength: 200
          minLength: 1
    sessionv2CheckWebAuthN:
      type: object
      properties:
        credentialAssertionData:
          type: object
          description: JSON representation of public key credential issued by the webAuthN client
          maxLength: 1048576
          minLength: 55
      required:
        - credentialAssertionData
    sessionv2CheckIDPIntent:
      type: object
      properties:
        idpIntentId:
          type: string
          example: d654e6ba-70a3-48ef-a95d-37c8d8a7901a
          description: ID of the idp intent, previously returned on the success response of the IDP callback
          maxLength: 200
          minLength: 1
        idpIntentToken:
          type: string
          example: SJKL3ioIDpo342ioqw98fjp3sdf32wahb=
          description: token of the idp intent, previously returned on the success response of the IDP callback
          maxLength: 200
          minLength: 1
    sessionv2CheckTOTP:
      type: object
      properties:
        code:
          type: string
          example: '323764'
          maxLength: 6
          minLength: 6
    sessionv2CheckOTP:
      type: object
      properties:
        code:
          type: string
          example: '3237642'
          minLength: 1
    sessionv2Checks:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/sessionv2CheckUser'
          description: '"checks the user and updates the session on success"'
        password:
          $ref: '#/components/schemas/sessionv2CheckPassword'
          description: '"Checks the password and updates the session on success. Requires that the user is already checked, either in the previous or the same request."'
        webAuthN:
          $ref: '#/components/schemas/sessionv2CheckWebAuthN'
          description: '"Checks the public key credential issued by the WebAuthN client. Requires that the user is already checked and a WebAuthN challenge to be requested, in any previous request."'
        idpIntent:
          $ref: '#/components/schemas/sessionv2CheckIDPIntent'
          description: '"Checks the IDP intent. Requires that the userlink is already checked and a successful idp intent."'
        totp:
          $ref: '#/components/schemas/sessionv2CheckTOTP'
          description: '"Checks the Time-based One-Time Password and updates the session on success. Requires that the user is already checked, either in the previous or the same request."'
        otpSms:
          $ref: '#/components/schemas/sessionv2CheckOTP'
          description: '"Checks the One-Time Password sent over SMS and updates the session on success. Requires that the user is already checked, either in the previous or the same request."'
        otpEmail:
          $ref: '#/components/schemas/sessionv2CheckOTP'
          description: '"Checks the One-Time Password sent over Email and updates the session on success. Requires that the user is already checked, either in the previous or the same request."'
    sessionv2UserVerificationRequirement:
      type: string
      enum:
        - USER_VERIFICATION_REQUIREMENT_UNSPECIFIED
        - USER_VERIFICATION_REQUIREMENT_REQUIRED
        - USER_VERIFICATION_REQUIREMENT_PREFERRED
        - USER_VERIFICATION_REQUIREMENT_DISCOURAGED
      default: USER_VERIFICATION_REQUIREMENT_UNSPECIFIED
    sessionv2RequestChallengesWebAuthN:
      type: object
      properties:
        domain:
          type: string
          description: '"Domain on which the session was created. Will be used in the WebAuthN challenge."'
        userVerificationRequirement:
          $ref: '#/components/schemas/sessionv2UserVerificationRequirement'
          description: '"User verification that is required during validation. When set to `USER_VERIFICATION_REQUIREMENT_REQUIRED` the behaviour is for passkey authentication. Other values will mean U2F"'
      required:
        - domain
        - userVerificationRequirement
    sessionv2RequestChallengesOTPSMS:
      type: object
      properties:
        returnCode:
          type: boolean
    sessionv2RequestChallengesOTPEmailSendCode:
      type: object
      properties:
        urlTemplate:
          type: string
          example: https://example.com/otp/verify?userID={{.UserID}}&code={{.Code}}
          description: |-
            Optionally set a url_template, which will be used in the mail sent by ZITADEL to guide the user to your verification page.
            If no template is set, the default ZITADEL url will be used.

            The following placeholders can be used: Code, UserID, LoginName, DisplayName, PreferredLanguage, SessionID
          maxLength: 200
          minLength: 1
    sessionv2RequestChallengesOTPEmailReturnCode:
      type: object
    sessionv2RequestChallengesOTPEmail:
      type: object
      properties:
        sendCode:
          $ref: '#/components/schemas/sessionv2RequestChallengesOTPEmailSendCode'
        returnCode:
          $ref: '#/components/schemas/sessionv2RequestChallengesOTPEmailReturnCode'
    sessionv2RequestChallenges:
      type: object
      properties:
        webAuthN:
          $ref: '#/components/schemas/sessionv2RequestChallengesWebAuthN'
        otpSms:
          $ref: '#/components/schemas/sessionv2RequestChallengesOTPSMS'
        otpEmail:
          $ref: '#/components/schemas/sessionv2RequestChallengesOTPEmail'
    sessionv2SessionServiceSetSessionBody:
      type: object
      properties:
        sessionToken:
          type: string
          description: '"DEPRECATED: this field is ignored."'
          maxLength: 200
          minLength: 1
        checks:
          $ref: '#/components/schemas/sessionv2Checks'
          description: '"Check for user and password. Successful checks will be stated as factors on the session."'
        metadata:
          type: object
          additionalProperties:
            type: string
            format: byte
          description: '"custom key value list to be stored on the session"'
        challenges:
          $ref: '#/components/schemas/sessionv2RequestChallenges'
        lifetime:
          type: string
          example: 18000s
          description: '"duration (in seconds) after which the session will be automatically invalidated"'
    sessionv2UserAgentHeaderValues:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
      description: |-
        A header may have multiple values.
        In Go, headers are defined
        as map[string][]string, but protobuf
        doesn't allow this scheme.
    sessionv2UserAgent:
      type: object
      properties:
        fingerprintId:
          type: string
        ip:
          type: string
        description:
          type: string
        header:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/sessionv2UserAgentHeaderValues'
    sessionv2CreateSessionRequest:
      type: object
      properties:
        checks:
          $ref: '#/components/schemas/sessionv2Checks'
          description: '"Check for user and password. Successful checks will be stated as factors on the session."'
        metadata:
          type: object
          additionalProperties:
            type: string
            format: byte
          description: '"custom key value list to be stored on the session"'
        challenges:
          $ref: '#/components/schemas/sessionv2RequestChallenges'
        userAgent:
          $ref: '#/components/schemas/sessionv2UserAgent'
        lifetime:
          type: string
          example: 18000s
          description: '"duration (in seconds) after which the session will be automatically invalidated"'
    sessionv2betaIDsQuery:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
    sessionv2betaUserIDQuery:
      type: object
      properties:
        id:
          type: string
    sessionv2betaCreationDateQuery:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
        method:
          $ref: '#/components/schemas/zitadelv1TimestampQueryMethod'
          description: defines which timestamp comparison method is used
    zitadelsessionv2betaSearchQuery:
      type: object
      properties:
        idsQuery:
          $ref: '#/components/schemas/sessionv2betaIDsQuery'
        userIdQuery:
          $ref: '#/components/schemas/sessionv2betaUserIDQuery'
        creationDateQuery:
          $ref: '#/components/schemas/sessionv2betaCreationDateQuery'
    sessionv2betaSessionFieldName:
      type: string
      enum:
        - SESSION_FIELD_NAME_UNSPECIFIED
        - SESSION_FIELD_NAME_CREATION_DATE
      default: SESSION_FIELD_NAME_UNSPECIFIED
    sessionv2betaListSessionsRequest:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/objectv2betaListQuery'
        queries:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/zitadelsessionv2betaSearchQuery'
        sortingColumn:
          $ref: '#/components/schemas/sessionv2betaSessionFieldName'
    sessionv2betaSessionServiceDeleteSessionBody:
      type: object
      properties:
        sessionToken:
          type: string
          description: '"The current token of the session, previously returned on the create / update request. The token is required unless the authenticated user terminates the own session or is granted the `session.delete` permission."'
    sessionv2betaCheckUser:
      type: object
      properties:
        userId:
          type: string
          example: d654e6ba-70a3-48ef-a95d-37c8d8a7901a
          maxLength: 200
          minLength: 1
        loginName:
          type: string
          example: mini@mouse.com
          maxLength: 200
          minLength: 1
    sessionv2betaCheckPassword:
      type: object
      properties:
        password:
          type: string
          example: V3ryS3cure!
          maxLength: 200
          minLength: 1
    sessionv2betaCheckWebAuthN:
      type: object
      properties:
        credentialAssertionData:
          type: object
          description: JSON representation of public key credential issued by the webAuthN client
          maxLength: 1048576
          minLength: 55
      required:
        - credentialAssertionData
    sessionv2betaCheckIDPIntent:
      type: object
      properties:
        idpIntentId:
          type: string
          example: d654e6ba-70a3-48ef-a95d-37c8d8a7901a
          description: ID of the idp intent, previously returned on the success response of the IDP callback
          maxLength: 200
          minLength: 1
        idpIntentToken:
          type: string
          example: SJKL3ioIDpo342ioqw98fjp3sdf32wahb=
          description: token of the idp intent, previously returned on the success response of the IDP callback
          maxLength: 200
          minLength: 1
    sessionv2betaCheckTOTP:
      type: object
      properties:
        code:
          type: string
          example: '323764'
          maxLength: 6
          minLength: 6
    sessionv2betaCheckOTP:
      type: object
      properties:
        code:
          type: string
          example: '3237642'
          minLength: 1
    sessionv2betaChecks:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/sessionv2betaCheckUser'
          description: '"checks the user and updates the session on success"'
        password:
          $ref: '#/components/schemas/sessionv2betaCheckPassword'
          description: '"Checks the password and updates the session on success. Requires that the user is already checked, either in the previous or the same request."'
        webAuthN:
          $ref: '#/components/schemas/sessionv2betaCheckWebAuthN'
          description: '"Checks the public key credential issued by the WebAuthN client. Requires that the user is already checked and a WebAuthN challenge to be requested, in any previous request."'
        idpIntent:
          $ref: '#/components/schemas/sessionv2betaCheckIDPIntent'
          description: '"Checks the IDP intent. Requires that the userlink is already checked and a successful idp intent."'
        totp:
          $ref: '#/components/schemas/sessionv2betaCheckTOTP'
          description: '"Checks the Time-based One-Time Password and updates the session on success. Requires that the user is already checked, either in the previous or the same request."'
        otpSms:
          $ref: '#/components/schemas/sessionv2betaCheckOTP'
          description: '"Checks the One-Time Password sent over SMS and updates the session on success. Requires that the user is already checked, either in the previous or the same request."'
        otpEmail:
          $ref: '#/components/schemas/sessionv2betaCheckOTP'
          description: '"Checks the One-Time Password sent over Email and updates the session on success. Requires that the user is already checked, either in the previous or the same request."'
    sessionv2betaUserVerificationRequirement:
      type: string
      enum:
        - USER_VERIFICATION_REQUIREMENT_UNSPECIFIED
        - USER_VERIFICATION_REQUIREMENT_REQUIRED
        - USER_VERIFICATION_REQUIREMENT_PREFERRED
        - USER_VERIFICATION_REQUIREMENT_DISCOURAGED
      default: USER_VERIFICATION_REQUIREMENT_UNSPECIFIED
    sessionv2betaRequestChallengesWebAuthN:
      type: object
      properties:
        domain:
          type: string
          description: '"Domain on which the session was created. Will be used in the WebAuthN challenge."'
        userVerificationRequirement:
          $ref: '#/components/schemas/sessionv2betaUserVerificationRequirement'
          description: '"User verification that is required during validation. When set to `USER_VERIFICATION_REQUIREMENT_REQUIRED` the behaviour is for passkey authentication. Other values will mean U2F"'
      required:
        - domain
        - userVerificationRequirement
    sessionv2betaRequestChallengesOTPSMS:
      type: object
      properties:
        returnCode:
          type: boolean
    sessionv2betaRequestChallengesOTPEmailSendCode:
      type: object
      properties:
        urlTemplate:
          type: string
          example: https://example.com/otp/verify?userID={{.UserID}}&code={{.Code}}
          description: '"Optionally set a url_template, which will be used in the mail sent by ZITADEL to guide the user to your verification page. If no template is set, the default ZITADEL url will be used."'
          maxLength: 200
          minLength: 1
    sessionv2betaRequestChallengesOTPEmailReturnCode:
      type: object
    sessionv2betaRequestChallengesOTPEmail:
      type: object
      properties:
        sendCode:
          $ref: '#/components/schemas/sessionv2betaRequestChallengesOTPEmailSendCode'
        returnCode:
          $ref: '#/components/schemas/sessionv2betaRequestChallengesOTPEmailReturnCode'
    sessionv2betaRequestChallenges:
      type: object
      properties:
        webAuthN:
          $ref: '#/components/schemas/sessionv2betaRequestChallengesWebAuthN'
        otpSms:
          $ref: '#/components/schemas/sessionv2betaRequestChallengesOTPSMS'
        otpEmail:
          $ref: '#/components/schemas/sessionv2betaRequestChallengesOTPEmail'
    sessionv2betaSessionServiceSetSessionBody:
      type: object
      properties:
        sessionToken:
          type: string
          description: '"DEPRECATED: this field is ignored."'
          maxLength: 200
          minLength: 1
        checks:
          $ref: '#/components/schemas/sessionv2betaChecks'
          description: '"Check for user and password. Successful checks will be stated as factors on the session."'
        metadata:
          type: object
          additionalProperties:
            type: string
            format: byte
          description: '"custom key value list to be stored on the session"'
        challenges:
          $ref: '#/components/schemas/sessionv2betaRequestChallenges'
        lifetime:
          type: string
          example: 18000s
          description: '"duration (in seconds) after which the session will be automatically invalidated"'
    sessionv2betaUserAgentHeaderValues:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
      description: |-
        A header may have multiple values.
        In Go, headers are defined
        as map[string][]string, but protobuf
        doesn't allow this scheme.
    sessionv2betaUserAgent:
      type: object
      properties:
        fingerprintId:
          type: string
        ip:
          type: string
        description:
          type: string
        header:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/sessionv2betaUserAgentHeaderValues'
    sessionv2betaCreateSessionRequest:
      type: object
      properties:
        checks:
          $ref: '#/components/schemas/sessionv2betaChecks'
          description: '"Check for user and password. Successful checks will be stated as factors on the session."'
        metadata:
          type: object
          additionalProperties:
            type: string
            format: byte
          description: '"custom key value list to be stored on the session"'
        challenges:
          $ref: '#/components/schemas/sessionv2betaRequestChallenges'
        userAgent:
          $ref: '#/components/schemas/sessionv2betaUserAgent'
        lifetime:
          type: string
          example: 18000s
          description: '"duration (in seconds) after which the session will be automatically invalidated"'
    settingsv2EmbeddedIframeSettings:
      type: object
      properties:
        enabled:
          type: boolean
          description: states if iframe embedding is enabled or disabled
        allowedOrigins:
          type: array
          example:
            - foo.bar.com
            - localhost:8080
          items:
            type: string
          description: origins allowed loading ZITADEL in an iframe if enabled.
    settingsv2SetSecuritySettingsRequest:
      type: object
      properties:
        embeddedIframe:
          $ref: '#/components/schemas/settingsv2EmbeddedIframeSettings'
        enableImpersonation:
          type: boolean
          description: allows users to impersonate other users. The impersonator needs the appropriate `*_IMPERSONATOR` roles assigned as well
    settingsv2betaEmbeddedIframeSettings:
      type: object
      properties:
        enabled:
          type: boolean
          description: states if iframe embedding is enabled or disabled
        allowedOrigins:
          type: array
          example:
            - foo.bar.com
            - localhost:8080
          items:
            type: string
          description: origins allowed loading ZITADEL in an iframe if enabled.
    settingsv2betaSetSecuritySettingsRequest:
      type: object
      properties:
        embeddedIframe:
          $ref: '#/components/schemas/settingsv2betaEmbeddedIframeSettings'
        enableImpersonation:
          type: boolean
          description: allows users to impersonate other users. The impersonator needs the appropriate `*_IMPERSONATOR` roles assigned as well
definitions:
  $ref: ../.artifacts/zitadel.swagger.yaml#/definitions
