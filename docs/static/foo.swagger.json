{
  "swagger": "2.0",
  "info": {
    "title": "Management API",
    "description": "The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.",
    "version": "1.0",
    "contact": {
      "name": "ZITADEL",
      "url": "https://zitadel.com",
      "email": "hi@zitadel.com"
    },
    "license": {
      "name": "Apache License 2.0",
      "url": "https://github.com/zitadel/zitadel/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "Actions"
    },
    {
      "name": "Applications",
      "description": "Applications are the entry point to your project. Users either login into one of your clients and interact with them directly or use one of your APIs. All applications share the roles and authorizations of their project."
    },
    {
      "name": "Authentication Methods"
    },
    {
      "name": "Authorization"
    },
    {
      "name": "Branding"
    },
    {
      "name": "Domain Settings"
    },
    {
      "name": "General"
    },
    {
      "name": "Identity Providers"
    },
    {
      "name": "Global"
    },
    {
      "name": "Login Settings"
    },
    {
      "name": "Login Texts"
    },
    {
      "name": "Members"
    },
    {
      "name": "Message Texts"
    },
    {
      "name": "Notification Settings"
    },
    {
      "name": "Organizations"
    },
    {
      "name": "Organization Metadata"
    },
    {
      "name": "Password Settings"
    },
    {
      "name": "Privacy Settings"
    },
    {
      "name": "Projects",
      "description": "Projects are vessels for different applications/clients sharing the same role context."
    },
    {
      "name": "Project Grants",
      "description": "A project that is granted to another organization, so the other organization has access to it and can manage the user authorizations, is called a project grant."
    },
    {
      "name": "Project Roles"
    },
    {
      "name": "Settings"
    },
    {
      "name": "Users",
      "description": "ZITADEL knows two different types of users: Users (Human) and Service Users (Machine Accounts)"
    },
    {
      "name": "User Grants",
      "description": "User grants are the roles a user has for a specific project and organization."
    },
    {
      "name": "User Human"
    },
    {
      "name": "User Machine"
    },
    {
      "name": "User Metadata",
      "description": "Metadata is a key/value list to enrich the user object with any data needed. The data is not interpreted by ZITADEL itself."
    },
    {
      "name": "ZITADEL Administrators"
    },
    {
      "name": "ManagementService"
    },
    {
      "name": "AdminService"
    },
    {
      "name": "AuthService"
    },
    {
      "name": "FeatureService"
    },
    {
      "name": "IdentityProviderService"
    },
    {
      "name": "OIDCService"
    },
    {
      "name": "UserService"
    },
    {
      "name": "OrganizationService"
    },
    {
      "name": "ZITADELActions"
    },
    {
      "name": "ZITADELDebugEvents"
    },
    {
      "name": "ZITADELUsers"
    },
    {
      "name": "ZITADELUserSchemas"
    },
    {
      "name": "ZITADELWebKeys"
    },
    {
      "name": "SAMLService"
    },
    {
      "name": "SessionService"
    },
    {
      "name": "SettingsService"
    },
    {
      "name": "SystemService"
    }
  ],
  "host": "$CUSTOM-DOMAIN",
  "basePath": "/management/v1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json",
    "application/grpc",
    "application/grpc-web+proto"
  ],
  "produces": [
    "application/json",
    "application/grpc",
    "application/grpc-web+proto"
  ],
  "paths": {
    "/healthz": {
      "get": {
        "summary": "Indicates if ZITADEL is running.\nIt respondes as soon as ZITADEL started",
        "operationId": "SystemService_Healthz",
        "responses": {
          "200": {
            "description": "ZITADEL started",
            "schema": {
              "$ref": "#/definitions/zitadelsystemv1HealthzResponse"
            }
          },
          "default": {
            "description": "ZITADEL NOT started yet",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "General"
        ]
      }
    },
    "/zitadel/docs": {
      "get": {
        "summary": "ZITADEL documentation",
        "description": "This endpoint returns some general needed (OIDC) information about ZITADEL like the issuer or discovery endpoint.",
        "operationId": "ManagementService_GetOIDCInformation",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GetOIDCInformationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "General"
        ]
      }
    },
    "/iam": {
      "get": {
        "summary": "Instance information",
        "description": "Some needed settings made in ZITADEL like the global organization id or ZITADEL project ID ",
        "operationId": "ManagementService_GetIAM",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GetIAMResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "General"
        ]
      }
    },
    "/languages": {
      "get": {
        "summary": "Supported Languages",
        "description": "Use GetSupportedLanguages on the admin service instead.",
        "operationId": "AuthService_GetSupportedLanguages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelauthv1GetSupportedLanguagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "General"
        ],
        "deprecated": true
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "User by ID",
        "description": "Returns the full user object (human or machine) including the profile, email, etc.\n\nDeprecated: please use user service v2 GetUserByID",
        "operationId": "ManagementService_GetUserByID",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/managementv1GetUserByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User ID of the user you like to get.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "deprecated": true
      },
      "delete": {
        "summary": "Delete user",
        "description": "The state of the user will be changed to 'deleted'. The user will not be able to log in anymore. Endpoints requesting this user will return an error 'User not found.\n\nDeprecated: please use user service v2 RemoveUser",
        "operationId": "ManagementService_RemoveUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RemoveUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "deprecated": true
      }
    },
    "/global/users/_by_login_name": {
      "get": {
        "summary": "Get User by login name (globally)",
        "description": "Get a user by login name searched over all organizations. The request only returns data if the login name matches exactly.\n\nDeprecated: please use user service v2 ListUsers, with LoginNameQuery",
        "operationId": "ManagementService_GetUserByLoginNameGlobal",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GetUserByLoginNameGlobalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "loginName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "Global"
        ],
        "deprecated": true
      }
    },
    "/users/_search": {
      "post": {
        "summary": "Search Users",
        "description": "Search for users within an organization. By default, we will return users of your organization. Make sure to include a limit and sorting for pagination.\n\nDeprecated: please use user service v2 ListUsers",
        "operationId": "ManagementService_ListUsers",
        "responses": {
          "200": {
            "description": "A list of all users matching the query",
            "schema": {
              "$ref": "#/definitions/managementv1ListUsersResponse"
            }
          },
          "400": {
            "description": "invalid list query",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/managementv1ListUsersRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/changes/_search": {
      "post": {
        "summary": "Get User History",
        "description": "Returns a list of changes/events that have happened on the user. It's the history of the user. Make sure to send a limit.",
        "operationId": "ManagementService_ListUserChanges",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserChangesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceListUserChangesBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/_is_unique": {
      "get": {
        "summary": "Check for existing user",
        "description": "Returns if a user with the requested email or username is unique. So you can create the user. \n\nDeprecated: please use user service v2 ListUsers, is unique when no user is returned",
        "operationId": "ManagementService_IsUserUnique",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IsUserUniqueResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "deprecated": true
      }
    },
    "/users/human": {
      "post": {
        "summary": "Deprecated: Create User (Human)",
        "description": "Create a new user with the type human. The newly created user will get an initialization email if either the email address is not marked as verified or no password is set. If a password is set the user will not be requested to set a new one on the first login.\n\nDeprecated: use ImportHumanUser",
        "operationId": "ManagementService_AddHumanUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/managementv1AddHumanUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/managementv1AddHumanUserRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "deprecated": true
      }
    },
    "/users/human/_import": {
      "post": {
        "summary": "Create/Import User (Human)",
        "description": "Create/import a new user with the type human. The newly created user will get an initialization email if either the email address is not marked as verified or no password is set. If a password is set the user will not be requested to set a new one on the first login.\n\nDeprecated: please use user service v2 [AddHumanUser](apis/resources/user_service_v2/user-service-add-human-user.api.mdx)",
        "operationId": "ManagementService_ImportHumanUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ImportHumanUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ImportHumanUserRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to add users to another organization include the header. Make sure the user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/machine": {
      "post": {
        "summary": "Create User (Machine)",
        "description": "Create a new user with the type machine for your API, service or device. These users are used for non-interactive authentication flows.",
        "operationId": "ManagementService_AddMachineUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AddMachineUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddMachineUserRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Machine"
        ]
      }
    },
    "/users/{id}/_deactivate": {
      "post": {
        "summary": "Deactivate user",
        "description": "The state of the user will be changed to 'deactivated'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'deactivated'. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data.\n\nDeprecated: please use user service v2 DeactivateUser",
        "operationId": "ManagementService_DeactivateUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/managementv1DeactivateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceDeactivateUserBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "deprecated": true
      }
    },
    "/users/{id}/_reactivate": {
      "post": {
        "summary": "Reactivate user",
        "description": "Reactivate a user with the state 'deactivated'. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state 'deactivated'.\n\nDeprecated: please use user service v2 ReactivateUser",
        "operationId": "ManagementService_ReactivateUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/managementv1ReactivateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceReactivateUserBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "deprecated": true
      }
    },
    "/users/{id}/_lock": {
      "post": {
        "summary": "Lock user",
        "description": "The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.),\n\nDeprecated: please use user service v2 LockUser",
        "operationId": "ManagementService_LockUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/managementv1LockUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceLockUserBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "deprecated": true
      }
    },
    "/users/{id}/_unlock": {
      "post": {
        "summary": "Unlock user",
        "description": "Unlock a user with the state 'locked'. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state 'locked'.\n\nDeprecated: please use user service v2 UnlockUser",
        "operationId": "ManagementService_UnlockUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/managementv1UnlockUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceUnlockUserBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/username": {
      "put": {
        "summary": "Change user name",
        "description": "Change the username of the user. Be aware that the user has to log in with the newly added username afterward.\n\nDeprecated: please use user service v2 UpdateHumanUser",
        "operationId": "ManagementService_UpdateUserName",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UpdateUserNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateUserNameBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "deprecated": true
      }
    },
    "/users/{id}/metadata/{key}": {
      "get": {
        "summary": "Get User Metadata By Key",
        "description": "Get a metadata object from a user by a specific key.",
        "operationId": "ManagementService_GetUserMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Metadata"
        ]
      },
      "delete": {
        "summary": "Delete User Metadata By Key",
        "description": "Remove a metadata object from a user with a specific key.",
        "operationId": "ManagementService_RemoveUserMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveUserMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Metadata"
        ]
      },
      "post": {
        "summary": "Set User Metadata",
        "description": "This endpoint either adds or updates a metadata value for the requested key. Make sure the value is base64 encoded.",
        "operationId": "ManagementService_SetUserMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetUserMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetUserMetadataBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Metadata"
        ]
      }
    },
    "/users/{id}/metadata/_bulk": {
      "delete": {
        "summary": "Bulk Delete Metadata",
        "description": "Remove a list of metadata objects from a user with a list of keys.",
        "operationId": "ManagementService_BulkRemoveUserMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BulkRemoveUserMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceBulkRemoveUserMetadataBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Metadata"
        ]
      },
      "post": {
        "summary": "Bulk Set User Metadata",
        "description": "Add or update multiple metadata values for a user. Make sure the values are base64 encoded.",
        "operationId": "ManagementService_BulkSetUserMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BulkSetUserMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceBulkSetUserMetadataBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Metadata"
        ]
      }
    },
    "/users/{id}/metadata/_search": {
      "post": {
        "summary": "Search User Metadata",
        "description": "Get the metadata of a user filtered by your query.",
        "operationId": "ManagementService_ListUserMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceListUserMetadataBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Metadata"
        ]
      }
    },
    "/users/{userId}/profile": {
      "get": {
        "summary": "Get User Profile (Human)",
        "description": "Get basic information like first_name and last_name of a user.\n\nDeprecated: please use user service v2 GetUserByID",
        "operationId": "ManagementService_GetHumanProfile",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GetHumanProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      },
      "put": {
        "summary": "Update User Profile (Human)",
        "description": "Update the profile information from a user. The profile includes basic information like first_name and last_name.\n\nDeprecated: please use user service v2 UpdateHumanUser",
        "operationId": "ManagementService_UpdateHumanProfile",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UpdateHumanProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateHumanProfileBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/email": {
      "get": {
        "summary": "Get User Email (Human)",
        "description": "Get the email address and the verification state of the address.\n\nDeprecated: please use user service v2 GetUserByID",
        "operationId": "ManagementService_GetHumanEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GetHumanEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      },
      "put": {
        "summary": "Update User Email (Human)",
        "description": "Change the email address of a user. If the state is set to not verified, the user will get a verification email.\n\nDeprecated: please use user service v2 SetEmail",
        "operationId": "ManagementService_UpdateHumanEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UpdateHumanEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateHumanEmailBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/_resend_initialization": {
      "post": {
        "summary": "Resend User Initialization Email",
        "description": "A newly created user will get an initialization email to verify the email address and set a password. Resend the email with this request to the user's email address, or a newly added address.\n\nDeprecated: not used anymore in user state",
        "operationId": "ManagementService_ResendHumanInitialization",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ResendHumanInitializationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceResendHumanInitializationBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/email/_resend_verification": {
      "post": {
        "summary": "Resend User Email Verification",
        "description": "Resend the email verification notification to the given email address of the user.\n\nDeprecated: please use user service v2 ResendEmailCode",
        "operationId": "ManagementService_ResendHumanEmailVerification",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ResendHumanEmailVerificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceResendHumanEmailVerificationBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/phone": {
      "get": {
        "summary": "Get User Phone (Human)",
        "description": "Get the phone number and the verification state of the number. The phone number is only for informational purposes and to send messages, not for Authentication (2FA).\n\nDeprecated: please use user service v2 GetUserByID",
        "operationId": "ManagementService_GetHumanPhone",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GetHumanPhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      },
      "delete": {
        "summary": "Remove User Phone (Human)",
        "description": "Remove the configured phone number of a user.\n\nDeprecated: please use user service v2 SetPhone",
        "operationId": "ManagementService_RemoveHumanPhone",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RemoveHumanPhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      },
      "put": {
        "summary": "Update User Phone (Human)",
        "description": "Change the phone number of a user. If the state is set to not verified, the user will get an SMS to verify (if a notification provider is configured). The phone number is only for informational purposes and to send messages, not for Authentication (2FA).\n\nDeprecated: please use user service v2 SetPhone",
        "operationId": "ManagementService_UpdateHumanPhone",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UpdateHumanPhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateHumanPhoneBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/phone/_resend_verification": {
      "post": {
        "summary": "Resend User Phone Verification",
        "description": "Resend the notification for the verification of the phone number, to the number stored on the user.\n\nDeprecated: please use user service v2 ResendPhoneCode",
        "operationId": "ManagementService_ResendHumanPhoneVerification",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ResendHumanPhoneVerificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceResendHumanPhoneVerificationBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/avatar": {
      "delete": {
        "summary": "Delete User Avatar (Human)",
        "description": "Removes the avatar that is currently set on the user.",
        "operationId": "ManagementService_RemoveHumanAvatar",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RemoveHumanAvatarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ]
      }
    },
    "/users/{userId}/password/_initialize": {
      "post": {
        "summary": "Set Human Initial Password\n\nDeprecated: please use user service v2 SetPassword",
        "operationId": "ManagementService_SetHumanInitialPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetHumanInitialPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetHumanInitialPasswordBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/password": {
      "post": {
        "summary": "Set User Password",
        "description": "Set a new password for a user. Per default, the user has to change the password on the next login. You can set no_change_required to true, to avoid the change on the next login.\n\nDeprecated: please use user service v2 SetPassword",
        "operationId": "ManagementService_SetHumanPassword",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SetHumanPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetHumanPasswordBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/password/_reset": {
      "post": {
        "summary": "Send Reset Password Notification",
        "description": "The user will receive an email with a link to change the password.\n\nDeprecated: please use user service v2 PasswordReset",
        "operationId": "ManagementService_SendHumanResetPasswordNotification",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SendHumanResetPasswordNotificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSendHumanResetPasswordNotificationBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/auth_factors/_search": {
      "post": {
        "summary": "Get User Authentication Factors (2FA/MFA)",
        "description": "Get a list of authentication factors the user has set. Including Second Factors (2FA) and Multi-Factors (MFA).\n\nDeprecated: please use user service v2 ListAuthenticationMethodTypes",
        "operationId": "ManagementService_ListHumanAuthFactors",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ListHumanAuthFactorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/auth_factors/otp": {
      "delete": {
        "summary": "Remove Multi-Factor OTP",
        "description": "Remove the configured One-Time Password (OTP) as a factor from the user. OTP is an authentication app, like Authy or Google/Microsoft Authenticator.\n\nDeprecated: please use user service v2 RemoveTOTP",
        "operationId": "ManagementService_RemoveHumanAuthFactorOTP",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RemoveHumanAuthFactorOTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/auth_factors/u2f/{tokenId}": {
      "delete": {
        "summary": "Remove Multi-Factor U2F",
        "description": "Remove the configured Universal Second Factor (U2F) as a factor from the user. U2F is a device-dependent factor like FingerPrint, Windows-Hello, etc.\n\nDeprecated: please use user service v2 RemoveU2F",
        "operationId": "ManagementService_RemoveHumanAuthFactorU2F",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RemoveHumanAuthFactorU2FResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/auth_factors/otp_sms": {
      "delete": {
        "summary": "Remove Multi-Factor OTP SMS",
        "description": "Remove the configured One-Time Password (OTP) SMS as a factor from the user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.\n\nDeprecated: please use user service v2 RemoveOTPSMS",
        "operationId": "ManagementService_RemoveHumanAuthFactorOTPSMS",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RemoveHumanAuthFactorOTPSMSResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/auth_factors/otp_email": {
      "delete": {
        "summary": "Remove Multi-Factor OTP SMS",
        "description": "Remove the configured One-Time Password (OTP) Email as a factor from the user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.\n\nDeprecated: please use user service v2 RemoveOTPEmail",
        "operationId": "ManagementService_RemoveHumanAuthFactorOTPEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RemoveHumanAuthFactorOTPEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/passwordless/_search": {
      "post": {
        "summary": "Search Passwordless/Passkey authentication",
        "description": "Get a list of configured passwordless/passkey authentication methods from the user. Passwordless/passkey is a device-dependent authentication like FingerScan, WindowsHello or a Hardware Token.\n\nDeprecated: please use user service v2 ListPasskeys",
        "operationId": "ManagementService_ListHumanPasswordless",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ListHumanPasswordlessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/passwordless/_link": {
      "post": {
        "summary": "Add Passwordless/Passkey Registration Link",
        "description": "Adds a new passwordless/passkey authenticator link to the user and returns it in the response. The link enables the user to register a new device if current passwordless/passkey devices are all platform authenticators. e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone\n\nDeprecated: please use user service v2 RegisterPasskey",
        "operationId": "ManagementService_AddPasswordlessRegistration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AddPasswordlessRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/passwordless/_send_link": {
      "post": {
        "summary": "Send Passwordless/Passkey Registration Link",
        "description": "Adds a new passwordless/passkey authenticator link to the user and sends it to the user per email. The link enables the user to register a new device if current passwordless/passkey devices are all platform authenticators. e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone.\n\nDeprecated: please use user service v2 RegisterPasskey",
        "operationId": "ManagementService_SendPasswordlessRegistration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SendPasswordlessRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSendPasswordlessRegistrationBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/passwordless/{tokenId}": {
      "delete": {
        "summary": "Delete Passwordless/Passkey",
        "description": "Remove a configured passwordless/passkey authentication method from the user. (e.g FaceID, FingerScane, WindowsHello, etc.).\n\nDeprecated: please use user service v2 RemovePasskey",
        "operationId": "ManagementService_RemoveHumanPasswordless",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RemoveHumanPasswordlessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Human"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/machine": {
      "put": {
        "summary": "Update Machine User",
        "description": "Change a service account/machine user. It is used for accounts with non-interactive authentication possibilities.",
        "operationId": "ManagementService_UpdateMachine",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UpdateMachineResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateMachineBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Machine"
        ]
      }
    },
    "/users/{userId}/secret": {
      "delete": {
        "summary": "Delete Secret of Machine User",
        "description": "Delete a secret of a machine user/service account. The user will not be able to authenticate with the secret afterward.",
        "operationId": "ManagementService_RemoveMachineSecret",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RemoveMachineSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Machine"
        ]
      },
      "put": {
        "summary": "Create Secret for Machine User",
        "description": "Create a new secret for a machine user/service account. It is used to authenticate the user (client credential grant).",
        "operationId": "ManagementService_GenerateMachineSecret",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GenerateMachineSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceGenerateMachineSecretBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Machine"
        ]
      }
    },
    "/users/{userId}/keys/{keyId}": {
      "get": {
        "summary": "Get Machine user Key By ID",
        "description": "Get a specific Key of a machine user by its id. Machine keys are used to authenticate with jwt profile authentication.",
        "operationId": "ManagementService_GetMachineKeyByIDs",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GetMachineKeyByIDsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Machine"
        ]
      },
      "delete": {
        "summary": "Delete Key for machine user",
        "description": "Delete a specific key from a user. The user will not be able to authenticate with that key afterward.",
        "operationId": "ManagementService_RemoveMachineKey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RemoveMachineKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Machine"
        ]
      }
    },
    "/users/{userId}/keys/_search": {
      "post": {
        "summary": "Get Machine user Key By ID",
        "description": "Get the list of keys of a machine user. Machine keys are used to authenticate with jwt profile authentication.",
        "operationId": "ManagementService_ListMachineKeys",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ListMachineKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceListMachineKeysBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Machine"
        ]
      }
    },
    "/users/{userId}/keys": {
      "post": {
        "summary": "Create Key for machine user",
        "description": "If a public key is not supplied, a new key is generated and will be returned in the response. Make sure to store the returned key. If an RSA public key is supplied, the private key is omitted from the response. Machine keys are used to authenticate with jwt profile.",
        "operationId": "ManagementService_AddMachineKey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AddMachineKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceAddMachineKeyBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Machine"
        ]
      }
    },
    "/users/{userId}/pats/{tokenId}": {
      "get": {
        "summary": "Get a Personal-Access-Token (PAT) by ID",
        "description": "Returns the PAT for a user, currently only available for machine users/service accounts. PATs are ready-to-use tokens and can be sent directly in the authentication header.",
        "operationId": "ManagementService_GetPersonalAccessTokenByIDs",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GetPersonalAccessTokenByIDsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Machine"
        ]
      },
      "delete": {
        "summary": "Get a Personal-Access-Token (PAT) by ID",
        "description": "Delete a PAT from a user. Afterward, the user will not be able to authenticate with that token anymore.",
        "operationId": "ManagementService_RemovePersonalAccessToken",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RemovePersonalAccessTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a result from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Machine"
        ]
      }
    },
    "/users/{userId}/pats/_search": {
      "post": {
        "summary": "Get a Personal-Access-Token (PAT) by ID",
        "description": "Returns a list of PATs for a user, currently only available for machine users/service accounts. PATs are ready-to-use tokens and can be sent directly in the authentication header.",
        "operationId": "ManagementService_ListPersonalAccessTokens",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ListPersonalAccessTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceListPersonalAccessTokensBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Machine"
        ]
      }
    },
    "/users/{userId}/pats": {
      "post": {
        "summary": "Create a Personal-Access-Token (PAT)",
        "description": "Generates a new PAT for the user. Currently only available for machine users. The token will be returned in the response, make sure to store it. PATs are ready-to-use tokens and can be sent directly in the authentication header.",
        "operationId": "ManagementService_AddPersonalAccessToken",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AddPersonalAccessTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceAddPersonalAccessTokenBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "User Machine"
        ]
      }
    },
    "/users/{userId}/idps/_search": {
      "post": {
        "summary": "List Social Logins",
        "description": "Returns a list of all linked identity providers/social logins of the user. (e. Google, Microsoft, AzureAD, etc.).\n\nDeprecated: please use user service v2 ListLinkedIDPs",
        "operationId": "ManagementService_ListHumanLinkedIDPs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListHumanLinkedIDPsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceListHumanLinkedIDPsBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get the result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/idps/{idpId}/{linkedUserId}": {
      "delete": {
        "summary": "Remove Social Login",
        "description": "Remove a configured social logins/identity providers of the user (e.g. Google, Microsoft, AzureAD, etc.). The user will not be able to log in with the given provider afterward. Make sure the user does have other possibilities to authenticate.\n\nDeprecated: please use user service v2 RemoveLinkedIDP",
        "operationId": "ManagementService_RemoveHumanLinkedIDP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveHumanLinkedIDPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "idpId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkedUserId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get the result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "deprecated": true
      }
    },
    "/users/{userId}/memberships/_search": {
      "post": {
        "summary": "List ZITADEL Permissions",
        "description": "Show all the permissions the user has in ZITADEL (ZITADEL Manager).",
        "operationId": "ManagementService_ListUserMemberships",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserMembershipsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "list limitations and ordering",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceListUserMembershipsBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get the result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/orgs/me": {
      "get": {
        "summary": "Get My Organization",
        "description": "Returns the organization that is sent in the x-zitadel-orgid. If no header is set the organization of the authenticated user will be returned.",
        "operationId": "ManagementService_GetMyOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMyOrgResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      },
      "delete": {
        "summary": "Delete Organization",
        "description": "Deletes my organization and all its resources (Users, Projects, Grants to and from the org). Users of this organization will not be able to log in.",
        "operationId": "ManagementService_RemoveOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1RemoveOrgResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      },
      "put": {
        "summary": "Update Organization",
        "description": "Change the name of the organization.",
        "operationId": "ManagementService_UpdateOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateOrgResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateOrgRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/global/orgs/_by_domain": {
      "get": {
        "summary": "Get Organization By Domain",
        "description": "Search an organization by the domain, overall organizations. The domain must match exactly.",
        "operationId": "ManagementService_GetOrgByDomainGlobal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrgByDomainGlobalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs/me/changes/_search": {
      "post": {
        "summary": "Get Organization History",
        "description": "Returns a list of changes/events that have happened in the organization. It's the history of the organization. Make sure to send a limit.",
        "operationId": "ManagementService_ListOrgChanges",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListOrgChangesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListOrgChangesRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs": {
      "post": {
        "summary": "Create Organization",
        "description": "Create a new organization. Based on the given name a domain will be generated to be able to identify users within an organization.",
        "operationId": "ManagementService_AddOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddOrgResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddOrgRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs/me/_deactivate": {
      "post": {
        "summary": "Deactivate Organization",
        "description": "Sets the state of my organization to deactivated. Users of this organization will not be able to log in.",
        "operationId": "ManagementService_DeactivateOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeactivateOrgResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeactivateOrgRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs/me/_reactivate": {
      "post": {
        "summary": "Reactivate Organization",
        "description": "Set the state of my organization to active. The state of the organization has to be deactivated to perform the request. Users of this organization will be able to log in again.",
        "operationId": "ManagementService_ReactivateOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReactivateOrgResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReactivateOrgRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/metadata/{key}": {
      "get": {
        "summary": "Get Organization Metadata By Key",
        "description": "Get a metadata object from an organization by a specific key.",
        "operationId": "ManagementService_GetOrgMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrgMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations",
          "Organization Metadata"
        ]
      },
      "delete": {
        "summary": "Delete Organization Metadata By Key",
        "description": "Remove a metadata object from an organization with a specific key.",
        "operationId": "ManagementService_RemoveOrgMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveOrgMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations",
          "Organization Metadata"
        ]
      },
      "post": {
        "summary": "Set Organization Metadata",
        "description": "This endpoint either adds or updates a metadata value for the requested key. Make sure the value is base64 encoded.",
        "operationId": "ManagementService_SetOrgMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetOrgMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetOrgMetadataBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations",
          "Organization Metadata"
        ]
      }
    },
    "/metadata/_bulk": {
      "delete": {
        "summary": "Bulk Delete Metadata",
        "description": "Remove a list of metadata objects from an organization with a list of keys.",
        "operationId": "ManagementService_BulkRemoveOrgMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BulkRemoveOrgMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BulkRemoveOrgMetadataRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations",
          "Organization Metadata"
        ]
      },
      "post": {
        "summary": "Bulk Set Organization Metadata",
        "description": "This endpoint sets a list of metadata to the organization. Make sure the values are base64 encoded.",
        "operationId": "ManagementService_BulkSetOrgMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BulkSetOrgMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BulkSetOrgMetadataRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations",
          "Organization Metadata"
        ]
      }
    },
    "/metadata/_search": {
      "post": {
        "summary": "Search Organization Metadata",
        "description": "Get the metadata of an organization filtered by your query.",
        "operationId": "ManagementService_ListOrgMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListOrgMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListOrgMetadataRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations",
          "Organization Metadata"
        ]
      }
    },
    "/orgs/me/domains/_search": {
      "post": {
        "summary": "Search Domains",
        "description": "Returns the list of registered domains of an organization. The domains are used to identify to which organization a user belongs.",
        "operationId": "ManagementService_ListOrgDomains",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListOrgDomainsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListOrgDomainsRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs/me/domains": {
      "post": {
        "summary": "Add Domain",
        "description": "Add a new domain to an organization. The domains are used to identify to which organization a user belongs.",
        "operationId": "ManagementService_AddOrgDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddOrgDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddOrgDomainRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs/me/domains/{domain}": {
      "delete": {
        "summary": "Remove Domain",
        "description": "Delete a new domain from an organization. The domains are used to identify to which organization a user belongs. If the uses use the domain for login, this will not be possible afterwards. They have to use another domain instead.",
        "operationId": "ManagementService_RemoveOrgDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveOrgDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs/me/domains/{domain}/validation/_generate": {
      "post": {
        "summary": "Generate Domain Verification",
        "description": "Generate a new file to be able to verify your domain with DNS or HTTP challenge.",
        "operationId": "ManagementService_GenerateOrgDomainValidation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GenerateOrgDomainValidationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceGenerateOrgDomainValidationBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs/me/domains/{domain}/validation/_validate": {
      "post": {
        "summary": "Verify Domain",
        "description": "Make sure you have added the required verification to your domain, depending on the method you have chosen (HTTP or DNS challenge). ZITADEL will check it and set the domain as verified if it was successful. A verify domain has to be unique.",
        "operationId": "ManagementService_ValidateOrgDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateOrgDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceValidateOrgDomainBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs/me/domains/{domain}/_set_primary": {
      "post": {
        "summary": "Set Primary Domain",
        "description": "Set a domain as primary. It has to be verified to be able to be set as primary. The primary domain will be shown as suffix on the usernames as preferred loginname on this organization.",
        "operationId": "ManagementService_SetPrimaryOrgDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetPrimaryOrgDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs/members/roles/_search": {
      "post": {
        "summary": "List Organization Member Roles",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request returns all roles possible for a ZITADEL member on the organization level.",
        "operationId": "ManagementService_ListOrgMemberRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListOrgMemberRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations",
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/orgs/me/members/_search": {
      "post": {
        "summary": "List Organization Members",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request returns all users with memberships on the organization level, matching the search queries. The search queries will be AND linked.",
        "operationId": "ManagementService_ListOrgMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListOrgMembersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListOrgMembersRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations",
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/orgs/me/members": {
      "post": {
        "summary": "Add Organization Member",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request adds a new user to the members list on the organization level with one or multiple roles.",
        "operationId": "ManagementService_AddOrgMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddOrgMemberResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddOrgMemberRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations",
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/orgs/me/members/{userId}": {
      "delete": {
        "summary": "Remove Organization Member",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request removes a user from the members list on an instance level. The user can still have roles on another level (iam, project)",
        "operationId": "ManagementService_RemoveOrgMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveOrgMemberResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations",
          "Members",
          "ZITADEL Administrators"
        ]
      },
      "put": {
        "summary": "Update Organization Member",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request changes the roles of an existing member. The whole roles list will be updated. Make sure to include roles that you don't want to change (remove).",
        "operationId": "ManagementService_UpdateOrgMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateOrgMemberResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateOrgMemberBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations",
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/projects/{id}": {
      "get": {
        "summary": "Get Project By ID",
        "description": "Returns a project owned by the organization (no granted projects). A Project is a vessel for different applications sharing the same role context.",
        "operationId": "ManagementService_GetProjectByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProjectByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      },
      "delete": {
        "summary": "Remove Project",
        "description": "Project and all its sub-resources like project grants, applications, roles and user grants will be removed.",
        "operationId": "ManagementService_RemoveProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveProjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      },
      "put": {
        "summary": "Update Project",
        "description": "Update a project and its settings. A Project is a vessel for different applications sharing the same role context.",
        "operationId": "ManagementService_UpdateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateProjectBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/granted_projects/{projectId}/grants/{grantId}": {
      "get": {
        "summary": "Get Granted Project By ID",
        "description": "Returns a project owned by another organization and granted to my organization. A Project is a vessel for different applications sharing the same role context.",
        "operationId": "ManagementService_GetGrantedProjectByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGrantedProjectByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/projects/_search": {
      "post": {
        "summary": "Search Project",
        "description": "Lists projects my organization is the owner of (no granted projects). A Project is a vessel for different applications sharing the same role context.",
        "operationId": "ManagementService_ListProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListProjectsRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/granted_projects/_search": {
      "post": {
        "summary": "Search Granted Project",
        "description": "Lists projects my organization got granted from another organization. A Project is a vessel for different applications sharing the same role context.",
        "operationId": "ManagementService_ListGrantedProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListGrantedProjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListGrantedProjectsRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/granted_projects/{projectId}/grants/{grantId}/roles/_search": {
      "get": {
        "summary": "Search Granted Project Roles",
        "description": "Lists the roles a granted projects has. These are the roles, that have been granted by the owner organization to my organization.",
        "operationId": "ManagementService_ListGrantedProjectRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListGrantedProjectRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "query.offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "query.limit",
            "description": "Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "query.asc",
            "description": "default is descending",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/projects/{projectId}/changes/_search": {
      "post": {
        "summary": "Project History",
        "description": "Returns a list of changes/events that have happened on the project. It's the history of the project. Make sure to send a limit.",
        "operationId": "ManagementService_ListProjectChanges",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProjectChangesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "query.sequence",
            "description": "sequence represents the order of events. It's always counting",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "query.limit",
            "description": "Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "query.asc",
            "description": "default is descending",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/projects": {
      "post": {
        "summary": "Create Project",
        "description": "Create a new project. A Project is a vessel for different applications sharing the same role context.",
        "operationId": "ManagementService_AddProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddProjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddProjectRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/projects/{id}/_deactivate": {
      "post": {
        "summary": "Deactivate Project",
        "description": "Set the state of a project to deactivated. Request returns an error if the project is already deactivated.",
        "operationId": "ManagementService_DeactivateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeactivateProjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceDeactivateProjectBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/projects/{id}/_reactivate": {
      "post": {
        "summary": "Reactivate Project",
        "description": "Set the state of a project to active. Request returns an error if the project is not deactivated.",
        "operationId": "ManagementService_ReactivateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReactivateProjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceReactivateProjectBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/projects/{projectId}/roles/_search": {
      "post": {
        "summary": "Search Project Roles",
        "description": "Returns all roles of a project matching the search query.",
        "operationId": "ManagementService_ListProjectRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProjectRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceListProjectRolesBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Roles"
        ]
      }
    },
    "/projects/{projectId}/roles": {
      "post": {
        "summary": "Add Project Role",
        "description": "Add a new project role to a project. The key must be unique within the project.",
        "operationId": "ManagementService_AddProjectRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddProjectRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceAddProjectRoleBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Roles"
        ]
      }
    },
    "/projects/{projectId}/roles/_bulk": {
      "post": {
        "summary": "Bulk Add Project Role",
        "description": "Add a list of roles to a project. The keys must be unique within the project.",
        "operationId": "ManagementService_BulkAddProjectRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BulkAddProjectRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceBulkAddProjectRolesBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Roles"
        ]
      }
    },
    "/projects/{projectId}/roles/{roleKey}": {
      "delete": {
        "summary": "Remove Project Role",
        "description": "Removes the role from the project and on every resource it has a dependency. This includes project grants and user grants.",
        "operationId": "ManagementService_RemoveProjectRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveProjectRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleKey",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Roles"
        ]
      },
      "put": {
        "summary": "Change Project Role",
        "description": "Change a project role. The key is not editable. If a key should change, remove the role and create a new one.",
        "operationId": "ManagementService_UpdateProjectRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProjectRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleKey",
            "description": "The key is the only relevant attribute for ZITADEL regarding the authorization checks.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateProjectRoleBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Roles"
        ]
      }
    },
    "/projects/members/roles/_search": {
      "post": {
        "summary": "List Project Member Roles",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request returns all roles possible for a ZITADEL member on the project level.",
        "operationId": "ManagementService_ListProjectMemberRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProjectMemberRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects",
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/projects/{projectId}/members/_search": {
      "post": {
        "summary": "List Project Members",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request returns all users with memberships on the project level, matching the search queries. The search queries will be AND linked.",
        "operationId": "ManagementService_ListProjectMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProjectMembersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceListProjectMembersBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects",
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/projects/{projectId}/members": {
      "post": {
        "summary": "Add Project Member",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request adds a new user to the members list on the project level with one or multiple roles.",
        "operationId": "ManagementService_AddProjectMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddProjectMemberResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceAddProjectMemberBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects",
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/projects/{projectId}/members/{userId}": {
      "delete": {
        "summary": "Remove Project Member",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request removes a user from the members list on an project level. The user can still have roles on another level (iam, organization)",
        "operationId": "ManagementService_RemoveProjectMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveProjectMemberResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects",
          "Members",
          "ZITADEL Administrators"
        ]
      },
      "put": {
        "summary": "Update Project Member",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request changes the roles of an existing member. The whole roles list will be updated. Make sure to include roles that you don't want to change (remove).",
        "operationId": "ManagementService_UpdateProjectMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProjectMemberResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateProjectMemberBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects",
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/projects/{projectId}/apps/{appId}": {
      "get": {
        "summary": "Get Application By ID",
        "description": "Get an application of any type (OIDC, API, SAML)",
        "operationId": "ManagementService_GetAppByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAppByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      },
      "delete": {
        "summary": "Remove Application",
        "description": "Remove an application. It is not possible to request tokens for removed apps. Request returns an error if the application is already deactivated.",
        "operationId": "ManagementService_RemoveApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveAppResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      },
      "put": {
        "summary": "Update Application",
        "description": "Update the basic information of an application. This doesn't include information that are dependent on the application type (OIDC, API, SAML)",
        "operationId": "ManagementService_UpdateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateAppResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateAppBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/_search": {
      "post": {
        "summary": "Search Applications",
        "description": "Returns all applications within a project, that match the query.",
        "operationId": "ManagementService_ListApps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceListAppsBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/{appId}/changes/_search": {
      "post": {
        "summary": "Application History",
        "description": "Returns a list of changes/events that have happened on the application. It's the history of the app. Make sure to send a limit.",
        "operationId": "ManagementService_ListAppChanges",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppChangesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "query.sequence",
            "description": "sequence represents the order of events. It's always counting",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "query.limit",
            "description": "Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "query.asc",
            "description": "default is descending",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/oidc": {
      "post": {
        "summary": "Create Application (OIDC)",
        "description": "Create a new OIDC client. The client id will be generated and returned in the response. Depending on the chosen configuration also a secret will be returned.",
        "operationId": "ManagementService_AddOIDCApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddOIDCAppResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceAddOIDCAppBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/saml": {
      "post": {
        "summary": "Create Application (SAML)",
        "description": "Create a new SAML client. Returns an entity ID",
        "operationId": "ManagementService_AddSAMLApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddSAMLAppResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceAddSAMLAppBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/api": {
      "post": {
        "summary": "Create Application (API)",
        "description": "Create a new API client. The client id will be generated and returned in the response. Depending on the chosen configuration also a secret will be generated and returned.",
        "operationId": "ManagementService_AddAPIApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddAPIAppResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceAddAPIAppBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/{appId}/oidc_config": {
      "put": {
        "summary": "Update OIDC Application Config",
        "description": "Update the OIDC specific configuration of an application.",
        "operationId": "ManagementService_UpdateOIDCAppConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateOIDCAppConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateOIDCAppConfigBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/{appId}/saml_config": {
      "put": {
        "summary": "Update SAML Application Config",
        "description": "Update the SAML specific configuration of an application.",
        "operationId": "ManagementService_UpdateSAMLAppConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateSAMLAppConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateSAMLAppConfigBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/{appId}/api_config": {
      "put": {
        "summary": "Update API Application Config",
        "description": "Update the OIDC-specific configuration of an application.",
        "operationId": "ManagementService_UpdateAPIAppConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateAPIAppConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateAPIAppConfigBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/{appId}/_deactivate": {
      "post": {
        "summary": "Deactivate Application",
        "description": "Set the state of an application to deactivated. It is not possible to request tokens for deactivated apps. Request returns an error if the application is already deactivated.",
        "operationId": "ManagementService_DeactivateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeactivateAppResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceDeactivateAppBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/{appId}/_reactivate": {
      "post": {
        "summary": "Reactivate Application",
        "description": "Set the state of an application to active. Request returns an error if the application is not deactivated.",
        "operationId": "ManagementService_ReactivateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReactivateAppResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceReactivateAppBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/{appId}/oidc_config/_generate_client_secret": {
      "post": {
        "summary": "Generate New OIDC Client Secret",
        "description": "Generates a new client secret for the OIDC application, make sure to save the response",
        "operationId": "ManagementService_RegenerateOIDCClientSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RegenerateOIDCClientSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceRegenerateOIDCClientSecretBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/{appId}/api_config/_generate_client_secret": {
      "post": {
        "summary": "Generate New API Client Secret",
        "description": "Generates a new client secret for the API application, make sure to save the response",
        "operationId": "ManagementService_RegenerateAPIClientSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RegenerateAPIClientSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceRegenerateAPIClientSecretBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/{appId}/keys/{keyId}": {
      "get": {
        "summary": "Get Application Key By ID",
        "description": "Returns an application key. Keys are used for authorizing API Applications.",
        "operationId": "ManagementService_GetAppKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAppKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      },
      "delete": {
        "summary": "Delete Application Key",
        "description": "Remove an application key. The API application will not be able to authorize with the key anymore.",
        "operationId": "ManagementService_RemoveAppKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveAppKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/{appId}/keys/_search": {
      "post": {
        "summary": "List Application Keys",
        "description": "Search application keys. Keys are used for authorizing API Applications.",
        "operationId": "ManagementService_ListAppKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceListAppKeysBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/apps/{appId}/keys": {
      "post": {
        "summary": "Create Application Key",
        "description": "Create a new application key, they are used for authorizing API Applications. Key details will be returned in the response, make sure to save it.",
        "operationId": "ManagementService_AddAppKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddAppKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceAddAppKeyBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/projects/{projectId}/grants/{grantId}/changes/_search": {
      "post": {
        "summary": "Project Grant History",
        "description": "Returns a list of changes/events that have happened on the project grant. It's the history of the project. Make sure to send a limit.",
        "operationId": "ManagementService_ListProjectGrantChanges",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProjectGrantChangesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "query.sequence",
            "description": "sequence represents the order of events. It's always counting",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "query.limit",
            "description": "Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "query.asc",
            "description": "default is descending",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/projects/{projectId}/grants/{grantId}": {
      "get": {
        "summary": "Project Grant By ID",
        "description": "Returns a project grant. A project grant is when the organization grants its project to another organization.",
        "operationId": "ManagementService_GetProjectGrantByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProjectGrantByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      },
      "delete": {
        "summary": "Remove Project Grant",
        "description": "Remove a project grant. All user grants for this project grant will also be removed. A user will not have access to the project afterward (if permissions are checked).",
        "operationId": "ManagementService_RemoveProjectGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveProjectGrantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Grants"
        ]
      },
      "put": {
        "summary": "Change Project Grant",
        "description": "Change the roles of the project that is granted to another organization. The project grant will allow the granted organization to access the project and manage the authorizations for its users. Project Grant will be listed in the granted project of the granted organization",
        "operationId": "ManagementService_UpdateProjectGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProjectGrantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateProjectGrantBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Grants"
        ]
      }
    },
    "/projects/{projectId}/grants/_search": {
      "post": {
        "summary": "Search Project Grants from Project",
        "description": "Returns a list of project grants for a specific project. A project grant is when the organization grants its project to another organization.",
        "operationId": "ManagementService_ListProjectGrants",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProjectGrantsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceListProjectGrantsBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Grants"
        ]
      }
    },
    "/projectgrants/_search": {
      "post": {
        "summary": "Search Project Grants",
        "description": "Returns a list of project grants. A project grant is when the organization grants its project to another organization.",
        "operationId": "ManagementService_ListAllProjectGrants",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAllProjectGrantsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListAllProjectGrantsRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Grants"
        ]
      }
    },
    "/projects/{projectId}/grants": {
      "post": {
        "summary": "Add Project Grant",
        "description": "Grant a project to another organization. The project grant will allow the granted organization to access the project and manage the authorizations for its users. Project Grant will be listed in the granted project of the granted organization",
        "operationId": "ManagementService_AddProjectGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddProjectGrantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceAddProjectGrantBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Grants"
        ]
      }
    },
    "/projects/{projectId}/grants/{grantId}/_deactivate": {
      "post": {
        "summary": "Deactivate Project Grant",
        "description": "Set the state of the project grant to deactivated. The grant has to be active to be able to deactivate.",
        "operationId": "ManagementService_DeactivateProjectGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeactivateProjectGrantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceDeactivateProjectGrantBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Grants"
        ]
      }
    },
    "/projects/{projectId}/grants/{grantId}/_reactivate": {
      "post": {
        "summary": "Reactivate Project Grant",
        "description": "Set the state of the project grant to active. The grant has to be deactivated to be able to reactivate.",
        "operationId": "ManagementService_ReactivateProjectGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReactivateProjectGrantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceReactivateProjectGrantBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Grants"
        ]
      }
    },
    "/projects/grants/members/roles/_search": {
      "post": {
        "summary": "List Project Grant Member Roles",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request returns all roles possible for a ZITADEL member on the project grant level.",
        "operationId": "ManagementService_ListProjectGrantMemberRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProjectGrantMemberRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query.offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "query.limit",
            "description": "Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "query.asc",
            "description": "default is descending",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "result",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Grants",
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/projects/{projectId}/grants/{grantId}/members/_search": {
      "post": {
        "summary": "List Project Grant Members",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request returns all users with memberships on the project grant level, matching the search queries. The search queries will be AND linked.",
        "operationId": "ManagementService_ListProjectGrantMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProjectGrantMembersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceListProjectGrantMembersBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Grants",
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/projects/{projectId}/grants/{grantId}/members": {
      "post": {
        "summary": "Add Project Grant Member",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request adds a new user to the members list on the project grant level with one or multiple roles.",
        "operationId": "ManagementService_AddProjectGrantMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddProjectGrantMemberResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceAddProjectGrantMemberBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Grants",
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/projects/{projectId}/grants/{grantId}/members/{userId}": {
      "delete": {
        "summary": "Remove Project Grant Member",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request removes a user from the members list on a project grant level. The user can still have roles on another level (iam, organization, project)",
        "operationId": "ManagementService_RemoveProjectGrantMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveProjectGrantMemberResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Grants",
          "Members",
          "ZITADEL Administrators"
        ]
      },
      "put": {
        "summary": "Update Project Grant Member",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request changes the roles of an existing member. The whole roles list will be updated. Make sure to include roles that you don't want to change (remove).",
        "operationId": "ManagementService_UpdateProjectGrantMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProjectGrantMemberResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateProjectGrantMemberBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Project Grants",
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/users/{userId}/grants/{grantId}": {
      "get": {
        "summary": "User Grant By ID",
        "description": "Returns a user grant per ID. A user grant is a role a user has for a specific project and organization.",
        "operationId": "ManagementService_GetUserGrantByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserGrantByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User Grants"
        ]
      },
      "delete": {
        "summary": "Remove User Grant",
        "description": "Removes the user grant from the user. The user will not be able to use the granted project anymore. Also, the roles will not be included in the tokens when requested.",
        "operationId": "ManagementService_RemoveUserGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveUserGrantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User Grants"
        ]
      },
      "put": {
        "summary": "Update User Grants",
        "description": "Update the roles of a user grant. User grants are the roles users have for a specific project and organization.",
        "operationId": "ManagementService_UpdateUserGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateUserGrantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateUserGrantBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User Grants"
        ]
      }
    },
    "/users/grants/_search": {
      "post": {
        "summary": "Search User Grants",
        "description": "Returns a list of user grants that match the search queries. User grants are the roles users have for a specific project and organization.",
        "operationId": "ManagementService_ListUserGrants",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserGrantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListUserGrantRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User Grants"
        ]
      }
    },
    "/users/{userId}/grants": {
      "post": {
        "summary": "Add User Grant",
        "description": "Add a user grant for a specific user. User grants are the roles users have for a specific project and organization.",
        "operationId": "ManagementService_AddUserGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddUserGrantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceAddUserGrantBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User Grants"
        ]
      }
    },
    "/users/{userId}/grants/{grantId}/_deactivate": {
      "post": {
        "summary": "Deactivate User Grant",
        "description": "Deactivate the user grant. The user will not be able to use the granted project anymore. Also, the roles will not be included in the tokens when requested. An error will be returned if the user grant is already deactivated.",
        "operationId": "ManagementService_DeactivateUserGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeactivateUserGrantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceDeactivateUserGrantBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User Grants"
        ]
      }
    },
    "/users/{userId}/grants/{grantId}/_reactivate": {
      "post": {
        "summary": "Reactivate User Grant",
        "description": "Reactivate a deactivated user grant. The user will be able to use the granted project again. An error will be returned if the user grant is not deactivated.",
        "operationId": "ManagementService_ReactivateUserGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReactivateUserGrantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "grantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceReactivateUserGrantBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User Grants"
        ]
      }
    },
    "/user_grants/_bulk": {
      "delete": {
        "summary": "Bulk Remove User Grants",
        "description": "Remove a list of user grants. The users will not be able to use the granted project anymore. Also, the roles will not be included in the tokens when requested.",
        "operationId": "ManagementService_BulkRemoveUserGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BulkRemoveUserGrantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BulkRemoveUserGrantRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User Grants"
        ]
      }
    },
    "/policies/orgiam": {
      "get": {
        "summary": "Get Org IAM Policy",
        "description": "Use Get Domain Settings instead",
        "operationId": "AdminService_GetOrgIAMPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetOrgIAMPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Domain Settings"
        ],
        "deprecated": true
      },
      "put": {
        "summary": "Update Org IAM Policy",
        "description": "Use Update Domain Settings instead",
        "operationId": "AdminService_UpdateOrgIAMPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateOrgIAMPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateOrgIAMPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Domain Settings"
        ],
        "deprecated": true
      }
    },
    "/policies/domain": {
      "get": {
        "summary": "Get Domain Settings",
        "description": "Returns the domain settings configured as default on the instance. Domain settings specify how ZITADEL should handle domains, in regards to usernames, emails and validation..",
        "operationId": "AdminService_GetDomainPolicy",
        "responses": {
          "200": {
            "description": "default domain policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetDomainPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Domain Settings"
        ]
      },
      "put": {
        "summary": "Update Domain Settings",
        "description": "Update the domain settings configured as default on the instance. Domain settings specify how ZITADEL should handle domains, usernames, emails and validation. It affects all organizations that do not have overwritten settings.",
        "operationId": "AdminService_UpdateDomainPolicy",
        "responses": {
          "200": {
            "description": "default domain policy updated",
            "schema": {
              "$ref": "#/definitions/v1UpdateDomainPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateDomainPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Domain Settings"
        ]
      }
    },
    "/policies/login": {
      "get": {
        "summary": "Get Login Policy",
        "description": "Returns the login settings that should be used for the authenticated user. It is set either on an instance or organization level. This policy defines what possibilities the user has to authenticate and to use in the login, e.g social logins, MFA, passkey, etc.",
        "operationId": "AuthService_GetMyLoginPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMyLoginPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Policies"
        ]
      },
      "delete": {
        "summary": "Reset Custom Login Settings to Default",
        "description": "Remove the custom settings from the organization. The default settings of the instance will be triggered afterward. The login policy defines what kind of authentication possibilities the user should have. Generally speaking the behavior of the login and register UI.",
        "operationId": "ManagementService_ResetLoginPolicyToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResetLoginPolicyToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Login Settings"
        ]
      },
      "post": {
        "summary": "Create Custom Login Settings",
        "description": "Create login settings for the organization and therefore overwrite the default settings for this organization. The login policy defines what kind of authentication possibilities the user should have. Generally speaking the behavior of the login and register UI.",
        "operationId": "ManagementService_AddCustomLoginPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddCustomLoginPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddCustomLoginPolicyRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Login Settings"
        ]
      },
      "put": {
        "summary": "Update Login Settings",
        "description": "Update the default login settings defined on the instance level. It will trigger for all organizations, that don't overwrite the settings. The login policy defines what kind of authentication possibilities the user should have. Generally speaking the behavior of the login and register UI.",
        "operationId": "AdminService_UpdateLoginPolicy",
        "responses": {
          "200": {
            "description": "default login policy updated",
            "schema": {
              "$ref": "#/definitions/v1UpdateLoginPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateLoginPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Login Settings"
        ]
      }
    },
    "/policies/default/login": {
      "get": {
        "summary": "Get Default Login Settings",
        "description": "Returns the default login settings defined on the instance level. The login policy defines what kind of authentication possibilities the user should have. Generally speaking the behavior of the login and register UI.",
        "operationId": "ManagementService_GetDefaultLoginPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultLoginPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Login Settings"
        ]
      }
    },
    "/policies/login/idps/_search": {
      "post": {
        "summary": "List Linked Identity Providers",
        "description": "Returns a list of identity providers that are linked in the login policy. This means, that they are configured for the instance and will be shown to the users. It affects all organizations, without custom login settings.",
        "operationId": "AdminService_ListLoginPolicyIDPs",
        "responses": {
          "200": {
            "description": "Identity providers of default login policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ListLoginPolicyIDPsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ListLoginPolicyIDPsRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Login Settings",
          "Identity Providers"
        ]
      }
    },
    "/policies/login/idps": {
      "post": {
        "summary": "Add Linked Identity Provider",
        "description": "Add/link a pre-configured identity provider to the login settings of the instance. This means that it will be shown to the users on the login page. It affects all organizations, without custom login settings.",
        "operationId": "AdminService_AddIDPToLoginPolicy",
        "responses": {
          "200": {
            "description": "Identity providers added to default login policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddIDPToLoginPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddIDPToLoginPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Login Settings",
          "Identity Providers"
        ]
      }
    },
    "/policies/login/idps/{idpId}": {
      "delete": {
        "summary": "Remove Linked Identity Provider",
        "description": "Remove an identity provider from the login settings of the organization. This means that it will not be shown to the users on the login page.",
        "operationId": "ManagementService_RemoveIDPFromLoginPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1RemoveIDPFromLoginPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Login Settings",
          "Identity Providers"
        ]
      }
    },
    "/policies/login/second_factors/_search": {
      "post": {
        "summary": "List Second Factors (2FA)",
        "description": "Returns a list of second factors (2FA) configured on the login settings of the instance. It affects all organizations, without custom login settings. Authentication factors are used as an additional layer of security for your users (e.g. Authentication App, FingerPrint, Windows Hello, etc). Per definition, it is called the second factor as it is used after a password. In the UI we generalize it as multi-factor.",
        "operationId": "AdminService_ListLoginPolicySecondFactors",
        "responses": {
          "200": {
            "description": "second factors of default login policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ListLoginPolicySecondFactorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Login Settings",
          "Authentication Methods"
        ]
      }
    },
    "/policies/login/second_factors": {
      "post": {
        "summary": "Add Second Factor (2FA)",
        "description": "Add a new second factor (2FA) to the login settings of the instance. Users will have the possibility to authenticate with the configured factor afterward. It affects all organizations, without custom login settings. Authentication factors are used as an additional factor to add more security to your users (e.g. Authentication App, FingerPrint, Windows Hello, etc). Per definition, it is called a second factor as it is used as an additional authentication after a password. In the UI we generalize this as multi-factor.",
        "operationId": "AdminService_AddSecondFactorToLoginPolicy",
        "responses": {
          "200": {
            "description": "second factor added to default login policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddSecondFactorToLoginPolicyResponse"
            }
          },
          "400": {
            "description": "invalid second factor type",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddSecondFactorToLoginPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Login Settings",
          "Authentication Methods"
        ]
      }
    },
    "/policies/login/second_factors/{type}": {
      "delete": {
        "summary": "Remove Second Factor (2FA)",
        "description": "Remove a configured second factor (2FA) from the login settings of the organization. Users will not be able to authenticate with the configured factor afterward. Authentication factors are used as an additional layer of security for your users (e.g. Authentication App, FingerPrint, Windows Hello, etc). Per definition, it is called the second factor as it is used after a password. In the UI we generalize it as multi-factor.",
        "operationId": "ManagementService_RemoveSecondFactorFromLoginPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1RemoveSecondFactorFromLoginPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "SECOND_FACTOR_TYPE_UNSPECIFIED",
              "SECOND_FACTOR_TYPE_OTP",
              "SECOND_FACTOR_TYPE_U2F",
              "SECOND_FACTOR_TYPE_OTP_EMAIL",
              "SECOND_FACTOR_TYPE_OTP_SMS"
            ]
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Login Settings",
          "Authentication Methods"
        ]
      }
    },
    "/policies/login/auth_factors/_search": {
      "post": {
        "summary": "List Multi-factors (MFA)",
        "description": "Returns a list of multi-factors (MFA) configured on the login settings of the organization. Authentication factors are used as an additional layer of security for your users (e.g. Authentication App, FingerPrint, Windows Hello, etc).  Per definition, it is called multifactor factor or passwordless as it is used as first and second authentication and a password is not necessary. In the UI we generalize it as passwordless or passkey.",
        "operationId": "ManagementService_ListLoginPolicyMultiFactors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1ListLoginPolicyMultiFactorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Login Settings",
          "Authentication Methods"
        ]
      }
    },
    "/policies/login/multi_factors": {
      "post": {
        "summary": "Add Multi-Factor (MFA)",
        "description": "Add a multi-factor (MFA) to the login settings of the instance. It affects all organizations, without custom login settings. Authentication factors are used as an additional layer of security for your users (e.g. Authentication App, FingerPrint, Windows Hello, etc).  Per definition, it is called multi-factor factor or passwordless as it is used as first and second authentication and a password is not necessary. In the UI we generalize it as passwordless or passkey.",
        "operationId": "AdminService_AddMultiFactorToLoginPolicy",
        "responses": {
          "200": {
            "description": "multi-factor added to default login policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddMultiFactorToLoginPolicyResponse"
            }
          },
          "400": {
            "description": "invalid multi-factor type",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddMultiFactorToLoginPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Login Settings",
          "Authentication Methods"
        ]
      }
    },
    "/policies/login/multi_factors/{type}": {
      "delete": {
        "summary": "Remove Multi-factor (MFA)",
        "description": "Remove a multi-factor (MFA) from the login settings of the organization. It affects all organizations, without custom login settings. Authentication factors are used as an additional layer of security for your users (e.g. Authentication App, FingerPrint, Windows Hello, etc).  Per definition, it is called multi-factor factor or passwordless as it is used as first and second authentication and a password is not necessary. In the UI we generalize it as passwordless or passkey.",
        "operationId": "ManagementService_RemoveMultiFactorFromLoginPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1RemoveMultiFactorFromLoginPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MULTI_FACTOR_TYPE_UNSPECIFIED",
              "MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION"
            ]
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Login Settings",
          "Authentication Methods"
        ]
      }
    },
    "/policies/password/complexity": {
      "get": {
        "summary": "Get Password Complexity Settings",
        "description": "Returns the password complexity settings configured on the instance. It affects all organizations, that do not have a custom setting configured. The settings specify how a password should look (characters, length, etc.)",
        "operationId": "AdminService_GetPasswordComplexityPolicy",
        "responses": {
          "200": {
            "description": "default password complexity policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetPasswordComplexityPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Password Settings"
        ]
      },
      "delete": {
        "summary": "Reset Password Complexity Settings to Default",
        "description": "Remove the password complexity settings of the organization and therefore use the default settings on the instance. The settings specify how a password should look (characters, length, etc.)",
        "operationId": "ManagementService_ResetPasswordComplexityPolicyToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResetPasswordComplexityPolicyToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Password Settings"
        ]
      },
      "post": {
        "summary": "Create Password Complexity Settings",
        "description": "Create new password complexity settings for the organization. This will overwrite the settings of the instance for this organization. The settings specify how a password should look (characters, length, etc.)",
        "operationId": "ManagementService_AddCustomPasswordComplexityPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddCustomPasswordComplexityPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddCustomPasswordComplexityPolicyRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Password Settings"
        ]
      },
      "put": {
        "summary": "Update Password Complexity Settings",
        "description": "Updates the default password complexity settings configured on the instance. It affects all organizations, that do not have a custom setting configured. The settings specify how a password should look (characters, length, etc.)",
        "operationId": "AdminService_UpdatePasswordComplexityPolicy",
        "responses": {
          "200": {
            "description": "default password complexity policy updated",
            "schema": {
              "$ref": "#/definitions/v1UpdatePasswordComplexityPolicyResponse"
            }
          },
          "400": {
            "description": "invalid argument",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePasswordComplexityPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Password Settings"
        ]
      }
    },
    "/policies/default/password/complexity": {
      "get": {
        "summary": "Get Default Password Complexity Settings",
        "description": "Returns the default password complexity settings configured on the instance. The settings specify how a password should look (characters, length, etc.)",
        "operationId": "ManagementService_GetDefaultPasswordComplexityPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultPasswordComplexityPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Password Settings"
        ]
      }
    },
    "/policies/password/age": {
      "get": {
        "summary": "Get Password Age Settings",
        "description": "Returns the password age settings configured on the instance. It affects all organizations, that do not have a custom setting configured. The settings specify the expiry of password, after which a user is forced to change it on the next login.",
        "operationId": "AdminService_GetPasswordAgePolicy",
        "responses": {
          "200": {
            "description": "default password age policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetPasswordAgePolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Password Settings"
        ]
      },
      "delete": {
        "summary": "Reset Password Age Settings to Default",
        "description": "Remove the password age settings of the organization and therefore use the default settings on the instance.. The settings specify the expiry of password, after which a user is forced to change it on the next login.",
        "operationId": "ManagementService_ResetPasswordAgePolicyToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResetPasswordAgePolicyToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Password Settings"
        ]
      },
      "post": {
        "summary": "Add Password Age Settings",
        "description": "Create new password age settings for the organization. This will overwrite the settings of the instance for this organization. The settings specify the expiry of password, after which a user is forced to change it on the next login.",
        "operationId": "ManagementService_AddCustomPasswordAgePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddCustomPasswordAgePolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddCustomPasswordAgePolicyRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Password Settings"
        ]
      },
      "put": {
        "summary": "Update Password Age Settings",
        "description": "Updates the default password complexity settings configured on the instance. It affects all organizations, that do not have a custom setting configured. The settings specify the expiry of password, after which a user is forced to change it on the next login.",
        "operationId": "AdminService_UpdatePasswordAgePolicy",
        "responses": {
          "200": {
            "description": "default password age policy updated",
            "schema": {
              "$ref": "#/definitions/v1UpdatePasswordAgePolicyResponse"
            }
          },
          "400": {
            "description": "invalid argument",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePasswordAgePolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Password Settings"
        ]
      }
    },
    "/policies/default/password/age": {
      "get": {
        "summary": "Get Default Password Age Settings",
        "description": "Returns the default password age settings configured on the instance. The settings specify the expiry of password, after which a user is forced to change it on the next login.",
        "operationId": "ManagementService_GetDefaultPasswordAgePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultPasswordAgePolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Password Settings"
        ]
      }
    },
    "/policies/lockout": {
      "get": {
        "summary": "Get Password Lockout Settings",
        "description": "Returns the password lockout settings configured on the instance. It affects all organizations, that do not have a custom setting configured. The settings specify when a user should be locked (e.g how many password attempts). The user has to be unlocked by an administrator afterward.",
        "operationId": "AdminService_GetLockoutPolicy",
        "responses": {
          "200": {
            "description": "default lockout policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetLockoutPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Password Settings"
        ]
      },
      "delete": {
        "summary": "Reset Password Lockout Settings to Default",
        "description": "Remove the password lockout settings from the organization. The settings configured on the instance will trigger afterward for this organization. The settings specify when a user should be locked (e.g how many password attempts). The user has to be unlocked by an administrator afterward.",
        "operationId": "ManagementService_ResetLockoutPolicyToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResetLockoutPolicyToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Password Settings"
        ]
      },
      "post": {
        "summary": "Add Password Lockout Settings",
        "description": "Add new password lockout settings on the organization level. This will overwrite the settings set on the instance for this organization. The settings specify when a user should be locked (e.g how many password attempts). The user has to be unlocked by an administrator afterward.",
        "operationId": "ManagementService_AddCustomLockoutPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddCustomLockoutPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddCustomLockoutPolicyRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Password Settings"
        ]
      },
      "put": {
        "summary": "Update Password Lockout Settings",
        "description": "Update the password lockout settings configured on the organization. The settings specify when a user should be locked (e.g how many password attempts). The user has to be unlocked by an administrator afterward.",
        "operationId": "ManagementService_UpdateCustomLockoutPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateCustomLockoutPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateCustomLockoutPolicyRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Password Settings"
        ]
      }
    },
    "/policies/default/lockout": {
      "get": {
        "summary": "Get Default Password Lockout Settings",
        "description": "Returns the default password lockout settings configured on the instance. The settings specify when a user should be locked (e.g how many password attempts). The user has to be unlocked by an administrator afterward.",
        "operationId": "ManagementService_GetDefaultLockoutPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultLockoutPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Password Settings"
        ]
      }
    },
    "/policies/privacy": {
      "get": {
        "summary": "Get Privacy Policy",
        "description": "Returns the privacy settings that should be used for the authenticated user. It is set either on an instance or organization level. This policy defines the TOS and terms of service links.",
        "operationId": "AuthService_GetMyPrivacyPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMyPrivacyPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Policies"
        ]
      },
      "delete": {
        "summary": "Reset Privacy Settings to Default",
        "description": "The settings from the organization will be removed and therefore the default settings configured on the instance will be triggered. The settings specify the terms and services, privacy policy, etc. A registering user has to accept the configured settings.",
        "operationId": "ManagementService_ResetPrivacyPolicyToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResetPrivacyPolicyToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Privacy Settings"
        ]
      },
      "post": {
        "summary": "Add Privacy Settings",
        "description": "Add a custom privacy policy for the organization. The configuration of the instance will be overwritten. Variable {{.Lang}} can be set to have different links based on the language. Make sure to identify which settings should be triggered by sending the organization scope. The settings specify the terms and services, privacy policy, etc. A registering user has to accept the configured settings.",
        "operationId": "ManagementService_AddCustomPrivacyPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddCustomPrivacyPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddCustomPrivacyPolicyRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Privacy Settings"
        ]
      },
      "put": {
        "summary": "Update Privacy Settings",
        "description": "Update the privacy settings configured on the instance. It affects all organizations, that do not have a custom setting configured. The settings specify the terms and services, privacy policy, etc. A registering user has to accept the configured settings. Variable {{.Lang}} can be set to have different links based on the language.",
        "operationId": "AdminService_UpdatePrivacyPolicy",
        "responses": {
          "200": {
            "description": "default privacy policy updated",
            "schema": {
              "$ref": "#/definitions/v1UpdatePrivacyPolicyResponse"
            }
          },
          "400": {
            "description": "invalid argument",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePrivacyPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Privacy Settings"
        ]
      }
    },
    "/policies/default/privacy": {
      "get": {
        "summary": "Get Default Privacy Settings",
        "description": "Returns the default privacy settings configured on the instance. The settings specify the terms and services, privacy policy, etc. A registering user has to accept the configured settings.",
        "operationId": "ManagementService_GetDefaultPrivacyPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultPrivacyPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Privacy Settings"
        ]
      }
    },
    "/policies/notification": {
      "get": {
        "summary": "Return Notification Settings",
        "description": "Return the notification settings configured on the instance. It affects all organizations, that do not have a custom setting configured. The settings specify if notifications should be sent to the users on specific triggers (e.g password changed).",
        "operationId": "AdminService_GetNotificationPolicy",
        "responses": {
          "200": {
            "description": "default notification policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetNotificationPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Notification Settings"
        ]
      },
      "delete": {
        "summary": "Reset Notification Settings to Default",
        "description": "The settings configured will be removed from the organization. Therefore the settings from the instance will trigger for the users of this organization afterward. The settings specify if notifications should be sent to the users on specific triggers (e.g password changed).",
        "operationId": "ManagementService_ResetNotificationPolicyToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResetNotificationPolicyToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Notification Settings"
        ]
      },
      "post": {
        "summary": "Add Notification Settings",
        "description": "Add new notification settings configured on the instance. It affects all organizations, that do not have a custom setting configured. The settings specify if notifications should be sent to the users on specific triggers (e.g password changed).",
        "operationId": "AdminService_AddNotificationPolicy",
        "responses": {
          "200": {
            "description": "default notification policy",
            "schema": {
              "$ref": "#/definitions/v1AddNotificationPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddNotificationPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Notification Settings"
        ]
      },
      "put": {
        "summary": "Update Notification Settings",
        "description": "Update the notification settings configured on the instance. It affects all organizations, that do not have a custom setting configured. The settings specify if notifications should be sent to the users on specific triggers (e.g password changed).",
        "operationId": "AdminService_UpdateNotificationPolicy",
        "responses": {
          "200": {
            "description": "default notification policy updated",
            "schema": {
              "$ref": "#/definitions/v1UpdateNotificationPolicyResponse"
            }
          },
          "400": {
            "description": "invalid argument",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateNotificationPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Notification Settings"
        ]
      }
    },
    "/policies/default/notification": {
      "get": {
        "summary": "Get Default Notification Settings",
        "description": "Return the default notification settings configured on the instance. The settings specify if notifications should be sent to the users on specific triggers (e.g password changed).",
        "operationId": "ManagementService_GetDefaultNotificationPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultNotificationPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Notification Settings"
        ]
      }
    },
    "/policies/label": {
      "get": {
        "summary": "Get Label Policy",
        "description": "Returns the label settings that should be used for the authenticated user. It is set either on an instance or organization level. This policy defines the branding, colors, fonts, images, etc.",
        "operationId": "AuthService_GetMyLabelPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMyLabelPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Policies"
        ]
      },
      "delete": {
        "summary": "Reset Labeling/Branding Settings",
        "description": "Removes the label policy/branding of the organization and therefore the default settings from the instance will be shown to the users.",
        "operationId": "ManagementService_ResetLabelPolicyToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResetLabelPolicyToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Branding"
        ]
      },
      "post": {
        "summary": "Create Labeling/Branding Settings",
        "description": "Create the private labeling/branding configured on the organization. Make sure to activate it so it will be shown to the users. The settings will trigger if the organization has been identified (organization scope, user). Define what colors, fonts, and logo should be used for the Login/Register UI, E-Mails and Console.",
        "operationId": "ManagementService_AddCustomLabelPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddCustomLabelPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddCustomLabelPolicyRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Branding"
        ]
      },
      "put": {
        "summary": "Update Labeling/Branding Settings",
        "description": "Update the preview private labeling/branding configured on the instance level. It affects all organizations, that don't overwrite the settings. The preview is used to show you how it will look like, make sure to activate it as soon as you are happy with the configuration. Define what colors, fonts, and logo should be used for the Login/Register UI, E-Mails and Console.",
        "operationId": "AdminService_UpdateLabelPolicy",
        "responses": {
          "200": {
            "description": "default label policy updated",
            "schema": {
              "$ref": "#/definitions/v1UpdateLabelPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateLabelPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Branding"
        ]
      }
    },
    "/policies/label/_preview": {
      "get": {
        "summary": "Get Preview Private Labeling/Branding Settings",
        "description": "Returns the preview private labeling/branding configured on the instance level. The preview is used to show you how it will look like, and not activate it directly for your users. In the future, it should be possible to send a preview mail and have a look at the preview login. The settings will trigger if the organization has not overwritten the settings or if no specific organization is called on the login UI. Define what colors, fonts, and logo should be used for the Login/Register UI, E-Mails and Console.",
        "operationId": "AdminService_GetPreviewLabelPolicy",
        "responses": {
          "200": {
            "description": "default label policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetPreviewLabelPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Branding"
        ]
      }
    },
    "/policies/default/label": {
      "get": {
        "summary": "Get Default Private Labeling/Branding Settings",
        "description": "Returns the default private labeling/branding configured on the instance. Defines what colors, fonts, and logo should be used for the Login/Register UI, E-Mails and Console.",
        "operationId": "ManagementService_GetDefaultLabelPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultLabelPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Branding"
        ]
      }
    },
    "/policies/label/_activate": {
      "post": {
        "summary": "Activate Labeling/Branding Settings",
        "description": "Activates the preview private labeling/branding configured on the instance level. It will be shown to the users afterward. It affects all organizations, that don't overwrite the settings. Defines what colors, fonts, and logo should be used for the Login/Register UI, E-Mails and Console.",
        "operationId": "AdminService_ActivateLabelPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivateLabelPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ActivateLabelPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Branding"
        ]
      }
    },
    "/policies/label/logo": {
      "delete": {
        "summary": "Remove Logo Light",
        "description": "Removes the logo of the light theme from the configured label policy/branding of the instance. It will only be shown on the preview. Make sure to activate your changes afterward.",
        "operationId": "AdminService_RemoveLabelPolicyLogo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveLabelPolicyLogoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Branding"
        ]
      }
    },
    "/policies/label/logo_dark": {
      "delete": {
        "summary": "Remove Logo Dark",
        "description": "Removes the logo of the dark theme from the configured label policy/branding of the instance. It will only be shown on the preview. Make sure to activate your changes afterward.",
        "operationId": "AdminService_RemoveLabelPolicyLogoDark",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveLabelPolicyLogoDarkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Branding"
        ]
      }
    },
    "/policies/label/icon": {
      "delete": {
        "summary": "Remove Icon Light",
        "description": "Removes the icon of the light theme from the configured label policy/branding of the instance. It will only be shown on the preview. Make sure to activate your changes afterward.",
        "operationId": "AdminService_RemoveLabelPolicyIcon",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveLabelPolicyIconResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Branding"
        ]
      }
    },
    "/policies/label/icon_dark": {
      "delete": {
        "summary": "Remove Icon Dark",
        "description": "Removes the icon of the dark theme from the configured label policy/branding of the instance. It will only be shown on the preview. Make sure to activate your changes afterward.",
        "operationId": "AdminService_RemoveLabelPolicyIconDark",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveLabelPolicyIconDarkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Branding"
        ]
      }
    },
    "/policies/label/font": {
      "delete": {
        "summary": "Remove Font",
        "description": "Removes the font from the configured label policy/branding of the instance. It will only be shown on the preview. Make sure to activate your changes afterward.",
        "operationId": "AdminService_RemoveLabelPolicyFont",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveLabelPolicyFontResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Branding"
        ]
      }
    },
    "/text/message/init/{language}": {
      "get": {
        "summary": "Get Custom Init Message Text",
        "description": "Get the custom text of the initialize-user message/email that is set on the organization. The email is sent when a user is created and has either no password or a non-verified email address.",
        "operationId": "ManagementService_GetCustomInitMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetCustomInitMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Init Message Text to Default",
        "description": "Removes the custom text of the initialize-user message/email that is overwritten on the organization and triggers the default text instead.",
        "operationId": "ManagementService_ResetCustomInitMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1ResetCustomInitMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Custom Init Message Text",
        "description": "Set the custom text of the initialize-user message/email the default texts will be overwritten for the organization. The email is sent when a user is created and has either no password or a non-verified email address. The Following Variables can be used: {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "ManagementService_SetCustomInitMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetCustomInitMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetCustomInitMessageTextBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/init/{language}": {
      "get": {
        "summary": "Get Default Init Message Text",
        "description": "Get the default text of the initialize-user message/email that is set either on the instance or in the filesystem of ZITADEL. The email is sent when a user is created and has either no password or a non-verified email address.",
        "operationId": "ManagementService_GetDefaultInitMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetDefaultInitMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/passwordreset/{language}": {
      "get": {
        "summary": "Get Custom Password Reset Message Text",
        "description": "Get the custom text of the password reset message/email that is set on the organization. The email is sent when a user triggers the password forgot-request.",
        "operationId": "ManagementService_GetCustomPasswordResetMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetCustomPasswordResetMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Password Reset Message Text to Default",
        "description": "Removes the custom text of the password reset user message/email and the default will trigger afterward.",
        "operationId": "ManagementService_ResetCustomPasswordResetMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1ResetCustomPasswordResetMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Custom Password Reset Message Text",
        "description": "Set the custom text of the password reset user message/email for the organization. The email is sent when a user triggers the password forgot-request. The Following Variables can be used: {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "ManagementService_SetCustomPasswordResetMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetCustomPasswordResetMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetCustomPasswordResetMessageTextBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/passwordreset/{language}": {
      "get": {
        "summary": "Get Default Password Reset Message Text",
        "description": "Get the default text of the password reset message/email that is set on the instance or in the files of ZITADEL. The email is sent when a user triggers the password forgot-request.",
        "operationId": "ManagementService_GetDefaultPasswordResetMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetDefaultPasswordResetMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/verifyemail/{language}": {
      "get": {
        "summary": "Get Custom Verify Email Message Text",
        "description": "Get the custom text of the verify-email message/email that is set on the organization. The email is sent when a user adds a new non-verified email address.",
        "operationId": "ManagementService_GetCustomVerifyEmailMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetCustomVerifyEmailMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Verify Email Message Text to Default",
        "description": "Removes the custom text of the email verify message/email and therefore the default settings will trigger afterward.",
        "operationId": "ManagementService_ResetCustomVerifyEmailMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1ResetCustomVerifyEmailMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Default Verify Email Message Text",
        "description": "Set the custom text of the verify-email user message/email for the organization. The email is sent when a user adds a new nonverified email address. The Following Variables can be used: {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "ManagementService_SetCustomVerifyEmailMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetCustomVerifyEmailMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetCustomVerifyEmailMessageTextBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/verifyemail/{language}": {
      "get": {
        "summary": "Get Default Verify Email Message Text",
        "description": "Get the default text of the verify-email message/email that is set on the instance or as translation files in ZITADEL itself. The email is sent when a user adds a new non-verified email address.",
        "operationId": "ManagementService_GetDefaultVerifyEmailMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetDefaultVerifyEmailMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/verifyphone/{language}": {
      "get": {
        "summary": "Get Custom Verify Phone Message Text",
        "description": "Get the custom text of the verify-phone message that is set on the organization. The message is sent when a user adds a new non-verified phone number and a notification provider is configured.",
        "operationId": "ManagementService_GetCustomVerifyPhoneMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetCustomVerifyPhoneMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Verify Phone Message Text to Default",
        "description": "Removes the custom text of the verify-phone message from the organization and therefore the default texts will trigger for the users afterward.",
        "operationId": "ManagementService_ResetCustomVerifyPhoneMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1ResetCustomVerifyPhoneMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Custom Verify Phone Reset Message Text",
        "description": "Set the custom text of the verify-phone message for the organization. The message is sent when a user adds a new non-verified phone number and a notification provider is configured. The Following Variables can be used: {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "ManagementService_SetCustomVerifyPhoneMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetCustomVerifyPhoneMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetCustomVerifyPhoneMessageTextBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/verifyphone/{language}": {
      "get": {
        "summary": "Get Default Verify Phone Message Text",
        "description": "Get the default text of the verify-phone message that is set on the instance or as translation files in ZITADEL itself. The message is sent when a user adds a new non-verified phone number and a notification provider is configured.",
        "operationId": "ManagementService_GetDefaultVerifyPhoneMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetDefaultVerifyPhoneMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/verifysmsotp/{language}": {
      "get": {
        "summary": "Get Custom Verify SMS OTP Message Text",
        "description": "Get the custom text of the verify SMS OTP message that is set on the organization. The message is sent when an SMS One-time password should be verified and a notification provider is configured.",
        "operationId": "ManagementService_GetCustomVerifySMSOTPMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetCustomVerifySMSOTPMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Verify SMS OTP Message Text to Default",
        "description": "Removes the custom text of the verify SMS OTP message from the organization and therefore the default texts will trigger for the users afterward.",
        "operationId": "ManagementService_ResetCustomVerifySMSOTPMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1ResetCustomVerifySMSOTPMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Custom Verify SMS OTP Reset Message Text",
        "description": "Set the custom text of the verify SMS OTP message for the organization. The message is sent when an SMS One-time password should be verified and a notification provider is configured. The Following Variables can be used: {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "ManagementService_SetCustomVerifySMSOTPMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetCustomVerifySMSOTPMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetCustomVerifySMSOTPMessageTextBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/verifysmsotp/{language}": {
      "get": {
        "summary": "Get Default Verify SMS OTP Message Text",
        "description": "Get the default text of the verify SMS OTP message that is set on the instance or as translation files in ZITADEL itself. The message is sent when an SMS One-time password should be verified and a notification provider is configured.",
        "operationId": "ManagementService_GetDefaultVerifySMSOTPMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetDefaultVerifySMSOTPMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/verifyemailotp/{language}": {
      "get": {
        "summary": "Get Custom Verify Email OTP Message Text",
        "description": "Get the custom text of the verify Email OTP message that is set on the organization. The message is sent when an Email One-time password should be verified and a notification provider is configured.",
        "operationId": "ManagementService_GetCustomVerifyEmailOTPMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetCustomVerifyEmailOTPMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Verify Email OTP Message Text to Default",
        "description": "Removes the custom text of the verify Email OTP message from the organization and therefore the default texts will trigger for the users afterward.",
        "operationId": "ManagementService_ResetCustomVerifyEmailOTPMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1ResetCustomVerifyEmailOTPMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Custom Verify Email OTP Reset Message Text",
        "description": "Set the custom text of the verify Email OTP message for the organization. The message is sent when an Email One-time password should be verified and a notification provider is configured. The Following Variables can be used: {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "ManagementService_SetCustomVerifyEmailOTPMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetCustomVerifyEmailOTPMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetCustomVerifyEmailOTPMessageTextBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/verifyemailotp/{language}": {
      "get": {
        "summary": "Get Default Verify Email OTP Message Text",
        "description": "Get the default text of the verify Email OTP message that is set on the instance or as translation files in ZITADEL itself. The message is sent when an Email One-time password should be verified and a notification provider is configured.",
        "operationId": "ManagementService_GetDefaultVerifyEmailOTPMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetDefaultVerifyEmailOTPMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/domainclaimed/{language}": {
      "get": {
        "summary": "Get Custom Domain Claimed Message Text",
        "description": "Get the custom text of the domain claimed message/email that is configured on the organization. The message is sent when an organization claims a domain and a user of this domain exists in another organization.",
        "operationId": "ManagementService_GetCustomDomainClaimedMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetCustomDomainClaimedMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Domain Claimed Message Text to Default",
        "description": "Removes the custom text of the domain claimed message that is configured on the organization and triggers the text from the instance or translation files in ZITADEL.",
        "operationId": "ManagementService_ResetCustomDomainClaimedMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1ResetCustomDomainClaimedMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Custom Domain Claimed Message Text",
        "description": "Set the custom text of the domain claimed message/email for the organization. The message/email is sent when an organization claims a domain and a user of this domain exists in another organization. The Following Variables can be used: {{.Domain}} {{.TempUsername}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "ManagementService_SetCustomDomainClaimedMessageCustomText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetCustomDomainClaimedMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetCustomDomainClaimedMessageCustomTextBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/domainclaimed/{language}": {
      "get": {
        "summary": "Get Default Domain Claimed Message Text",
        "description": "Get the default text of the domain claimed message/email that is set on the instance or as translation files in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when an organization claims a domain and a user of this domain exists in another organization.",
        "operationId": "ManagementService_GetDefaultDomainClaimedMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetDefaultDomainClaimedMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/passwordless_registration/{language}": {
      "get": {
        "summary": "Get Custom Passwordless Registration Message Text",
        "description": "Get the custom text of the passwordless/passkey registration message/email that is configured on the organization. The message is sent when a user requests passwordless/passkey registration as email, to be able to configure on another device.",
        "operationId": "ManagementService_GetCustomPasswordlessRegistrationMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetCustomPasswordlessRegistrationMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Passwordless Registration Message Text to Default",
        "description": "Removes the custom text of the passwordless/passkey registration from the organization and therefore the default configuration from the instance or translation files will be triggered for the users.",
        "operationId": "ManagementService_ResetCustomPasswordlessRegistrationMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Default Passwordless Registration Message Text",
        "description": "Set the custom text of the passwordless/passkey registration message/email for the organization. The message/email is sent when a user requests passwordless/passkey registration as email, to be able to configure on another device.  The Following Variables can be used: {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "ManagementService_SetCustomPasswordlessRegistrationMessageCustomText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetCustomPasswordlessRegistrationMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetCustomPasswordlessRegistrationMessageCustomTextBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/passwordless_registration/{language}": {
      "get": {
        "summary": "Get Default Passwordless Registration Message Text",
        "description": "Get the default text of the domain claimed message/email that is configured on the instance or as translation files in ZITADEL. The message is sent when a user requests passwordless/passkey registration as email, to be able to configure on another device.",
        "operationId": "ManagementService_GetDefaultPasswordlessRegistrationMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetDefaultPasswordlessRegistrationMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/password_change/{language}": {
      "get": {
        "summary": "Get Custom Password Change Message Text",
        "description": "Get the custom text of the password-changed message/email that is configured on the organization. The message is sent when the password of a user has been changed.",
        "operationId": "ManagementService_GetCustomPasswordChangeMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetCustomPasswordChangeMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Password Changed Message Text to Default",
        "description": "Removes the custom text of the password-changed message from the organization and therefore the default texts from the instance or translation files will be triggered for the users.",
        "operationId": "ManagementService_ResetCustomPasswordChangeMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1ResetCustomPasswordChangeMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Custom Password Changed Message Text",
        "description": "Set the custom text of the password-changed message/email for the organization. The message/email is sent when the password of a user has been changed.  The Following Variables can be used: {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "ManagementService_SetCustomPasswordChangeMessageCustomText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetCustomPasswordChangeMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetCustomPasswordChangeMessageCustomTextBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/password_change/{language}": {
      "get": {
        "summary": "Get Default Password Change Message Text",
        "description": "Get the default text of the password-changed message/email that is configured on the instance or as translation files in ZITADEL itself. The message is sent when the password of a user has been changed.",
        "operationId": "ManagementService_GetDefaultPasswordChangeMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetDefaultPasswordChangeMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/invite_user/{language}": {
      "get": {
        "summary": "Get Custom Invite User Message Text",
        "description": "Get the custom text of the password-changed message/email that is configured on the organization. The message is sent when an invite code email is requested.",
        "operationId": "ManagementService_GetCustomInviteUserMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetCustomInviteUserMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Invite User Message Text to Default",
        "description": "Removes the custom text of the invite user message from the organization and therefore the default texts from the instance or translation files will be triggered for the users.",
        "operationId": "ManagementService_ResetCustomInviteUserMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1ResetCustomInviteUserMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Custom Invite User Message Text",
        "description": "Set the custom text of the invite user message/email for the organization. The message is sent when an invite code email is requested. The Following Variables can be used: {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}} {{.ApplicationName}}",
        "operationId": "ManagementService_SetCustomInviteUserMessageCustomText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetCustomInviteUserMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetCustomInviteUserMessageCustomTextBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/invite_user/{language}": {
      "get": {
        "summary": "Get Default Invite User Message Text",
        "description": "Get the default text of the invite user message/email that is configured on the instance or as translation files in ZITADEL itself. The message is sent when an invite code email is requested.",
        "operationId": "ManagementService_GetDefaultInviteUserMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetDefaultInviteUserMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/login/{language}": {
      "get": {
        "summary": "Get Custom Login Text",
        "description": "Get the custom texts for the login and register UI of ZITADEL, which are configured on the organization. The text from the organization will trigger as soon as the organization is identified (organization scope or user).",
        "operationId": "ManagementService_GetCustomLoginTexts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetCustomLoginTextsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Login Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Login Text to Default",
        "description": "Removes the custom texts for the login and register UI from the organization and therefore the configuration of the instance or the translation files in ZITADEL itself will trigger.",
        "operationId": "ManagementService_ResetCustomLoginTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1ResetCustomLoginTextsToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Login Texts"
        ]
      },
      "put": {
        "summary": "Set Default Login Text",
        "description": "Set the custom texts for the login and register UI of ZITADEL for the organization.",
        "operationId": "ManagementService_SetCustomLoginText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1SetCustomLoginTextsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceSetCustomLoginTextBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Login Texts"
        ]
      }
    },
    "/text/default/login/{language}": {
      "get": {
        "summary": "Get Default Login Text",
        "description": "Get the default texts for the login and register UI of ZITADEL, which are configured on the instance or as translation files in ZITADEL itself. The text will be shown to the users of all organizations, that do not have a custom text configured. Or if the organization context is not given.",
        "operationId": "ManagementService_GetDefaultLoginTexts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetDefaultLoginTextsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Login Texts"
        ]
      }
    },
    "/idps/{id}": {
      "get": {
        "summary": "Deprecated: Get Identity Provider (IDP) by ID",
        "description": "Returns an identity provider (social/enterprise login) by its ID e.g Google, AzureAD, etc that is configured on the organization.",
        "operationId": "ManagementService_GetOrgIDPByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrgIDPByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/_search": {
      "post": {
        "summary": "Deprecated: Search Identity Providers (IDP)",
        "description": "Returns a list of identity providers (social/enterprise login) configured on an instance level. e.g Google, AzureAD, etc.",
        "operationId": "AdminService_ListIDPs",
        "responses": {
          "200": {
            "description": "idps found",
            "schema": {
              "$ref": "#/definitions/v1ListIDPsResponse"
            }
          },
          "400": {
            "description": "invalid query",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListIDPsRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/oidc": {
      "post": {
        "summary": "Deprecated: Add OIDC Identity Provider (IDP)",
        "description": "Create a new identity provider configuration to enable your users to log in with social/enterprise login. The provider has to be OIDC compliant.",
        "operationId": "AdminService_AddOIDCIDP",
        "responses": {
          "200": {
            "description": "idp created",
            "schema": {
              "$ref": "#/definitions/v1AddOIDCIDPResponse"
            }
          },
          "400": {
            "description": "invalid argument",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddOIDCIDPRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/jwt": {
      "post": {
        "summary": "Deprecated: Add JWT Identity Provider (IDP)",
        "description": "Create a new identity provider configuration to enable your users to log in with social/enterprise login. JSON Web Token Identity Provider (JWT IDP) gives you the possibility to use an (existing) JWT as a federated identity. You have to provide an endpoint where ZITADEL can get the existing JWT token.",
        "operationId": "AdminService_AddJWTIDP",
        "responses": {
          "200": {
            "description": "idp created",
            "schema": {
              "$ref": "#/definitions/v1AddJWTIDPResponse"
            }
          },
          "400": {
            "description": "invalid argument",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddJWTIDPRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/{idpId}/_deactivate": {
      "post": {
        "summary": "Deprecated: Deactivate Identity Provider (IDP)",
        "description": "Sets the state of the provider to inactive. It can only be called for the provider with the state active. Users will not be able to log in with the given provider afterward. It might cause troubles if it is the only authentication method of the user.",
        "operationId": "ManagementService_DeactivateOrgIDP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeactivateOrgIDPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceDeactivateOrgIDPBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/{idpId}/_reactivate": {
      "post": {
        "summary": "Reactivate Identity Provider (IDP)",
        "description": "Deprecated: Sets the state of the provider to active. It can only be called for providers with the state inactive. Users will not be able to log in again with the given provider.",
        "operationId": "ManagementService_ReactivateOrgIDP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReactivateOrgIDPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceReactivateOrgIDPBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/{idpId}": {
      "delete": {
        "summary": "Remove Identity Provider (IDP)",
        "description": "Removes the identity provider permanently. All links to the given IDP on users will be deleted as well. They will not be able to log in with the provider afterward. If it is their only authentication possibility it might cause problems.",
        "operationId": "ManagementService_RemoveOrgIDP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveOrgIDPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      },
      "put": {
        "summary": "Deprecated: Update Identity Provider (IDP)",
        "description": "Update an existing IDP. All fields are updated. If you do not send a value in a field, it will be empty afterward.",
        "operationId": "ManagementService_UpdateOrgIDP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateOrgIDPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateOrgIDPBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/{idpId}/oidc_config": {
      "put": {
        "summary": "Deprecated: Update OIDC Identity Provider (IDP)",
        "description": "Update the OIDC-specific configuration of an identity provider. All fields will be updated. If a field has no value it will be empty afterward.",
        "operationId": "ManagementService_UpdateOrgIDPOIDCConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateOrgIDPOIDCConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateOrgIDPOIDCConfigBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/{idpId}/jwt_config": {
      "put": {
        "summary": "Deprecated: Update JWT Identity Provider (IDP)",
        "description": "Update the JWT-specific configuration of an identity provider. All fields will be updated. If a field has no value it will be empty afterward.",
        "operationId": "ManagementService_UpdateOrgIDPJWTConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateOrgIDPJWTConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateOrgIDPJWTConfigBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/templates/_search": {
      "post": {
        "summary": "List Identity Providers",
        "description": "Returns a list of identity providers (social/enterprise login) configured on an instance level. e.g Google, AzureAD, etc.",
        "operationId": "AdminService_ListProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ListProvidersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ListProvidersRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/templates/{id}": {
      "get": {
        "summary": "Get Identity Provider By ID",
        "operationId": "ManagementService_GetProviderByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1GetProviderByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      },
      "delete": {
        "summary": "Delete Identity Provider",
        "operationId": "ManagementService_DeleteProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1DeleteProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/oauth": {
      "post": {
        "summary": "Add Generic OAuth Identity Provider",
        "operationId": "AdminService_AddGenericOAuthProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGenericOAuthProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGenericOAuthProviderRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/oauth/{id}": {
      "put": {
        "summary": "Update Generic OAuth Identity Provider",
        "operationId": "ManagementService_UpdateGenericOAuthProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1UpdateGenericOAuthProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceUpdateGenericOAuthProviderBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/generic_oidc": {
      "post": {
        "summary": "Add Generic OIDC Identity Provider",
        "operationId": "AdminService_AddGenericOIDCProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGenericOIDCProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGenericOIDCProviderRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/generic_oidc/{id}": {
      "put": {
        "summary": "Update Generic OIDC Identity Provider",
        "operationId": "ManagementService_UpdateGenericOIDCProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1UpdateGenericOIDCProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceUpdateGenericOIDCProviderBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/generic_oidc/{id}/_migrate": {
      "post": {
        "summary": "Migrate Generic OIDC Identity Provider",
        "operationId": "ManagementService_MigrateGenericOIDCProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1MigrateGenericOIDCProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceMigrateGenericOIDCProviderBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/generic_jwt": {
      "post": {
        "summary": "Add JWT Identity Provider",
        "operationId": "AdminService_AddJWTProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddJWTProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddJWTProviderRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/generic_jwt/{id}": {
      "put": {
        "summary": "Update JWT Identity Provider",
        "operationId": "ManagementService_UpdateJWTProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1UpdateJWTProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceUpdateJWTProviderBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/azure": {
      "post": {
        "summary": "Add AzureAD Identity Provider",
        "operationId": "AdminService_AddAzureADProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddAzureADProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddAzureADProviderRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/azure/{id}": {
      "put": {
        "summary": "Update Azure AD Identity Provider",
        "operationId": "ManagementService_UpdateAzureADProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1UpdateAzureADProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceUpdateAzureADProviderBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/github": {
      "post": {
        "summary": "Add GitHub Identity Provider",
        "operationId": "AdminService_AddGitHubProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGitHubProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGitHubProviderRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/github/{id}": {
      "put": {
        "summary": "Update GitHub Identity Provider",
        "operationId": "ManagementService_UpdateGitHubProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1UpdateGitHubProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceUpdateGitHubProviderBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/github_es": {
      "post": {
        "summary": "Add GitHub Enterprise Identity Provider",
        "operationId": "AdminService_AddGitHubEnterpriseServerProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGitHubEnterpriseServerProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGitHubEnterpriseServerProviderRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/github_es/{id}": {
      "put": {
        "summary": "Update GitHub Enterprise Identity Provider",
        "operationId": "ManagementService_UpdateGitHubEnterpriseServerProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1UpdateGitHubEnterpriseServerProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceUpdateGitHubEnterpriseServerProviderBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/gitlab": {
      "post": {
        "summary": "Add GitLab Identity Provider",
        "operationId": "AdminService_AddGitLabProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGitLabProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGitLabProviderRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/gitlab/{id}": {
      "post": {
        "summary": "Update GitLab Identity Provider",
        "operationId": "AdminService_UpdateGitLabProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1UpdateGitLabProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceUpdateGitLabProviderBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      },
      "put": {
        "summary": "Update GitLab Identity Provider",
        "operationId": "ManagementService_UpdateGitLabProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1UpdateGitLabProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceUpdateGitLabProviderBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/gitlab_self_hosted": {
      "post": {
        "summary": "Add GitLab Selfhost Identity Provider",
        "operationId": "AdminService_AddGitLabSelfHostedProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGitLabSelfHostedProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGitLabSelfHostedProviderRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/gitlab_self_hosted/{id}": {
      "post": {
        "summary": "Update GitLab Selfhost Identity Provider",
        "operationId": "AdminService_UpdateGitLabSelfHostedProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1UpdateGitLabSelfHostedProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceUpdateGitLabSelfHostedProviderBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      },
      "put": {
        "summary": "Update GitLab Selfhosted Identity Provider",
        "operationId": "ManagementService_UpdateGitLabSelfHostedProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1UpdateGitLabSelfHostedProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceUpdateGitLabSelfHostedProviderBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/google": {
      "post": {
        "summary": "Add Google Identity Provider",
        "operationId": "AdminService_AddGoogleProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGoogleProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddGoogleProviderRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/google/{id}": {
      "put": {
        "summary": "Update Google Identity Provider",
        "operationId": "ManagementService_UpdateGoogleProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1UpdateGoogleProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceUpdateGoogleProviderBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/ldap": {
      "post": {
        "summary": "Add LDAP Identity Provider",
        "operationId": "AdminService_AddLDAPProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddLDAPProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddLDAPProviderRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/ldap/{id}": {
      "put": {
        "summary": "Update LDAP Identity Provider",
        "operationId": "ManagementService_UpdateLDAPProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1UpdateLDAPProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceUpdateLDAPProviderBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/apple": {
      "post": {
        "summary": "Add Apple Identity Provider",
        "operationId": "AdminService_AddAppleProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddAppleProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddAppleProviderRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/apple/{id}": {
      "put": {
        "summary": "Update Apple Identity Provider",
        "operationId": "ManagementService_UpdateAppleProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1UpdateAppleProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceUpdateAppleProviderBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/saml": {
      "post": {
        "summary": "Add SAML Identity Provider",
        "operationId": "AdminService_AddSAMLProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddSAMLProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1AddSAMLProviderRequest"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/saml/{id}": {
      "put": {
        "summary": "Update SAML Identity Provider",
        "operationId": "ManagementService_UpdateSAMLProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1UpdateSAMLProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceUpdateSAMLProviderBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/saml/{id}/_generate_certificate": {
      "post": {
        "summary": "Regenerate SAML Identity Provider Certificate",
        "operationId": "ManagementService_RegenerateSAMLProviderCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelmanagementv1RegenerateSAMLProviderCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ManagementServiceRegenerateSAMLProviderCertificateBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/actions/_search": {
      "post": {
        "summary": "Search Actions",
        "description": "Returns a list of actions matching the query. Actions are custom code written in javascript, that can be run at a specified point/flow/trigger in ZITADEL.",
        "operationId": "ManagementService_ListActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListActionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListActionsRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/actions/{id}": {
      "get": {
        "summary": "Get Action By ID",
        "description": "Returns an action by id. Actions are custom code written in javascript, that can be run at a specified point/flow/trigger in ZITADEL.",
        "operationId": "ManagementService_GetAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetActionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      },
      "delete": {
        "summary": "Delete Action",
        "description": "Remove an existing action. Actions are custom code written in javascript, that can be run at a specified point/flow/trigger in ZITADEL.",
        "operationId": "ManagementService_DeleteAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteActionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceDeleteActionBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      },
      "put": {
        "summary": "Update Action",
        "description": "Update an existing ZITADEL action. Actions are custom code written in javascript, that can be run at a specified point/flow/trigger in ZITADEL.",
        "operationId": "ManagementService_UpdateAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateActionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceUpdateActionBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/actions": {
      "post": {
        "summary": "Create Action",
        "description": "Create a new ZITADEL action. Actions are custom code written in javascript, that can be run at a specified point/flow/trigger in ZITADEL.",
        "operationId": "ManagementService_CreateAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateActionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateActionRequest"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/actions/{id}/_deactivate": {
      "post": {
        "summary": "Deactivate Action",
        "description": "Deactivate an existing action. The action will not be executed if configured in a flow. Actions are custom code written in javascript, that can be run at a specified point/flow/trigger in ZITADEL.",
        "operationId": "ManagementService_DeactivateAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeactivateActionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceDeactivateActionBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/actions/{id}/_reactivate": {
      "post": {
        "summary": "Reactivate Action",
        "description": "Reactivate an existing action that is deactivated. The action will be executed again if configured in a flow. Actions are custom code written in javascript, that can be run at a specified point/flow/trigger in ZITADEL.",
        "operationId": "ManagementService_ReactivateAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReactivateActionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceReactivateActionBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/flows/types/_search": {
      "post": {
        "summary": "Search Flow Types",
        "operationId": "ManagementService_ListFlowTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListFlowTypesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/flows/{type}/triggers/_search": {
      "post": {
        "summary": "List Flow Trigger Types",
        "operationId": "ManagementService_ListFlowTriggerTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListFlowTriggerTypesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/flows/{type}": {
      "get": {
        "summary": "Get Flow",
        "description": "Returns a flow. Flows are the links between an action and a specific point during a user interaction with ZITADEL.",
        "operationId": "ManagementService_GetFlow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetFlowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "description": "id of the flow",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/flows/{type}/_clear": {
      "post": {
        "summary": "Clear Flow",
        "operationId": "ManagementService_ClearFlow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ClearFlowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "description": "id of the flow",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/flows/{flowType}/trigger/{triggerType}": {
      "post": {
        "summary": "Set Trigger Actions",
        "operationId": "ManagementService_SetTriggerActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetTriggerActionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "flowType",
            "description": "id of the flow type.\nFollowing flows are currently allowed:\n- External Authentication: FLOW_TYPE_EXTERNAL_AUTHENTICATION or 1\n- Internal Authentication: 3\n- Complement Token: 2\n- Complement SAML Response: 4",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "triggerType",
            "description": "id of the trigger type.\nFollowing triggers are currently allowed:\n- External Authentication:\n  - Post Authentication: TRIGGER_TYPE_POST_AUTHENTICATION or 1\n  - Pre Creation: TRIGGER_TYPE_PRE_CREATION or 2\n  - Post Creation: TRIGGER_TYPE_POST_CREATION or 3 \n- Internal Authentication:\n  - Post Authentication: TRIGGER_TYPE_POST_AUTHENTICATION or 1\n  - Pre Creation: TRIGGER_TYPE_PRE_CREATION or 2\n  - Post Creation: TRIGGER_TYPE_POST_CREATION or 3 \n- Complement Token:\n  - Pre Userinfo Creation: 4\n  - Pre Access Token Creation: 5\n- Complement SAML Response:\n  - Pre SAML Response Creation: 6",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementServiceSetTriggerActionsBody"
            }
          },
          {
            "name": "x-zitadel-orgid",
            "description": "The default is always the organization of the requesting user. If you like to get users of another organization include the header. Make sure the user has permission to access the requested data.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/languages/allowed": {
      "get": {
        "summary": "Allowed Languages",
        "description": "If the languages are restricted, only those are returned. Else, all supported languages are returned.",
        "operationId": "AdminService_GetAllowedLanguages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAllowedLanguagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Restrictions"
        ]
      }
    },
    "/languages/default/{language}": {
      "put": {
        "summary": "Set Default Languages",
        "description": "Set the language that is used as a fallback/default if the user has configured something that is not provided by ZITADEL.",
        "operationId": "AdminService_SetDefaultLanguage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetDefaultLanguageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "General"
        ]
      }
    },
    "/languages/default": {
      "get": {
        "summary": "Get Default Languages",
        "description": "Returns the language that is used as a fallback/default if the user has configured something that is not provided by ZITADEL.",
        "operationId": "AdminService_GetDefaultLanguage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultLanguageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "General"
        ]
      }
    },
    "/instances/me": {
      "get": {
        "summary": "Get My Instance",
        "description": "Returns the details about the current instance such as the name, version, domains, etc.",
        "operationId": "AdminService_GetMyInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMyInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Instance"
        ]
      }
    },
    "/domains/_search": {
      "post": {
        "summary": "List Instance Domains",
        "description": "Returns a list of domains that are configured for this ZITADEL instance. These domains are the URLs where ZITADEL is running.",
        "operationId": "AdminService_ListInstanceDomains",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListInstanceDomainsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query.offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "query.limit",
            "description": "Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "query.asc",
            "description": "default is descending",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortingColumn",
            "description": "the field the result is sorted",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DOMAIN_FIELD_NAME_UNSPECIFIED",
              "DOMAIN_FIELD_NAME_DOMAIN",
              "DOMAIN_FIELD_NAME_PRIMARY",
              "DOMAIN_FIELD_NAME_GENERATED",
              "DOMAIN_FIELD_NAME_CREATION_DATE"
            ],
            "default": "DOMAIN_FIELD_NAME_UNSPECIFIED"
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/trusted_domains/_search": {
      "post": {
        "summary": "List Instance Trusted Domains",
        "description": "Returns a list of domains that are configured for this ZITADEL instance. These domains are trusted to be used as public hosts.",
        "operationId": "AdminService_ListInstanceTrustedDomains",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListInstanceTrustedDomainsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query.offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "query.limit",
            "description": "Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "query.asc",
            "description": "default is descending",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortingColumn",
            "description": "the field the result is sorted",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DOMAIN_FIELD_NAME_UNSPECIFIED",
              "DOMAIN_FIELD_NAME_DOMAIN",
              "DOMAIN_FIELD_NAME_PRIMARY",
              "DOMAIN_FIELD_NAME_GENERATED",
              "DOMAIN_FIELD_NAME_CREATION_DATE"
            ],
            "default": "DOMAIN_FIELD_NAME_UNSPECIFIED"
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/trusted_domains": {
      "post": {
        "summary": "Add an Instance Trusted Domain",
        "description": "Returns a list of domains that are configured for this ZITADEL instance. These domains are trusted to be used as public hosts.",
        "operationId": "AdminService_AddInstanceTrustedDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddInstanceTrustedDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddInstanceTrustedDomainRequest"
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/trusted_domains/{domain}": {
      "delete": {
        "summary": "Remove an Instance Trusted Domain",
        "description": "Returns a list of domains that are configured for this ZITADEL instance. These domains are trusted to be used as public hosts.",
        "operationId": "AdminService_RemoveInstanceTrustedDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveInstanceTrustedDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/secretgenerators/_search": {
      "post": {
        "summary": "List Secret Generators",
        "description": "Lists all the configured secret generators. The generators define how a secret should look when generated in ZITADEL. E.g Email verification code, phone verification code, etc.",
        "operationId": "AdminService_ListSecretGenerators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSecretGeneratorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSecretGeneratorsRequest"
            }
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    },
    "/secretgenerators/{generatorType}": {
      "get": {
        "summary": "Get Secret Generator",
        "description": "Get a specific secret generator by its type (e.g PasswordResetCode). A generator defines how a secret should look when generating in ZITADEL.",
        "operationId": "AdminService_GetSecretGenerator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSecretGeneratorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "generatorType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "SECRET_GENERATOR_TYPE_UNSPECIFIED",
              "SECRET_GENERATOR_TYPE_INIT_CODE",
              "SECRET_GENERATOR_TYPE_VERIFY_EMAIL_CODE",
              "SECRET_GENERATOR_TYPE_VERIFY_PHONE_CODE",
              "SECRET_GENERATOR_TYPE_PASSWORD_RESET_CODE",
              "SECRET_GENERATOR_TYPE_PASSWORDLESS_INIT_CODE",
              "SECRET_GENERATOR_TYPE_APP_SECRET",
              "SECRET_GENERATOR_TYPE_OTP_SMS",
              "SECRET_GENERATOR_TYPE_OTP_EMAIL"
            ]
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "put": {
        "summary": "Update Secret Generator",
        "description": "Change a specific secret generator configuration by its type (e.g PasswordResetCode). A generator defines how a secret should look when generating in ZITADEL.",
        "operationId": "AdminService_UpdateSecretGenerator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateSecretGeneratorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "generatorType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "SECRET_GENERATOR_TYPE_UNSPECIFIED",
              "SECRET_GENERATOR_TYPE_INIT_CODE",
              "SECRET_GENERATOR_TYPE_VERIFY_EMAIL_CODE",
              "SECRET_GENERATOR_TYPE_VERIFY_PHONE_CODE",
              "SECRET_GENERATOR_TYPE_PASSWORD_RESET_CODE",
              "SECRET_GENERATOR_TYPE_PASSWORDLESS_INIT_CODE",
              "SECRET_GENERATOR_TYPE_APP_SECRET",
              "SECRET_GENERATOR_TYPE_OTP_SMS",
              "SECRET_GENERATOR_TYPE_OTP_EMAIL"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateSecretGeneratorBody"
            }
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    },
    "/smtp": {
      "get": {
        "summary": "Deprecated: Get active SMTP Configuration",
        "description": "Returns the active SMTP configuration from the system. This is used to send E-Mails to the users.\n\nDeprecated: please move to the new endpoint GetEmailProvider.",
        "operationId": "AdminService_GetSMTPConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSMTPConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SMTP Configs"
        ],
        "deprecated": true
      },
      "post": {
        "summary": "Deprecated: Add SMTP Configuration",
        "description": "Add a new SMTP configuration if nothing is set yet.\n\nDeprecated: please move to the new endpoint AddEmailProviderSMTP.",
        "operationId": "AdminService_AddSMTPConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddSMTPConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddSMTPConfigRequest"
            }
          }
        ],
        "tags": [
          "SMTP Configs"
        ],
        "deprecated": true
      }
    },
    "/smtp/{id}": {
      "get": {
        "summary": "Deprecated: Get SMTP provider configuration by its id",
        "description": "Get a specific SMTP provider configuration by its ID.\n\nDeprecated: please move to the new endpoint GetEmailProviderById.",
        "operationId": "AdminService_GetSMTPConfigById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSMTPConfigByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SMTP Configs"
        ],
        "deprecated": true
      },
      "delete": {
        "summary": "Deprecated: Remove SMTP Configuration",
        "description": "Remove the SMTP configuration, be aware that the users will not get an E-Mail if no SMTP is set.\n\nDeprecated: please move to the new endpoint RemoveEmailProvider.",
        "operationId": "AdminService_RemoveSMTPConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveSMTPConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SMTP Configs"
        ],
        "deprecated": true
      },
      "put": {
        "summary": "Deprecated: Update SMTP Configuration",
        "description": "Update the SMTP configuration, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.\n\nDeprecated: please move to the new endpoint UpdateEmailProviderSMTP.",
        "operationId": "AdminService_UpdateSMTPConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateSMTPConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateSMTPConfigBody"
            }
          }
        ],
        "tags": [
          "SMTP Configs"
        ],
        "deprecated": true
      }
    },
    "/smtp/{id}/password": {
      "put": {
        "summary": "Deprecated: Update SMTP Password",
        "description": "Update the SMTP password that is used for the host, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.\n\nDeprecated: please move to the new endpoint UpdateEmailProviderSMTPPassword.",
        "operationId": "AdminService_UpdateSMTPConfigPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateSMTPConfigPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateSMTPConfigPasswordBody"
            }
          }
        ],
        "tags": [
          "SMTP Configs"
        ],
        "deprecated": true
      }
    },
    "/smtp/{id}/_activate": {
      "post": {
        "summary": "Activate SMTP Provider",
        "description": "Activate an SMTP provider.",
        "operationId": "AdminService_ActivateSMTPConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivateSMTPConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceActivateSMTPConfigBody"
            }
          }
        ],
        "tags": [
          "SMTP Configs"
        ],
        "deprecated": true
      }
    },
    "/smtp/{id}/_deactivate": {
      "post": {
        "summary": "Deprecated: Deactivate SMTP Provider",
        "description": "Deactivate an SMTP provider. After deactivating the provider, the users will not be able to receive SMTP notifications from that provider anymore.\n\nDeprecated: please move to the new endpoint DeactivateEmailProvider.",
        "operationId": "AdminService_DeactivateSMTPConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeactivateSMTPConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceDeactivateSMTPConfigBody"
            }
          }
        ],
        "tags": [
          "SMTP Configs"
        ],
        "deprecated": true
      }
    },
    "/smtp/{id}/_test": {
      "post": {
        "summary": "Deprecated: Test SMTP Provider",
        "description": "Test an SMTP provider identified by its ID. After testing the provider, the users will receive information about the test results.\n\nDeprecated: please move to the new endpoint TestEmailProviderSMTPById.",
        "operationId": "AdminService_TestSMTPConfigById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TestSMTPConfigByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceTestSMTPConfigByIdBody"
            }
          }
        ],
        "tags": [
          "SMTP Configs"
        ],
        "deprecated": true
      }
    },
    "/smtp/_test": {
      "post": {
        "summary": "Deprecated: Test SMTP Provider",
        "description": "Test an SMTP provider. After testing the provider, the users will receive information about the test results.\n\nDeprecated: please move to the new endpoint TestEmailProviderSMTP.",
        "operationId": "AdminService_TestSMTPConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TestSMTPConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TestSMTPConfigRequest"
            }
          }
        ],
        "tags": [
          "SMTP Configs"
        ],
        "deprecated": true
      }
    },
    "/smtp/_search": {
      "post": {
        "summary": "Deprecated: List SMTP Configs",
        "description": "Returns a list of SMTP configurations.\n\nDeprecated: please move to the new endpoint ListEmailProviders.",
        "operationId": "AdminService_ListSMTPConfigs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSMTPConfigsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSMTPConfigsRequest"
            }
          }
        ],
        "tags": [
          "SMTP Configs"
        ],
        "deprecated": true
      }
    },
    "/email/_search": {
      "post": {
        "summary": "List Email providers",
        "description": "Returns a list of Email providers.",
        "operationId": "AdminService_ListEmailProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEmailProvidersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListEmailProvidersRequest"
            }
          }
        ],
        "tags": [
          "Email Provider"
        ]
      }
    },
    "/email": {
      "get": {
        "summary": "Get active Email provider",
        "description": "Returns the active Email provider from the system. This is used to send E-Mails to the users.",
        "operationId": "AdminService_GetEmailProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEmailProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Email Provider"
        ]
      }
    },
    "/email/{id}": {
      "get": {
        "summary": "Get Email provider by its id",
        "description": "Get a specific Email provider by its ID.",
        "operationId": "AdminService_GetEmailProviderById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEmailProviderByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Email Provider"
        ]
      },
      "delete": {
        "summary": "Remove Email provider",
        "description": "Remove the Email provider, be aware that the users will not get an E-Mail if no provider is set.",
        "operationId": "AdminService_RemoveEmailProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveEmailProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Email Provider"
        ]
      }
    },
    "/email/smtp": {
      "post": {
        "summary": "Add SMTP Email provider",
        "description": "Add a new SMTP Email provider if nothing is set yet.",
        "operationId": "AdminService_AddEmailProviderSMTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddEmailProviderSMTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddEmailProviderSMTPRequest"
            }
          }
        ],
        "tags": [
          "Email Provider"
        ]
      }
    },
    "/email/smtp/{id}": {
      "put": {
        "summary": "Update SMTP Email provider",
        "description": "Update the SMTP Email provider, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.",
        "operationId": "AdminService_UpdateEmailProviderSMTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateEmailProviderSMTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateEmailProviderSMTPBody"
            }
          }
        ],
        "tags": [
          "Email Provider"
        ]
      }
    },
    "/email/http": {
      "post": {
        "summary": "Add HTTP Email provider",
        "description": "Add a new HTTP Email provider if nothing is set yet.",
        "operationId": "AdminService_AddEmailProviderHTTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddEmailProviderHTTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddEmailProviderHTTPRequest"
            }
          }
        ],
        "tags": [
          "Email Provider"
        ]
      }
    },
    "/email/http/{id}": {
      "put": {
        "summary": "Update HTTP Email provider",
        "description": "Update the HTTP Email provider, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured HTTP.",
        "operationId": "AdminService_UpdateEmailProviderHTTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateEmailProviderHTTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateEmailProviderHTTPBody"
            }
          }
        ],
        "tags": [
          "Email Provider"
        ]
      }
    },
    "/email/smtp/{id}/password": {
      "put": {
        "summary": "Update SMTP Password",
        "description": "Update the SMTP password that is used for the host, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.",
        "operationId": "AdminService_UpdateEmailProviderSMTPPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateEmailProviderSMTPPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateEmailProviderSMTPPasswordBody"
            }
          }
        ],
        "tags": [
          "Email Provider"
        ]
      }
    },
    "/email/{id}/_activate": {
      "post": {
        "summary": "Activate Email Provider",
        "description": "Activate an Email provider.",
        "operationId": "AdminService_ActivateEmailProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivateEmailProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceActivateEmailProviderBody"
            }
          }
        ],
        "tags": [
          "Email Provider"
        ]
      }
    },
    "/email/{id}/_deactivate": {
      "post": {
        "summary": "Deactivate Email Provider",
        "description": "Deactivate an Email provider. After deactivating the provider, the users will not be able to receive Email notifications from that provider anymore.",
        "operationId": "AdminService_DeactivateEmailProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeactivateEmailProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceDeactivateEmailProviderBody"
            }
          }
        ],
        "tags": [
          "Email Provider"
        ]
      }
    },
    "/email/smtp/{id}/_test": {
      "post": {
        "summary": "Test SMTP Email Provider",
        "description": "Test an SMTP Email provider identified by its ID. After testing the provider, the users will receive information about the test results.",
        "operationId": "AdminService_TestEmailProviderSMTPById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TestEmailProviderSMTPByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceTestEmailProviderSMTPByIdBody"
            }
          }
        ],
        "tags": [
          "Email Provider"
        ]
      }
    },
    "/email/smtp/_test": {
      "post": {
        "summary": "Test SMTP Email Provider",
        "description": "Test an SMTP Email provider. After testing the provider, the users will receive information about the test results.",
        "operationId": "AdminService_TestEmailProviderSMTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TestEmailProviderSMTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TestEmailProviderSMTPRequest"
            }
          }
        ],
        "tags": [
          "Email Provider"
        ]
      }
    },
    "/sms/_search": {
      "post": {
        "summary": "List SMS Providers",
        "description": "Returns a list of configured SMS providers.",
        "operationId": "AdminService_ListSMSProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSMSProvidersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSMSProvidersRequest"
            }
          }
        ],
        "tags": [
          "SMS Provider"
        ]
      }
    },
    "/sms/{id}": {
      "get": {
        "summary": "Get SMS Provider",
        "description": "Get a specific SMS provider by its ID.",
        "operationId": "AdminService_GetSMSProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSMSProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SMS Provider"
        ]
      },
      "delete": {
        "summary": "Remove SMS Provider",
        "description": "Delete an SMS provider. If the provider was still active the users will not receive notifications from that provider anymore.",
        "operationId": "AdminService_RemoveSMSProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveSMSProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SMS Provider"
        ]
      }
    },
    "/sms/twilio": {
      "post": {
        "summary": "Add Twilio SMS Provider",
        "description": "Configure a new SMS provider of the type Twilio. A provider has to be activated to be able to send notifications.",
        "operationId": "AdminService_AddSMSProviderTwilio",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddSMSProviderTwilioResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddSMSProviderTwilioRequest"
            }
          }
        ],
        "tags": [
          "SMS Provider"
        ]
      }
    },
    "/sms/twilio/{id}": {
      "put": {
        "summary": "Update Twilio SMS Provider",
        "description": "Change the configuration of an SMS provider of the type Twilio.  A provider has to be activated to be able to send notifications.",
        "operationId": "AdminService_UpdateSMSProviderTwilio",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateSMSProviderTwilioResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateSMSProviderTwilioBody"
            }
          }
        ],
        "tags": [
          "SMS Provider"
        ]
      }
    },
    "/sms/twilio/{id}/token": {
      "put": {
        "summary": "Update Twilio SMS Provider Token",
        "description": "Change the token of the SMS provider of the type Twilio.",
        "operationId": "AdminService_UpdateSMSProviderTwilioToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateSMSProviderTwilioTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateSMSProviderTwilioTokenBody"
            }
          }
        ],
        "tags": [
          "SMS Provider"
        ]
      }
    },
    "/sms/http": {
      "post": {
        "summary": "Add HTTP SMS Provider",
        "description": "Configure a new SMS provider of the type HTTP. A provider has to be activated to be able to send notifications.",
        "operationId": "AdminService_AddSMSProviderHTTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddSMSProviderHTTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddSMSProviderHTTPRequest"
            }
          }
        ],
        "tags": [
          "SMS Provider"
        ]
      }
    },
    "/sms/http/{id}": {
      "put": {
        "summary": "Update HTTP SMS Provider",
        "description": "Change the configuration of an SMS provider of the type HTTP. A provider has to be activated to be able to send notifications.",
        "operationId": "AdminService_UpdateSMSProviderHTTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateSMSProviderHTTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateSMSProviderHTTPBody"
            }
          }
        ],
        "tags": [
          "SMS Provider"
        ]
      }
    },
    "/sms/{id}/_activate": {
      "post": {
        "summary": "Activate SMS Provider",
        "description": "Activate an SMS provider. After activating a provider, the users will be able to receive SMS notifications.",
        "operationId": "AdminService_ActivateSMSProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivateSMSProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceActivateSMSProviderBody"
            }
          }
        ],
        "tags": [
          "SMS Provider"
        ]
      }
    },
    "/sms/{id}/_deactivate": {
      "post": {
        "summary": "Deactivate SMS Provider",
        "description": "Deactivate an SMS provider. After deactivating the provider, the users will not be able to receive SMS notifications from that provider anymore. If it was the last activated they will not get notifications at all",
        "operationId": "AdminService_DeactivateSMSProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeactivateSMSProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceDeactivateSMSProviderBody"
            }
          }
        ],
        "tags": [
          "SMS Provider"
        ]
      }
    },
    "/settings/oidc": {
      "get": {
        "summary": "Get OIDC Settings",
        "description": "The OIDC Settings define the lifetimes of the different tokens in OIDC.",
        "operationId": "AdminService_GetOIDCSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOIDCSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings"
        ]
      },
      "post": {
        "summary": "Add OIDC Settings",
        "description": "Create new OIDC settings. The OIDC Settings define the lifetimes of the different tokens in OIDC. These settings are used for all organizations and clients.",
        "operationId": "AdminService_AddOIDCSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddOIDCSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddOIDCSettingsRequest"
            }
          }
        ],
        "tags": [
          "Settings"
        ]
      },
      "put": {
        "summary": "Add OIDC Settings",
        "description": "Update existing OIDC settings. The OIDC Settings define the lifetimes of the different tokens in OIDC. These settings are used for all organizations and clients.",
        "operationId": "AdminService_UpdateOIDCSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateOIDCSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateOIDCSettingsRequest"
            }
          }
        ],
        "tags": [
          "Settings"
        ]
      }
    },
    "/notification/provider/file": {
      "get": {
        "summary": "Get Notification Provider Filesystem",
        "description": "Returns a filesystem notification provider if configured. This provider is only used for testing purposes. The notifications will be written to the filesystem.",
        "operationId": "AdminService_GetFileSystemNotificationProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetFileSystemNotificationProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Notification Providers"
        ]
      }
    },
    "/notification/provider/log": {
      "get": {
        "summary": "Get Notification Provider Log",
        "description": "Returns a log notification provider if configured. This provider is only used for testing purposes. The notifications will be written to the logs.",
        "operationId": "AdminService_GetLogNotificationProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLogNotificationProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Notification Providers"
        ]
      }
    },
    "/policies/security": {
      "get": {
        "summary": "Get Security Settings",
        "description": "Returns the security settings of the ZITADEL instance.",
        "operationId": "AdminService_GetSecurityPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSecurityPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings"
        ]
      },
      "put": {
        "summary": "Set Security Settings",
        "description": "Set the security settings of the ZITADEL instance.",
        "operationId": "AdminService_SetSecurityPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetSecurityPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetSecurityPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings"
        ]
      }
    },
    "/orgs/{id}": {
      "get": {
        "summary": "Get Organization By ID",
        "description": "Returns an organization by its ID. Make sure the user has the permissions to access the organization.",
        "operationId": "AdminService_GetOrgByID",
        "responses": {
          "200": {
            "description": "requested org found",
            "schema": {
              "$ref": "#/definitions/v1GetOrgByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs/_is_unique": {
      "get": {
        "summary": "Is Organization Unique",
        "description": "Checks if an organization with the searched parameters already exists or not.",
        "operationId": "AdminService_IsOrgUnique",
        "responses": {
          "200": {
            "description": "ZITADEL started",
            "schema": {
              "$ref": "#/definitions/v1IsOrgUniqueResponse"
            }
          },
          "default": {
            "description": "ZITADEL NOT started yet",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs/default/{orgId}": {
      "put": {
        "summary": "Set Default Organization",
        "description": "Sets the default organization of the ZITADEL instance. If no specific organization is given on the register form, a user will be registered to the default organization.",
        "operationId": "AdminService_SetDefaultOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetDefaultOrgResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations",
          "Settings"
        ]
      }
    },
    "/orgs/default": {
      "get": {
        "summary": "Get Default Organization",
        "description": "Get the default organization of the ZITADEL instance. If no specific organization is given on the register form, a user will be registered to the default organization.",
        "operationId": "AdminService_GetDefaultOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultOrgResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Organizations",
          "Settings"
        ]
      }
    },
    "/orgs/_search": {
      "post": {
        "summary": "Search Organization",
        "description": "Returns a list of organizations that match the requesting filters. All filters are applied with an AND condition.",
        "operationId": "AdminService_ListOrgs",
        "responses": {
          "200": {
            "description": "list of organizations matching the query",
            "schema": {
              "$ref": "#/definitions/v1ListOrgsResponse"
            }
          },
          "400": {
            "description": "invalid list query",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Search query for lists",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListOrgsRequest"
            }
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs/_setup": {
      "post": {
        "summary": "Setup Organization",
        "description": "Create a new organization with an administrative user. If no specific roles are sent for the first user, the user will get the role ORG_OWNER.",
        "operationId": "AdminService_SetUpOrg",
        "responses": {
          "200": {
            "description": "org, user and user membership were created successfully",
            "schema": {
              "$ref": "#/definitions/v1SetUpOrgResponse"
            }
          },
          "400": {
            "description": "invalid org or user",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to set up an organization. User is required",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetUpOrgRequest"
            }
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/orgs/{orgId}": {
      "delete": {
        "summary": "Remove Organization",
        "description": "Deletes the organization and all its resources (Users, Projects, Grants to and from the org). Users of this organization will not be able to log in.",
        "operationId": "AdminService_RemoveOrg",
        "responses": {
          "200": {
            "description": "org removed successfully",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1RemoveOrgResponse"
            }
          },
          "400": {
            "description": "invalid org",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/idps/{id_1}": {
      "get": {
        "summary": "Deprecated: Get Identity Provider (IDP) by ID",
        "description": "Returns an identity provider (social/enterprise login) by its ID e.g Google, AzureAD, etc.",
        "operationId": "AdminService_GetIDPByID",
        "responses": {
          "200": {
            "description": "IDP found",
            "schema": {
              "$ref": "#/definitions/adminv1GetIDPByIDResponse"
            }
          },
          "400": {
            "description": "invalid argument",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/{idpId_1}": {
      "delete": {
        "summary": "Deprecated: Remove Identity Provider (IDP)",
        "description": "Removes the identity provider permanently. All links to the given IDP on users will be deleted as well. They will not be able to log in with the provider afterward. If it is their only authentication possibility it might cause problems.",
        "operationId": "AdminService_RemoveIDP",
        "responses": {
          "200": {
            "description": "idp removed",
            "schema": {
              "$ref": "#/definitions/v1RemoveIDPResponse"
            }
          },
          "400": {
            "description": "unable to remove IDP",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      },
      "put": {
        "summary": "Deprecated: Update Identity Provider (IDP)",
        "description": "Update an existing IDP. All fields are updated. If you do not send a value in a field, it will be empty afterward.",
        "operationId": "AdminService_UpdateIDP",
        "responses": {
          "200": {
            "description": "idp updated",
            "schema": {
              "$ref": "#/definitions/v1UpdateIDPResponse"
            }
          },
          "400": {
            "description": "invalid argument",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateIDPBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/{idpId_1}/_deactivate": {
      "post": {
        "summary": "Deprecated: Deactivate Identity Provider (IDP)",
        "description": "Sets the state of the provider to inactive. It can only be called for the provider with the state active. Users will not be able to log in with the given provider afterward. It might cause troubles if it is the only authentication method of the user.",
        "operationId": "AdminService_DeactivateIDP",
        "responses": {
          "200": {
            "description": "idp deactivated",
            "schema": {
              "$ref": "#/definitions/v1DeactivateIDPResponse"
            }
          },
          "400": {
            "description": "Unable to deactivate IDP",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/{idpId_1}/_reactivate": {
      "post": {
        "summary": "Deprecated: Reactivate Identity Provider (IDP)",
        "description": "Sets the state of the provider to active. It can only be called for providers with the state inactive. Users will not be able to log in again with the given provider.",
        "operationId": "AdminService_ReactivateIDP",
        "responses": {
          "200": {
            "description": "idp reactivated",
            "schema": {
              "$ref": "#/definitions/v1ReactivateIDPResponse"
            }
          },
          "400": {
            "description": "unable to reactivate IDP",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/{idpId_1}/oidc_config": {
      "put": {
        "summary": "Deprecated: Update OIDC Identity Provider (IDP)",
        "description": "Update the OIDC-specific configuration of an identity provider. All fields will be updated. If a field has no value it will be empty afterward.",
        "operationId": "AdminService_UpdateIDPOIDCConfig",
        "responses": {
          "200": {
            "description": "OIDC config updated",
            "schema": {
              "$ref": "#/definitions/v1UpdateIDPOIDCConfigResponse"
            }
          },
          "400": {
            "description": "invalid argument",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "409": {
            "description": "precondition failed",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateIDPOIDCConfigBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/{idpId_1}/jwt_config": {
      "put": {
        "summary": "Deprecated: Update JWT Identity Provider (IDP)",
        "description": "Update the JWT-specific configuration of an identity provider. All fields will be updated. If a field has no value it will be empty afterward.",
        "operationId": "AdminService_UpdateIDPJWTConfig",
        "responses": {
          "200": {
            "description": "JWT config updated",
            "schema": {
              "$ref": "#/definitions/v1UpdateIDPJWTConfigResponse"
            }
          },
          "400": {
            "description": "invalid argument",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "409": {
            "description": "precondition failed",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateIDPJWTConfigBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ],
        "deprecated": true
      }
    },
    "/idps/templates/{id_1}": {
      "get": {
        "summary": "Get Identity Provider By ID",
        "operationId": "AdminService_GetProviderByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetProviderByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      },
      "delete": {
        "summary": "Delete Identity Provider",
        "operationId": "AdminService_DeleteProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1DeleteProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/oauth/{id_1}": {
      "put": {
        "summary": "Update Generic OAuth Identity Provider",
        "operationId": "AdminService_UpdateGenericOAuthProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1UpdateGenericOAuthProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceUpdateGenericOAuthProviderBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/generic_oidc/{id_1}": {
      "put": {
        "summary": "Update Generic OIDC Identity Provider",
        "operationId": "AdminService_UpdateGenericOIDCProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1UpdateGenericOIDCProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceUpdateGenericOIDCProviderBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/generic_oidc/{id_1}/_migrate": {
      "post": {
        "summary": "Migrate Generic OIDC Identity Provider",
        "operationId": "AdminService_MigrateGenericOIDCProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1MigrateGenericOIDCProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceMigrateGenericOIDCProviderBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/generic_jwt/{id_1}": {
      "put": {
        "summary": "Update JWT Identity Provider",
        "operationId": "AdminService_UpdateJWTProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1UpdateJWTProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceUpdateJWTProviderBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/azure/{id_1}": {
      "put": {
        "summary": "Update AzureAD Identity Provider",
        "operationId": "AdminService_UpdateAzureADProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1UpdateAzureADProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceUpdateAzureADProviderBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/github/{id_1}": {
      "put": {
        "summary": "Update GitHub Identity Provider",
        "operationId": "AdminService_UpdateGitHubProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1UpdateGitHubProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceUpdateGitHubProviderBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/github_es/{id_1}": {
      "put": {
        "summary": "Update GitHub Enterprise Identity Provider",
        "operationId": "AdminService_UpdateGitHubEnterpriseServerProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1UpdateGitHubEnterpriseServerProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceUpdateGitHubEnterpriseServerProviderBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/google/{id_1}": {
      "put": {
        "summary": "Update Google Identity Provider",
        "operationId": "AdminService_UpdateGoogleProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1UpdateGoogleProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceUpdateGoogleProviderBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/ldap/{id_1}": {
      "put": {
        "summary": "Update LDAP Identity Provider",
        "operationId": "AdminService_UpdateLDAPProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1UpdateLDAPProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceUpdateLDAPProviderBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/apple/{id_1}": {
      "put": {
        "summary": "Update Apple Identity Provider",
        "operationId": "AdminService_UpdateAppleProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1UpdateAppleProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceUpdateAppleProviderBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/saml/{id_1}": {
      "put": {
        "summary": "Update SAML Identity Provider",
        "operationId": "AdminService_UpdateSAMLProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1UpdateSAMLProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceUpdateSAMLProviderBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/idps/saml/{id_1}/_generate_certificate": {
      "post": {
        "summary": "Regenerate SAML Identity Provider Certificate",
        "operationId": "AdminService_RegenerateSAMLProviderCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1RegenerateSAMLProviderCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceRegenerateSAMLProviderCertificateBody"
            }
          }
        ],
        "tags": [
          "Identity Providers"
        ]
      }
    },
    "/orgs/{orgId}/policies/orgiam": {
      "get": {
        "summary": "Get Org IAM Policy",
        "description": "Use GetDomain Settings for Organization instead",
        "operationId": "AdminService_GetCustomOrgIAMPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCustomOrgIAMPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Domain Settings"
        ],
        "deprecated": true
      },
      "delete": {
        "summary": "Reset Domain Settings of Organization",
        "description": "Use Reset Domain Settings of Organization instead",
        "operationId": "AdminService_ResetCustomOrgIAMPolicyToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResetCustomOrgIAMPolicyToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Domain Settings"
        ],
        "deprecated": true
      },
      "post": {
        "summary": "Add Custom Org IAM Policy",
        "description": "Use Get Domain Settings for Organization instead",
        "operationId": "AdminService_AddCustomOrgIAMPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddCustomOrgIAMPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceAddCustomOrgIAMPolicyBody"
            }
          }
        ],
        "tags": [
          "Settings",
          "Domain Settings"
        ],
        "deprecated": true
      },
      "put": {
        "summary": "Update Custom Org IAM Policy",
        "description": "Use Get Domain Settings for Organization instead",
        "operationId": "AdminService_UpdateCustomOrgIAMPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateCustomOrgIAMPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateCustomOrgIAMPolicyBody"
            }
          }
        ],
        "tags": [
          "Settings",
          "Domain Settings"
        ],
        "deprecated": true
      }
    },
    "/orgs/{orgId}/policies/domain": {
      "get": {
        "summary": "Get Domain Settings for Organization",
        "description": "Get the domain settings configured on a specific organization. If the organization doesn't have a custom setting, the default will be returned. Domain settings specify how ZITADEL should handle domains, in regards to usernames, emails and validation.",
        "operationId": "AdminService_GetCustomDomainPolicy",
        "responses": {
          "200": {
            "description": "domain policy of the org or the default policy if not customized",
            "schema": {
              "$ref": "#/definitions/v1GetCustomDomainPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Domain Settings",
          "Organizations"
        ]
      },
      "delete": {
        "summary": "Reset Domain Settings of Organization",
        "description": "Resets the domain settings configured on a specific organization to the settings configured on the instance. Domain settings specify how ZITADEL should handle domains, in regards to usernames, emails and validation.",
        "operationId": "AdminService_ResetCustomDomainPolicyToDefault",
        "responses": {
          "200": {
            "description": "resets the custom domain policy to the default policy",
            "schema": {
              "$ref": "#/definitions/v1ResetCustomDomainPolicyToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Domain Settings",
          "Organizations"
        ]
      },
      "post": {
        "summary": "Set a Domain Settings for an Organization",
        "description": "Create the domain settings configured on a specific organization. It will overwrite the settings specified on the instance. Domain settings specify how ZITADEL should handle domains, in regards to usernames, emails and validation.",
        "operationId": "AdminService_AddCustomDomainPolicy",
        "responses": {
          "200": {
            "description": "domain policy created",
            "schema": {
              "$ref": "#/definitions/v1AddCustomDomainPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceAddCustomDomainPolicyBody"
            }
          }
        ],
        "tags": [
          "Settings",
          "Domain Settings",
          "Organizations"
        ]
      },
      "put": {
        "summary": "Update Domain Settings for Organization",
        "description": "Update the domain settings configured on a specific organization. It will overwrite the settings specified on the instance. Domain settings specify how ZITADEL should handle domains, in regards to usernames, emails and validation.",
        "operationId": "AdminService_UpdateCustomDomainPolicy",
        "responses": {
          "200": {
            "description": "domain policy updated",
            "schema": {
              "$ref": "#/definitions/v1UpdateCustomDomainPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateCustomDomainPolicyBody"
            }
          }
        ],
        "tags": [
          "Settings",
          "Domain Settings",
          "Organizations"
        ]
      }
    },
    "/policies/login/idps/{idpId_1}": {
      "delete": {
        "summary": "Remove Linked Identity Provider",
        "description": "Remove an identity provider from the login settings of the instance. This means that it will not be shown to the users on the login page. It affects all organizations, without custom login settings.",
        "operationId": "AdminService_RemoveIDPFromLoginPolicy",
        "responses": {
          "200": {
            "description": "Identity providers removed from default login policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1RemoveIDPFromLoginPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings",
          "Login Settings",
          "Identity Providers"
        ]
      }
    },
    "/policies/login/second_factors/{type_1}": {
      "delete": {
        "summary": "Remove Second Factor (2FA)",
        "description": "Remove a configured second factor (2FA) from the login settings of the instance. It affects all organizations, without custom login settings. Users will not be able to authenticate with the configured factor afterward. Authentication factors are used as an additional layer of security for your users (e.g. Authentication App, FingerPrint, Windows Hello, etc). Per definition, it is called the second factor as it is used after a password. In the UI we generalize it as multi-factor.",
        "operationId": "AdminService_RemoveSecondFactorFromLoginPolicy",
        "responses": {
          "200": {
            "description": "second factor removed from default login policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1RemoveSecondFactorFromLoginPolicyResponse"
            }
          },
          "400": {
            "description": "Invalid second factor type",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type_1",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "SECOND_FACTOR_TYPE_UNSPECIFIED",
              "SECOND_FACTOR_TYPE_OTP",
              "SECOND_FACTOR_TYPE_U2F",
              "SECOND_FACTOR_TYPE_OTP_EMAIL",
              "SECOND_FACTOR_TYPE_OTP_SMS"
            ]
          }
        ],
        "tags": [
          "Settings",
          "Login Settings",
          "Authentication Methods"
        ]
      }
    },
    "/policies/login/multi_factors/_search": {
      "post": {
        "summary": "List Multi-factors (MFA)",
        "description": "Returns a list of multi-factors (MFA) configured on the login settings of the instance. It affects all organizations, without custom login settings. Authentication factors are used as an additional layer of security for your users (e.g. Authentication App, FingerPrint, Windows Hello, etc).  Per definition, it is called multifactor factor or passwordless as it is used as first and second authentication and a password is not necessary. In the UI we generalize it as passwordless or passkey.",
        "operationId": "AdminService_ListLoginPolicyMultiFactors",
        "responses": {
          "200": {
            "description": "multi-factors of default login policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ListLoginPolicyMultiFactorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings",
          "Login Settings",
          "Authentication Methods"
        ]
      }
    },
    "/policies/login/multi_factors/{type_1}": {
      "delete": {
        "summary": "Remove Multi-factor (MFA)",
        "description": "Remove a multi-factor (MFA) from the login settings of the instance. It affects all organizations, without custom login settings. Authentication factors are used as an additional layer of security for your users (e.g. Authentication App, FingerPrint, Windows Hello, etc).  Per definition, it is called multi-factor factor or passwordless as it is used as first and second authentication and a password is not necessary. In the UI we generalize it as passwordless or passkey.",
        "operationId": "AdminService_RemoveMultiFactorFromLoginPolicy",
        "responses": {
          "200": {
            "description": "second factor removed from default login policy",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1RemoveMultiFactorFromLoginPolicyResponse"
            }
          },
          "400": {
            "description": "multi-factor type not defined on policy",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type_1",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MULTI_FACTOR_TYPE_UNSPECIFIED",
              "MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION"
            ]
          }
        ],
        "tags": [
          "Settings",
          "Login Settings",
          "Authentication Methods"
        ]
      }
    },
    "/policies/password/lockout": {
      "put": {
        "summary": "Update Password Lockout Settings",
        "description": "Update the password lockout settings configured on the instance. It affects all organizations, that do not have a custom setting configured. The settings specify when a user should be locked (e.g how many password attempts). The user has to be unlocked by an administrator afterward.",
        "operationId": "AdminService_UpdateLockoutPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateLockoutPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateLockoutPolicyRequest"
            }
          }
        ],
        "tags": [
          "Settings",
          "Password Settings"
        ]
      }
    },
    "/text/default/message/init/{language_1}": {
      "get": {
        "summary": "Get Default Init Message Text",
        "description": "Get the default text of the initialize-user message/email that is stored as translation files in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured. The email is sent when a user is created and has either no password or a non-verified email address.",
        "operationId": "AdminService_GetDefaultInitMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetDefaultInitMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/init/{language_1}": {
      "get": {
        "summary": "Get Custom Init Message Text",
        "description": "Get the custom text of the initialize-user message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The email is sent when a user is created and has either no password or a non-verified email address.",
        "operationId": "AdminService_GetCustomInitMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetCustomInitMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Init Message Text to Default",
        "description": "Removes the custom text of the initialize-user message/email that is overwritten on the instance and triggers the text from the translation files stored in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_ResetCustomInitMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ResetCustomInitMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Default Custom Init Message Text",
        "description": "Set the custom text of the initialize-user message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The email is sent when a user is created and has either no password or a non-verified email address. The Following Variables can be used: {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "AdminService_SetDefaultInitMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetDefaultInitMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceSetDefaultInitMessageTextBody"
            }
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/deafult/message/passwordreset/{language}": {
      "get": {
        "summary": "Get Default Password Reset Message Text",
        "description": "Get the default text of the password reset message/email that is stored as translation files in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured. The email is sent when a user triggers the password forgot-request.",
        "operationId": "AdminService_GetDefaultPasswordResetMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetDefaultPasswordResetMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/passwordreset/{language_1}": {
      "get": {
        "summary": "Get Custom Password Reset Message Text",
        "description": "Get the custom text of the password reset message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The email is sent when a user triggers the password forgot-request.",
        "operationId": "AdminService_GetCustomPasswordResetMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetCustomPasswordResetMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Password Reset Message Text to Default",
        "description": "Removes the custom text of the password reset user message/email that is overwritten on the instance and triggers the text from the translation files stored in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_ResetCustomPasswordResetMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ResetCustomPasswordResetMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Default Custom Password Reset Message Text",
        "description": "Set the custom text of the password reset user message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The email is sent when a user triggers the password forgot-request. The Following Variables can be used: {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "AdminService_SetDefaultPasswordResetMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetDefaultPasswordResetMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceSetDefaultPasswordResetMessageTextBody"
            }
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/verifyemail/{language_1}": {
      "get": {
        "summary": "Get Default Verify Email Message Text",
        "description": "Get the default text of the verify-email message/email that is stored as translation files in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured. The email is sent when a user adds a new non-verified email address.",
        "operationId": "AdminService_GetDefaultVerifyEmailMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetDefaultVerifyEmailMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/verifyemail/{language_1}": {
      "get": {
        "summary": "Get Custom Verify Email Message Text",
        "description": "Get the custom text of the verify-email message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The email is sent when a user adds a new non-verified email address.",
        "operationId": "AdminService_GetCustomVerifyEmailMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetCustomVerifyEmailMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Verify Email Message Text to Default",
        "description": "Removes the custom text of the email verify message/email that is overwritten on the instance and triggers the text from the translation files stored in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_ResetCustomVerifyEmailMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ResetCustomVerifyEmailMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Default Verify Email Message Text",
        "description": "Set the custom text of the verify email user message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The email is sent when a user adds a new nonverified email address. The Following Variables can be used: {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "AdminService_SetDefaultVerifyEmailMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetDefaultVerifyEmailMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceSetDefaultVerifyEmailMessageTextBody"
            }
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/verifyphone/{language_1}": {
      "get": {
        "summary": "Get Default Verify Phone Message Text",
        "description": "Get the default text of the verify-phone message that is stored as translation files in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when a user adds a new non-verified phone number and a notification provider is configured.",
        "operationId": "AdminService_GetDefaultVerifyPhoneMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetDefaultVerifyPhoneMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/verifyphone/{language_1}": {
      "get": {
        "summary": "Get Custom Verify Phone Message Text",
        "description": "Get the custom text of the verify-phone message that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when a user adds a new non-verified phone number and a notification provider is configured.",
        "operationId": "AdminService_GetCustomVerifyPhoneMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetCustomVerifyPhoneMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Verify Phone Message Text to Default",
        "description": "Removes the custom text of the verify-phone message that is overwritten on the instance and triggers the text from the translation files stored in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_ResetCustomVerifyPhoneMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ResetCustomVerifyPhoneMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Default Verify Phone Reset Message Text",
        "description": "Set the custom text of the verify-phone user message that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when a user adds a new non-verified phone number and a notification provider is configured. The Following Variables can be used: {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "AdminService_SetDefaultVerifyPhoneMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetDefaultVerifyPhoneMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceSetDefaultVerifyPhoneMessageTextBody"
            }
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/verifysmsotp/{language_1}": {
      "get": {
        "summary": "Get Default Verify SMS OTP Message Text",
        "description": "Get the default text of the verify SMS OTP message that is stored as translation files in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when an SMS One-time password should be verified and a notification provider is configured.",
        "operationId": "AdminService_GetDefaultVerifySMSOTPMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetDefaultVerifySMSOTPMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/verifysmsotp/{language_1}": {
      "get": {
        "summary": "Get Custom Verify SMS OTP Message Text",
        "description": "Get the custom text of the verify SMS OTP message that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when an SMS One-time password should be verified and a notification provider is configured.",
        "operationId": "AdminService_GetCustomVerifySMSOTPMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetCustomVerifySMSOTPMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Verify SMS OTP Message Text to Default",
        "description": "Removes the custom text of the verify SMS OTP message that is overwritten on the instance and triggers the text from the translation files stored in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_ResetCustomVerifySMSOTPMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ResetCustomVerifySMSOTPMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Default Verify SMS OTP Reset Message Text",
        "description": "Set the custom text of the verify SMS OTP user message that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when an SMS One-time password should be verified and a notification provider is configured. The Following Variables can be used: {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "AdminService_SetDefaultVerifySMSOTPMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetDefaultVerifySMSOTPMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceSetDefaultVerifySMSOTPMessageTextBody"
            }
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/verifyemailotp/{language_1}": {
      "get": {
        "summary": "Get Default Verify SMS OTP Message Text",
        "description": "Get the default text of the verify Email OTP message that is stored as translation files in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when an SMS One-time password should be verified and a notification provider is configured.",
        "operationId": "AdminService_GetDefaultVerifyEmailOTPMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetDefaultVerifyEmailOTPMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/verifyemailotp/{language_1}": {
      "get": {
        "summary": "Get Custom Verify SMS OTP Message Text",
        "description": "Get the custom text of the Email OTP message that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when an SMS One-time password should be verified and a notification provider is configured.",
        "operationId": "AdminService_GetCustomVerifyEmailOTPMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetCustomVerifyEmailOTPMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Verify SMS OTP Message Text to Default",
        "description": "Removes the custom text of the Email OTP message that is overwritten on the instance and triggers the text from the translation files stored in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_ResetCustomVerifyEmailOTPMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ResetCustomVerifyEmailOTPMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Default Verify SMS OTP Reset Message Text",
        "description": "Set the custom text of the Email OTP user message that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when an SMS One-time password should be verified and a notification provider is configured. The Following Variables can be used: {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "AdminService_SetDefaultVerifyEmailOTPMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetDefaultVerifyEmailOTPMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceSetDefaultVerifyEmailOTPMessageTextBody"
            }
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/domainclaimed/{language_1}": {
      "get": {
        "summary": "Get Default Domain Claimed Message Text",
        "description": "Get the default text of the domain claimed message/email that is stored as translation files in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when an organization claims a domain and a user of this domain exists in another organization.",
        "operationId": "AdminService_GetDefaultDomainClaimedMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetDefaultDomainClaimedMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/domainclaimed/{language_1}": {
      "get": {
        "summary": "Get Custom Domain Claimed Message Text",
        "description": "Get the custom text of the domain claimed message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when an organization claims a domain and a user of this domain exists in another organization.",
        "operationId": "AdminService_GetCustomDomainClaimedMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetCustomDomainClaimedMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Domain Claimed Message Text to Default",
        "description": "Removes the custom text of the domain claimed message that is overwritten on the instance and triggers the text from the translation files stored in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_ResetCustomDomainClaimedMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ResetCustomDomainClaimedMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Default Domain Claimed Message Text",
        "description": "Set the custom text of the domain claimed message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message/email is sent when an organization claims a domain and a user of this domain exists in another organization. The Following Variables can be used: {{.Domain}} {{.TempUsername}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "AdminService_SetDefaultDomainClaimedMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetDefaultDomainClaimedMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceSetDefaultDomainClaimedMessageTextBody"
            }
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/passwordless_registration/{language_1}": {
      "get": {
        "summary": "Get Default Passwordless Registration Message Text",
        "description": "Get the default text of the domain claimed message/email that is stored as translation files in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when a user requests passwordless/passkey registration as email, to be able to configure on another device.",
        "operationId": "AdminService_GetDefaultPasswordlessRegistrationMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetDefaultPasswordlessRegistrationMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/passwordless_registration/{language_1}": {
      "get": {
        "summary": "Get Custom Passwordless Registration Message Text",
        "description": "Get the custom text of the passwordless/passkey registration message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when a user requests passwordless/passkey registration as email, to be able to configure on another device.",
        "operationId": "AdminService_GetCustomPasswordlessRegistrationMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetCustomPasswordlessRegistrationMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Passwordless Registration Message Text to Default",
        "description": "Removes the custom text of the passwordless/passkey registration message that is overwritten on the instance and triggers the text from the translation files stored in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_ResetCustomPasswordlessRegistrationMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Default Passwordless Registration Message Text",
        "description": "Set the custom text of the passwordless/passkey registration message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message/email is sent when a user requests passwordless/passkey registration as email, to be able to configure on another device.  The Following Variables can be used: {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "AdminService_SetDefaultPasswordlessRegistrationMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetDefaultPasswordlessRegistrationMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceSetDefaultPasswordlessRegistrationMessageTextBody"
            }
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/password_change/{language_1}": {
      "get": {
        "summary": "Get Default Password Change Message Text",
        "description": "Get the default text of the password-changed message/email that is stored as translation files in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when the password of a user has been changed.",
        "operationId": "AdminService_GetDefaultPasswordChangeMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetDefaultPasswordChangeMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/password_change/{language_1}": {
      "get": {
        "summary": "Get Custom Password Change Message Text",
        "description": "Get the custom text of the password-changed message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when the password of a user has been changed.",
        "operationId": "AdminService_GetCustomPasswordChangeMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetCustomPasswordChangeMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Password Changed Message Text to Default",
        "description": "Removes the custom text of the password-changed message that is overwritten on the instance and triggers the text from the translation files stored in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_ResetCustomPasswordChangeMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ResetCustomPasswordChangeMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Default Password Changed Message Text",
        "description": "Set the custom text of the password-changed message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message/email is sent when the password of a user has been changed.  The Following Variables can be used: {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}",
        "operationId": "AdminService_SetDefaultPasswordChangeMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetDefaultPasswordChangeMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceSetDefaultPasswordChangeMessageTextBody"
            }
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/message/invite_user/{language_1}": {
      "get": {
        "summary": "Get Default Invite User Message Text",
        "description": "Get the default text of the invite user message/email that is stored as translation files in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when an invite code email is requested.",
        "operationId": "AdminService_GetDefaultInviteUserMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetDefaultInviteUserMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/message/invite_user/{language_1}": {
      "get": {
        "summary": "Get Custom Invite User Message Text",
        "description": "Get the custom text of the invite user message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when an invite code email is requested.",
        "operationId": "AdminService_GetCustomInviteUserMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetCustomInviteUserMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Invite User Message Text to Default",
        "description": "Removes the custom text of the invite user message that is overwritten on the instance and triggers the text from the translation files stored in ZITADEL itself. The text will be sent to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_ResetCustomInviteUserMessageTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ResetCustomInviteUserMessageTextToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message Texts"
        ]
      },
      "put": {
        "summary": "Set Default Invite User Message Text",
        "description": "Set the custom text of the invite user message/email that is overwritten on the instance as settings/database. The text will be sent to the users of all organizations, that do not have a custom text configured. The message is sent when an invite code email is requested. The Following Variables can be used: {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}} {{.ApplicationName}}",
        "operationId": "AdminService_SetDefaultInviteUserMessageText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetDefaultInviteUserMessageTextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceSetDefaultInviteUserMessageTextBody"
            }
          }
        ],
        "tags": [
          "Message Texts"
        ]
      }
    },
    "/text/default/login/{language_1}": {
      "get": {
        "summary": "Get Default Login Text",
        "description": "Get the default texts for the login and register UI of ZITADEL, which are stored as translation files in ZITADEL itself. The text will be shown to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_GetDefaultLoginTexts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetDefaultLoginTextsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Login Texts"
        ]
      }
    },
    "/text/login/{language_1}": {
      "get": {
        "summary": "Get Custom Login Text",
        "description": "Get the custom texts for the login and register UI of ZITADEL, which is overwritten on the instance as settings/database. The text will be shown to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_GetCustomLoginTexts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1GetCustomLoginTextsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Login Texts"
        ]
      },
      "delete": {
        "summary": "Reset Custom Login Text to Default",
        "description": "Removes the custom texts for the login and register UI of ZITADEL, which is overwritten on the instance and triggers the text from the translation files stored in ZITADEL itself. The text will be shown to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_ResetCustomLoginTextToDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ResetCustomLoginTextsToDefaultResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Login Texts"
        ]
      },
      "put": {
        "summary": "Set Default Login Text",
        "description": "Set the custom texts for the login and register UI of ZITADEL, which is overwritten on the instance as settings/database. The text will be shown to the users of all organizations, that do not have a custom text configured.",
        "operationId": "AdminService_SetCustomLoginText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1SetCustomLoginTextsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "language_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AdminServiceSetCustomLoginTextBody"
            }
          }
        ],
        "tags": [
          "Login Texts"
        ]
      }
    },
    "/members/roles/_search": {
      "post": {
        "summary": "List IAM Member Roles",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request returns all roles possible for a ZITADEL member on the instance level.",
        "operationId": "AdminService_ListIAMMemberRoles",
        "responses": {
          "200": {
            "description": "roles on the IAM of the user",
            "schema": {
              "$ref": "#/definitions/v1ListIAMMemberRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/members/_search": {
      "post": {
        "summary": "List IAM Members",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request returns all users with memberships on the instance level, matching the search queries. The search queries will be AND linked.",
        "operationId": "AdminService_ListIAMMembers",
        "responses": {
          "200": {
            "description": "members of the IAM",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ListIAMMembersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadeladminv1ListIAMMembersRequest"
            }
          }
        ],
        "tags": [
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/members": {
      "post": {
        "summary": "Add IAM Member",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request adds a new user to the members list with one or multiple roles.",
        "operationId": "AdminService_AddIAMMember",
        "responses": {
          "200": {
            "description": "Member added to the IAM",
            "schema": {
              "$ref": "#/definitions/v1AddIAMMemberResponse"
            }
          },
          "400": {
            "description": "user not found or invalid roles",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddIAMMemberRequest"
            }
          }
        ],
        "tags": [
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/members/{userId}": {
      "delete": {
        "summary": "Remove IAM Member",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request removes a user from the members list on an instance level. The user can still have roles on another level (organization, project)",
        "operationId": "AdminService_RemoveIAMMember",
        "responses": {
          "200": {
            "description": "Member of the IAM removed",
            "schema": {
              "$ref": "#/definitions/v1RemoveIAMMemberResponse"
            }
          },
          "400": {
            "description": "invalid user",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Members",
          "ZITADEL Administrators"
        ]
      },
      "put": {
        "summary": "Update IAM Member",
        "description": "Members are users with permission to administrate ZITADEL on different levels. This request changes the roles of an existing member. The whole roles list will be updated. Make sure to include roles that you don't want to change (remove).",
        "operationId": "AdminService_UpdateIAMMember",
        "responses": {
          "200": {
            "description": "Member of the IAM updated",
            "schema": {
              "$ref": "#/definitions/v1UpdateIAMMemberResponse"
            }
          },
          "400": {
            "description": "invalid user or roles",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminServiceUpdateIAMMemberBody"
            }
          }
        ],
        "tags": [
          "Members",
          "ZITADEL Administrators"
        ]
      }
    },
    "/views/_search": {
      "post": {
        "summary": "Returns all stored read models of ZITADEL\nviews are used for search optimisation and optimise request latencies\nthey represent the delta of the event happend on the objects",
        "operationId": "SystemService_ListViews",
        "responses": {
          "200": {
            "description": "Views for query operations",
            "schema": {
              "$ref": "#/definitions/zitadelsystemv1ListViewsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadelsystemv1ListViewsRequest"
            }
          }
        ],
        "tags": [
          "views"
        ]
      }
    },
    "/failedevents/_search": {
      "post": {
        "summary": "Returns event descriptions which cannot be processed.\nIt's possible that some events need some retries.\nFor example if the SMTP-API wasn't able to send an email at the first time",
        "operationId": "SystemService_ListFailedEvents",
        "responses": {
          "200": {
            "description": "Events which were not processed by the views",
            "schema": {
              "$ref": "#/definitions/zitadelsystemv1ListFailedEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zitadelsystemv1ListFailedEventsRequest"
            }
          }
        ],
        "tags": [
          "failed events"
        ]
      }
    },
    "/failedevents/{database}/{viewName}/{failedSequence}": {
      "delete": {
        "summary": "Remove Failed Events",
        "description": "Removes the event from the failed evens view, but not from the change stream. This call is useful if the system was able to process the event after some retries. e.g. if the second try of sending an email was successful. the first try produced a failed event. You can find out if it worked on the `failure_count` ",
        "operationId": "AdminService_RemoveFailedEvent",
        "responses": {
          "200": {
            "description": "Events removed from the list",
            "schema": {
              "$ref": "#/definitions/zitadeladminv1RemoveFailedEventResponse"
            }
          },
          "400": {
            "description": "failed event not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "database",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "failedSequence",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Failed Events"
        ]
      }
    },
    "/import": {
      "post": {
        "summary": "Import Data",
        "description": "Import data on an instance level to ZITADEL. It can be either directly in the request or you can point to a file on an S3 storage, from which the data should be loaded.",
        "operationId": "AdminService_ImportData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ImportDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ImportDataRequest"
            }
          }
        ],
        "tags": [
          "Import/Export"
        ]
      }
    },
    "/export": {
      "post": {
        "summary": "Export Data",
        "description": "Export data on an instance level to ZITADEL. It can be either directly exported in the response or you can point to a file on an S3 storage, where the data should be written.",
        "operationId": "AdminService_ExportData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExportDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExportDataRequest"
            }
          }
        ],
        "tags": [
          "Import/Export"
        ]
      }
    },
    "/events/types/_search": {
      "post": {
        "summary": "Event types",
        "description": "Returns a list of the possible event types in ZITADEL. This is used to filter the event types in the list events request.",
        "operationId": "AdminService_ListEventTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEventTypesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListEventTypesRequest"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/events/_search": {
      "post": {
        "summary": "Search Events",
        "description": "Returns a list of the possible event types in ZITADEL. This is used to filter the event types in the list events request.",
        "operationId": "AdminService_ListEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListEventsRequest"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/aggregates/types/_search": {
      "post": {
        "summary": "List Aggregate Types",
        "description": "Returns a list of the possible aggregate types in ZITADEL. This is used to filter the aggregate types in the list events request.",
        "operationId": "AdminService_ListAggregateTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAggregateTypesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListAggregateTypesRequest"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/features/login_default_org": {
      "put": {
        "summary": "Activates the \"LoginDefaultOrg\" feature by setting the flag to \"true\"\nThis is irreversible!\nOnce activated, the login UI will use the settings of the default org (and not from the instance) if not organization context is set",
        "operationId": "AdminService_ActivateFeatureLoginDefaultOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivateFeatureLoginDefaultOrgResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "AdminService"
        ]
      }
    },
    "/milestones/_search": {
      "post": {
        "summary": "Search Milestones",
        "description": "Returns a list of reached instance usage milestones.",
        "operationId": "AdminService_ListMilestones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMilestonesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListMilestonesRequest"
            }
          }
        ],
        "tags": [
          "Milestones"
        ]
      }
    },
    "/restrictions": {
      "get": {
        "summary": "Get the current feature restrictions for the instance",
        "description": "Undefined values mean that the feature is not restricted. If restrictions were never set, the instances features are not restricted, all properties are undefined and the details object is empty.",
        "operationId": "AdminService_GetRestrictions",
        "responses": {
          "200": {
            "description": "The status 200 is also returned if no restrictions were ever set. In this case, all feature restrictions are undefined.",
            "schema": {
              "$ref": "#/definitions/v1GetRestrictionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Feature Restrictions"
        ]
      },
      "put": {
        "summary": "Restrict the instances features",
        "description": "Undefined values don't change the current restriction. Zero values remove the current restriction.",
        "operationId": "AdminService_SetRestrictions",
        "responses": {
          "200": {
            "description": "Restrictions set.",
            "schema": {
              "$ref": "#/definitions/v1SetRestrictionsResponse"
            }
          },
          "400": {
            "description": "No restriction is defined.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetRestrictionsRequest"
            }
          }
        ],
        "tags": [
          "Feature Restrictions"
        ]
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get my user",
        "description": "Returns the full user object of the authenticated user including the profile, email, phone, etc ",
        "operationId": "AuthService_GetMyUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMyUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User"
        ]
      },
      "delete": {
        "summary": "Delete my user",
        "description": "Deletes the currently authenticated user. All authentication tokens will be removed and the user will not be able to make any request.",
        "operationId": "AuthService_RemoveMyUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveMyUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/users/me/changes/_search": {
      "post": {
        "summary": "Get My User History",
        "description": "Returns a list of changes/events that have happened on the authenticated user. It's the history of the user. Make sure to send a limit.",
        "operationId": "AuthService_ListMyUserChanges",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMyUserChangesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListMyUserChangesRequest"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/users/me/sessions/_search": {
      "post": {
        "summary": "Get My User Sessions",
        "description": "Returns a list of a user session for the user agent of the authenticated user. This can be used to switch accounts in the current application.",
        "operationId": "AuthService_ListMyUserSessions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMyUserSessionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListMyUserSessionsRequest"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/users/me/metadata/_search": {
      "post": {
        "summary": "Get My User Metadata",
        "description": "Returns a list of metadata of the authenticated user. Metadata is a key value list with additional information needed on the user.",
        "operationId": "AuthService_ListMyMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMyMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListMyMetadataRequest"
            }
          }
        ],
        "tags": [
          "User Metadata"
        ]
      }
    },
    "/users/me/metadata/{key}": {
      "get": {
        "summary": "Get My User Metadata By Key",
        "description": "Returns a metadata value by a specific key of the authenticated user. Metadata is a key value list with additional information needed on the user.",
        "operationId": "AuthService_GetMyMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMyMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Metadata"
        ]
      }
    },
    "/users/me/tokens/refresh/_search": {
      "post": {
        "summary": "Get Refresh Tokens",
        "description": "Returns the list of refresh tokens of the authenticated user.",
        "operationId": "AuthService_ListMyRefreshTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMyRefreshTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListMyRefreshTokensRequest"
            }
          }
        ],
        "tags": [
          "User Tokens"
        ]
      }
    },
    "/users/me/tokens/refresh/{id}": {
      "delete": {
        "summary": "Revoke Refresh Tokens",
        "description": "Revokes a single refresh token of the authorized user by its (token) id.",
        "operationId": "AuthService_RevokeMyRefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeMyRefreshTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Tokens"
        ]
      }
    },
    "/users/me/tokens/refresh/_revoke_all": {
      "post": {
        "summary": "Revoke All Refresh Tokens",
        "description": "Revokes all refresh tokens of the authenticated user.",
        "operationId": "AuthService_RevokeAllMyRefreshTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeAllMyRefreshTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RevokeAllMyRefreshTokensRequest"
            }
          }
        ],
        "tags": [
          "User Tokens"
        ]
      }
    },
    "/users/me/username": {
      "put": {
        "summary": "Change My Username",
        "description": "Changes the username of the authenticated user. The user has to log in with the newly created username afterward.",
        "operationId": "AuthService_UpdateMyUserName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateMyUserNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateMyUserNameRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/policies/passwords/complexity": {
      "get": {
        "summary": "Get Passwordcomplexity Policy",
        "description": "Returns the password complexity settings that should be used for the authenticated user. It is set either on an instance or organization level. This policy defines how the password should look.",
        "operationId": "AuthService_GetMyPasswordComplexityPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMyPasswordComplexityPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User Password",
          "Policies"
        ]
      }
    },
    "/users/me/password": {
      "put": {
        "summary": "Change Password",
        "description": "Changes the password of the authenticated user. Make sure the password follows the password complexity policy.",
        "operationId": "AuthService_UpdateMyPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateMyPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateMyPasswordRequest"
            }
          }
        ],
        "tags": [
          "User Password"
        ]
      }
    },
    "/users/me/profile": {
      "get": {
        "summary": "Get My Profile",
        "description": "Returns the profile information of the authenticated user, this includes given name, family name, etc.",
        "operationId": "AuthService_GetMyProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMyProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User Profile"
        ]
      },
      "put": {
        "summary": "Update My Profile",
        "description": "Change the profile information of the authenticated user. This includes information like given name, family name, language, etc.",
        "operationId": "AuthService_UpdateMyProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateMyProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateMyProfileRequest"
            }
          }
        ],
        "tags": [
          "User Profile"
        ]
      }
    },
    "/users/me/email": {
      "get": {
        "summary": "Get My Email",
        "description": "Returns the email address and the verified flag of the authenticated user.",
        "operationId": "AuthService_GetMyEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMyEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User Email"
        ]
      },
      "put": {
        "summary": "Update My Email",
        "description": "Change the email address of the authenticated user. A verification email will be sent to the given email address.",
        "operationId": "AuthService_SetMyEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetMyEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetMyEmailRequest"
            }
          }
        ],
        "tags": [
          "User Email"
        ]
      }
    },
    "/users/me/email/_verify": {
      "post": {
        "summary": "Verify My Email",
        "description": "Verify the email address of the authenticated user with the code that has been sent. State of the email address is verified after.",
        "operationId": "AuthService_VerifyMyEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyMyEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyMyEmailRequest"
            }
          }
        ],
        "tags": [
          "User Email"
        ]
      }
    },
    "/users/me/email/_resend_verification": {
      "post": {
        "summary": "Resend Email Verification",
        "description": "A new email will be sent to the last set email address of the authenticated user, the last set email address will be used.",
        "operationId": "AuthService_ResendMyEmailVerification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResendMyEmailVerificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResendMyEmailVerificationRequest"
            }
          }
        ],
        "tags": [
          "User Email"
        ]
      }
    },
    "/users/me/phone": {
      "get": {
        "summary": "Get My Phone",
        "description": "Returns the phone number of the authenticated user and if the state is verified or not.",
        "operationId": "AuthService_GetMyPhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMyPhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User Phone"
        ]
      },
      "delete": {
        "summary": "Remove Phone Number",
        "description": "The phone number of the authenticated user will be removed.",
        "operationId": "AuthService_RemoveMyPhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveMyPhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User Phone"
        ]
      },
      "put": {
        "summary": "Set My Phone",
        "description": "Sets a new phone number to the authenticated user. If a notification provider is configured the user will receive an sms with a code to authenticate the number.",
        "operationId": "AuthService_SetMyPhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetMyPhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetMyPhoneRequest"
            }
          }
        ],
        "tags": [
          "User Phone"
        ]
      }
    },
    "/users/me/phone/_verify": {
      "post": {
        "summary": "Verify Phone",
        "description": "Verify the phone number of the authenticated user, with the code that has been sent to the number. State of the phone number is verified after.",
        "operationId": "AuthService_VerifyMyPhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyMyPhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyMyPhoneRequest"
            }
          }
        ],
        "tags": [
          "User Phone"
        ]
      }
    },
    "/users/me/phone/_resend_verification": {
      "post": {
        "summary": "Resend Phone verification",
        "description": "Resends the verification notification to the last given phone number of the authenticated user. The notification provider has to be configured.",
        "operationId": "AuthService_ResendMyPhoneVerification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResendMyPhoneVerificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResendMyPhoneVerificationRequest"
            }
          }
        ],
        "tags": [
          "User Phone"
        ]
      }
    },
    "/users/me/avatar": {
      "delete": {
        "summary": "Remove My Avatar",
        "description": "Remove the avatar of the authenticated user. If no avatar is set a shortcut of the name of the user will be presented.",
        "operationId": "AuthService_RemoveMyAvatar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveMyAvatarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/users/me/idps/_search": {
      "post": {
        "summary": "List Social Logins",
        "description": "Returns a list of all linked identity providers/social logins of the user. (e. Google, Microsoft, AzureAD, etc.)",
        "operationId": "AuthService_ListMyLinkedIDPs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMyLinkedIDPsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListMyLinkedIDPsRequest"
            }
          }
        ],
        "tags": [
          "User Social Login"
        ]
      }
    },
    "/users/me/idps/{idpId}/{linkedUserId}": {
      "delete": {
        "summary": "Remove Social Login",
        "description": "Remove one of the linked social logins/identity providers of the authenticated user (e.g. Google, Microsoft, AzureAD, etc.). The user will not be able to log in with the given provider afterward. Make sure the user does have other possibilities to authenticate.",
        "operationId": "AuthService_RemoveMyLinkedIDP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveMyLinkedIDPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkedUserId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Social Login"
        ]
      }
    },
    "/users/me/auth_factors/_search": {
      "post": {
        "summary": "List Authentication Factors",
        "description": "Returns a list of possible authentication factors, multi-factor (MFA), second factor (2FA)",
        "operationId": "AuthService_ListMyAuthFactors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMyAuthFactorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/users/me/auth_factors/otp": {
      "delete": {
        "summary": "Remove One-Time Password (OTP)",
        "description": "Remove the configured One-Time Password (OTP) factor of the authenticated user. OTP is an authenticator app like Google/Microsoft Authenticator, Authy, etc. As only one OTP per user is allowed, the user will not have OTP as a second factor afterward.",
        "operationId": "AuthService_RemoveMyAuthFactorOTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveMyAuthFactorOTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User Authentication Factor"
        ]
      },
      "post": {
        "summary": "Add One-Time Password (OTP)",
        "description": "Add a new One-Time Password (OTP) factor to the authenticated user. OTP is an authenticator app like Google/Microsoft Authenticator, Authy, etc. Only one OTP per user is allowed. After adding a new OTP it has to be verified.",
        "operationId": "AuthService_AddMyAuthFactorOTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddMyAuthFactorOTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddMyAuthFactorOTPRequest"
            }
          }
        ],
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/users/me/auth_factors/otp/_verify": {
      "post": {
        "summary": "Verify One-Time Password (OTP)",
        "description": "Verify the last added One-Time Password (OTP) factor of the authenticated user. OTP is an authenticator app like Google/Microsoft Authenticator, Authy, etc. Only one OTP per user is allowed.",
        "operationId": "AuthService_VerifyMyAuthFactorOTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyMyAuthFactorOTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyMyAuthFactorOTPRequest"
            }
          }
        ],
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/users/me/auth_factors/otp_sms": {
      "delete": {
        "summary": "Remove One-Time Password (OTP) SMS",
        "description": "Remove the configured One-Time Password (OTP) SMS factor of the authenticated user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.",
        "operationId": "AuthService_RemoveMyAuthFactorOTPSMS",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveMyAuthFactorOTPSMSResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User Authentication Factor"
        ]
      },
      "post": {
        "summary": "Add One-Time Password (OTP) SMS",
        "description": "Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor.",
        "operationId": "AuthService_AddMyAuthFactorOTPSMS",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddMyAuthFactorOTPSMSResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddMyAuthFactorOTPSMSRequest"
            }
          }
        ],
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/users/me/auth_factors/otp_email": {
      "delete": {
        "summary": "Remove One-Time Password (OTP) Email",
        "description": "Remove the configured One-Time Password (OTP) Email factor of the authenticated user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.",
        "operationId": "AuthService_RemoveMyAuthFactorOTPEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveMyAuthFactorOTPEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User Authentication Factor"
        ]
      },
      "post": {
        "summary": "Add One-Time Password (OTP) Email",
        "description": "Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor.",
        "operationId": "AuthService_AddMyAuthFactorOTPEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddMyAuthFactorOTPEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddMyAuthFactorOTPEmailRequest"
            }
          }
        ],
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/users/me/auth_factors/u2f": {
      "post": {
        "summary": "Add Universal Second Factor (U2F)",
        "description": "Add a new Universal Second Factor (U2F) to the authenticated user. U2F is a device-dependent authentication like FingerScan, FaceID, WindowHello, etc. The factor has to be verified after adding. Multiple factors can be added.",
        "operationId": "AuthService_AddMyAuthFactorU2F",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddMyAuthFactorU2FResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddMyAuthFactorU2FRequest"
            }
          }
        ],
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/users/me/auth_factors/u2f/_verify": {
      "post": {
        "summary": "Add Universal Second Factor (U2F)",
        "description": "Verify the last added new Universal Second Factor (U2F) to the authenticated user.",
        "operationId": "AuthService_VerifyMyAuthFactorU2F",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyMyAuthFactorU2FResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyMyAuthFactorU2FRequest"
            }
          }
        ],
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/users/me/auth_factors/u2f/{tokenId}": {
      "delete": {
        "summary": "Remove Universal Second Factor (U2F)",
        "description": "Remove a specific Universal Second Factor (U2F) from the authenticated user by sending the id.",
        "operationId": "AuthService_RemoveMyAuthFactorU2F",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveMyAuthFactorU2FResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/users/me/passwordless/_search": {
      "post": {
        "summary": "List Passkey",
        "description": "Get the list of configured passkey authentication methods. Like FingerPrint, FaceID, WindowsHello, HardwareToken, etc.",
        "operationId": "AuthService_ListMyPasswordless",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMyPasswordlessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/users/me/passwordless": {
      "post": {
        "summary": "Add passkey",
        "description": "Add a new passkey authentication method to the authenticated user. Like FingerPrint, FaceID, WindowsHello, HardwareToken, etc. Multiple passkeys can be configured.",
        "operationId": "AuthService_AddMyPasswordless",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddMyPasswordlessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddMyPasswordlessRequest"
            }
          }
        ],
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/users/me/passwordless/_link": {
      "post": {
        "summary": "Add passkey link",
        "description": "Adds a new passkey authenticator link to the authenticated user and returns it in the response. This link enables the user to register a new device if current passkey devices are all platform authenticators. e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone",
        "operationId": "AuthService_AddMyPasswordlessLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddMyPasswordlessLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddMyPasswordlessLinkRequest"
            }
          }
        ],
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/users/me/passwordless/_send_link": {
      "post": {
        "summary": "Send passkey link",
        "description": "Adds a new passkey authenticator link to the authenticated user and sends it to the registered email address. This link enables the user to register a new device if current passkey devices are all platform authenticators. e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone",
        "operationId": "AuthService_SendMyPasswordlessLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SendMyPasswordlessLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendMyPasswordlessLinkRequest"
            }
          }
        ],
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/users/me/passwordless/_verify": {
      "post": {
        "summary": "Verify passkey",
        "description": "Verifies the last added passkey configuration of the authenticated user.",
        "operationId": "AuthService_VerifyMyPasswordless",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyMyPasswordlessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyMyPasswordlessRequest"
            }
          }
        ],
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/users/me/passwordless/{tokenId}": {
      "delete": {
        "summary": "Remove passkey",
        "description": "Remove a passkey configuration from the authenticated user. The user will not be able to log in with that configuration afterward. Make sure the user has other possibilities to log in.",
        "operationId": "AuthService_RemoveMyPasswordless",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveMyPasswordlessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Authentication Factor"
        ]
      }
    },
    "/usergrants/me/_search": {
      "post": {
        "summary": "List My Authorizations/Grants",
        "description": "Returns a list of the authorizations/user grants the authenticated user has. User grants consist of an organization, a project and 1-n roles.",
        "operationId": "AuthService_ListMyUserGrants",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMyUserGrantsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListMyUserGrantsRequest"
            }
          }
        ],
        "tags": [
          "User Authorizations/Grants"
        ]
      }
    },
    "/global/projectorgs/_search": {
      "post": {
        "summary": "List My Organizations",
        "description": "Returns a list of the organizations where the authenticated user has any authorizations/user grants. The request is made in the context of the requested project. This request can be used in multi-tenancy applications to show the user a tenant switcher.",
        "operationId": "AuthService_ListMyProjectOrgs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMyProjectOrgsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListMyProjectOrgsRequest"
            }
          }
        ],
        "tags": [
          "User Authorizations/Grants"
        ]
      }
    },
    "/permissions/zitadel/me/_search": {
      "post": {
        "summary": "List My ZITADEL Permissions",
        "description": "Returns a list of permissions the authenticated user has in ZITADEL based on the manager roles the user has. (e.g: ORG_OWNER = org.read, org.write, ...).",
        "operationId": "AuthService_ListMyZitadelPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMyZitadelPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User Authorizations/Grants"
        ]
      }
    },
    "/permissions/me/_search": {
      "post": {
        "summary": "List My Project Roles",
        "description": "Returns a list of roles for the authenticated user and for the requesting project (based on the token).",
        "operationId": "AuthService_ListMyProjectPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMyProjectPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "User Authorizations/Grants"
        ]
      }
    },
    "/memberships/me/_search": {
      "post": {
        "summary": "List My ZITADEL Manager Roles",
        "description": "Show all the management roles my user has in ZITADEL (ZITADEL Manager).",
        "operationId": "AuthService_ListMyMemberships",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMyMembershipsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListMyMembershipsRequest"
            }
          }
        ],
        "tags": [
          "User Memberships"
        ]
      }
    },
    "/v2/features/system": {
      "get": {
        "summary": "Get system level features",
        "description": "Returns all configured features for the system. Unset fields mean the feature is the current system default.",
        "operationId": "FeatureService_GetSystemFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2GetSystemFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "FeatureService"
        ]
      },
      "delete": {
        "summary": "Reset system level features",
        "description": "Deletes ALL configured features for the system, reverting the behaviors to system defaults.",
        "operationId": "FeatureService_ResetSystemFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2ResetSystemFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "FeatureService"
        ]
      },
      "put": {
        "summary": "Set system level features",
        "description": "Configure and set features that apply to the complete system. Only fields present in the request are set or unset.",
        "operationId": "FeatureService_SetSystemFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2SetSystemFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/featurev2SetSystemFeaturesRequest"
            }
          }
        ],
        "tags": [
          "FeatureService"
        ]
      }
    },
    "/v2/features/instance": {
      "get": {
        "summary": "Get instance level features",
        "description": "Returns all configured features for an instance. Unset fields mean the feature is the current system default.",
        "operationId": "FeatureService_GetInstanceFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2GetInstanceFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "inheritance",
            "description": "Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource's ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the instance, it will be omitted from the response or Not Found is returned when the instance has no features flags at all.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      },
      "delete": {
        "summary": "Reset instance level features",
        "description": "Deletes ALL configured features for an instance, reverting the behaviors to system defaults.",
        "operationId": "FeatureService_ResetInstanceFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2ResetInstanceFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "FeatureService"
        ]
      },
      "put": {
        "summary": "Set instance level features",
        "description": "Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.",
        "operationId": "FeatureService_SetInstanceFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2SetInstanceFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/featurev2SetInstanceFeaturesRequest"
            }
          }
        ],
        "tags": [
          "FeatureService"
        ]
      }
    },
    "/v2/features/organization/{organizationId}": {
      "get": {
        "summary": "Get organization level features",
        "description": "Returns all configured features for an organization. Unset fields mean the feature is the current instance default.",
        "operationId": "FeatureService_GetOrganizationFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2GetOrganizationFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "inheritance",
            "description": "Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource's ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the organization, it will be omitted from the response or Not Found is returned when the organization has no features flags at all.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      },
      "delete": {
        "summary": "Reset organization level features",
        "description": "Deletes ALL configured features for an organization, reverting the behaviors to instance defaults.",
        "operationId": "FeatureService_ResetOrganizationFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2ResetOrganizationFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      },
      "put": {
        "summary": "Set organization level features",
        "description": "Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.",
        "operationId": "FeatureService_SetOrganizationFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2SetOrganizationFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/featurev2FeatureServiceSetOrganizationFeaturesBody"
            }
          }
        ],
        "tags": [
          "FeatureService"
        ]
      }
    },
    "/v2/features/user/{userId}": {
      "get": {
        "summary": "Get organization level features",
        "description": "Returns all configured features for an organization. Unset fields mean the feature is the current instance default.",
        "operationId": "FeatureService_GetUserFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2GetUserFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "inheritance",
            "description": "Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource's ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the user, it will be ommitted from the response or Not Found is returned when the user has no features flags at all.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      },
      "delete": {
        "summary": "Reset user level features",
        "description": "Deletes ALL configured features for a user, reverting the behaviors to organization defaults.",
        "operationId": "FeatureService_ResetUserFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2ResetUserFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      },
      "put": {
        "summary": "Set user level features",
        "description": "Configure and set features that apply to an user. Only fields present in the request are set or unset.",
        "operationId": "FeatureService_SetUserFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2SetUserFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/featurev2FeatureServiceSetUserFeaturesBody"
            }
          }
        ],
        "tags": [
          "FeatureService"
        ]
      }
    },
    "/v2beta/features/system": {
      "get": {
        "summary": "Get system level features",
        "description": "Returns all configured features for the system. Unset fields mean the feature is the current system default.",
        "operationId": "FeatureService_GetSystemFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2betaGetSystemFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "FeatureService"
        ]
      },
      "delete": {
        "summary": "Reset system level features",
        "description": "Deletes ALL configured features for the system, reverting the behaviors to system defaults.",
        "operationId": "FeatureService_ResetSystemFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2betaResetSystemFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "FeatureService"
        ]
      },
      "put": {
        "summary": "Set system level features",
        "description": "Configure and set features that apply to the complete system. Only fields present in the request are set or unset.",
        "operationId": "FeatureService_SetSystemFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2betaSetSystemFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/featurev2betaSetSystemFeaturesRequest"
            }
          }
        ],
        "tags": [
          "FeatureService"
        ]
      }
    },
    "/v2beta/features/instance": {
      "get": {
        "summary": "Get instance level features",
        "description": "Returns all configured features for an instance. Unset fields mean the feature is the current system default.",
        "operationId": "FeatureService_GetInstanceFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2betaGetInstanceFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "inheritance",
            "description": "Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource's ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the instance, it will be omitted from the response or Not Found is returned when the instance has no features flags at all.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      },
      "delete": {
        "summary": "Reset instance level features",
        "description": "Deletes ALL configured features for an instance, reverting the behaviors to system defaults.",
        "operationId": "FeatureService_ResetInstanceFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2betaResetInstanceFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "FeatureService"
        ]
      },
      "put": {
        "summary": "Set instance level features",
        "description": "Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.",
        "operationId": "FeatureService_SetInstanceFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2betaSetInstanceFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/featurev2betaSetInstanceFeaturesRequest"
            }
          }
        ],
        "tags": [
          "FeatureService"
        ]
      }
    },
    "/v2beta/features/organization/{organizationId}": {
      "get": {
        "summary": "Get organization level features",
        "description": "Returns all configured features for an organization. Unset fields mean the feature is the current instance default.",
        "operationId": "FeatureService_GetOrganizationFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2betaGetOrganizationFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "inheritance",
            "description": "Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource's ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the organization, it will be omitted from the response or Not Found is returned when the organization has no features flags at all.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      },
      "delete": {
        "summary": "Reset organization level features",
        "description": "Deletes ALL configured features for an organization, reverting the behaviors to instance defaults.",
        "operationId": "FeatureService_ResetOrganizationFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2betaResetOrganizationFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      },
      "put": {
        "summary": "Set organization level features",
        "description": "Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.",
        "operationId": "FeatureService_SetOrganizationFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2betaSetOrganizationFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/featurev2betaFeatureServiceSetOrganizationFeaturesBody"
            }
          }
        ],
        "tags": [
          "FeatureService"
        ]
      }
    },
    "/v2beta/features/user/{userId}": {
      "get": {
        "summary": "Get organization level features",
        "description": "Returns all configured features for an organization. Unset fields mean the feature is the current instance default.",
        "operationId": "FeatureService_GetUserFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2betaGetUserFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "inheritance",
            "description": "Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource's ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the user, it will be ommitted from the response or Not Found is returned when the user has no features flags at all.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      },
      "delete": {
        "summary": "Reset user level features",
        "description": "Deletes ALL configured features for a user, reverting the behaviors to organization defaults.",
        "operationId": "FeatureService_ResetUserFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2betaResetUserFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      },
      "put": {
        "summary": "Set user level features",
        "description": "Configure and set features that apply to an user. Only fields present in the request are set or unset.",
        "operationId": "FeatureService_SetUserFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/featurev2betaSetUserFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/featurev2betaFeatureServiceSetUserFeaturesBody"
            }
          }
        ],
        "tags": [
          "FeatureService"
        ]
      }
    },
    "/v2/idps/{id}": {
      "get": {
        "summary": "Get identity provider (IdP) by ID",
        "description": "Returns an identity provider (social/enterprise login) by its ID, which can be of the type Google, AzureAD, etc.",
        "operationId": "IdentityProviderService_GetIDPByID",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/idpv2GetIDPByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IdentityProviderService"
        ]
      }
    },
    "/v2/oidc/auth_requests/{authRequestId}": {
      "get": {
        "summary": "Get OIDC Auth Request details",
        "description": "Get OIDC Auth Request details by ID, obtained from the redirect URL. Returns details that are parsed from the application's Auth Request.",
        "operationId": "OIDCService_GetAuthRequest",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/oidcv2GetAuthRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "authRequestId",
            "description": "ID of the Auth Request, as obtained from the redirect URL.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OIDCService"
        ]
      },
      "post": {
        "summary": "Finalize an Auth Request and get the callback URL.",
        "description": "Finalize an Auth Request and get the callback URL for success or failure. The user must be redirected to the URL in order to inform the application about the success or failure. On success, the URL contains details for the application to obtain the tokens. This method can only be called once for an Auth request.",
        "operationId": "OIDCService_CreateCallback",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/oidcv2CreateCallbackResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "authRequestId",
            "description": "ID of the Auth Request.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oidcv2OIDCServiceCreateCallbackBody"
            }
          }
        ],
        "tags": [
          "OIDCService"
        ]
      }
    },
    "/v2beta/oidc/auth_requests/{authRequestId}": {
      "get": {
        "summary": "Get OIDC Auth Request details",
        "description": "Get OIDC Auth Request details by ID, obtained from the redirect URL. Returns details that are parsed from the application's Auth Request.",
        "operationId": "OIDCService_GetAuthRequest",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/oidcv2betaGetAuthRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "authRequestId",
            "description": "ID of the Auth Request, as obtained from the redirect URL.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OIDCService"
        ]
      },
      "post": {
        "summary": "Finalize an Auth Request and get the callback URL.",
        "description": "Finalize an Auth Request and get the callback URL for success or failure. The user must be redirected to the URL in order to inform the application about the success or failure. On success, the URL contains details for the application to obtain the tokens. This method can only be called once for an Auth request.",
        "operationId": "OIDCService_CreateCallback",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/oidcv2betaCreateCallbackResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "authRequestId",
            "description": "Set this field when the authorization flow failed. It creates a callback URL to the application, with the error details set.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oidcv2betaOIDCServiceCreateCallbackBody"
            }
          }
        ],
        "tags": [
          "OIDCService"
        ]
      }
    },
    "/v2/users/human": {
      "post": {
        "summary": "Create a new human user",
        "description": "Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.",
        "operationId": "UserService_AddHumanUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2AddHumanUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2AddHumanUserRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}": {
      "get": {
        "summary": "User by ID",
        "description": "Returns the full user object (human or machine) including the profile, email, etc..",
        "operationId": "UserService_GetUserByID",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2GetUserByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "User ID of the user you like to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "delete": {
        "summary": "Delete user",
        "description": "The state of the user will be changed to 'deleted'. The user will not be able to log in anymore. Endpoints requesting this user will return an error 'User not found..",
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2DeleteUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users": {
      "post": {
        "summary": "Search Users",
        "description": "Search for users. By default, we will return all users of your instance that you have permission to read. Make sure to include a limit and sorting for pagination.",
        "operationId": "UserService_ListUsers",
        "responses": {
          "200": {
            "description": "A list of all users matching the query",
            "schema": {
              "$ref": "#/definitions/userv2ListUsersResponse"
            }
          },
          "400": {
            "description": "invalid list query",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2ListUsersRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/email": {
      "post": {
        "summary": "Change the user email",
        "description": "Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email..",
        "operationId": "UserService_SetEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2SetEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceSetEmailBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/email/resend": {
      "post": {
        "summary": "Resend code to verify user email",
        "description": "Resend code to verify user email.",
        "operationId": "UserService_ResendEmailCode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2ResendEmailCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceResendEmailCodeBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/email/send": {
      "post": {
        "summary": "Send code to verify user email",
        "description": "Send code to verify user email.",
        "operationId": "UserService_SendEmailCode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2SendEmailCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceSendEmailCodeBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/email/verify": {
      "post": {
        "summary": "Verify the email",
        "description": "Verify the email with the generated code.",
        "operationId": "UserService_VerifyEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2VerifyEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceVerifyEmailBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/phone": {
      "delete": {
        "summary": "Delete the user phone",
        "description": "Delete the phone number of a user.",
        "operationId": "UserService_RemovePhone",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2RemovePhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceRemovePhoneBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Set the user phone",
        "description": "Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms..",
        "operationId": "UserService_SetPhone",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2SetPhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceSetPhoneBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/phone/resend": {
      "post": {
        "summary": "Resend code to verify user phone",
        "description": "Resend code to verify user phone.",
        "operationId": "UserService_ResendPhoneCode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2ResendPhoneCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceResendPhoneCodeBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/phone/verify": {
      "post": {
        "summary": "Verify the phone",
        "description": "Verify the phone with the generated code..",
        "operationId": "UserService_VerifyPhone",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2VerifyPhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceVerifyPhoneBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/human/{userId}": {
      "put": {
        "summary": "Update User",
        "description": "Update all information from a user..",
        "operationId": "UserService_UpdateHumanUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2UpdateHumanUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceUpdateHumanUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/deactivate": {
      "post": {
        "summary": "Deactivate user",
        "description": "The state of the user will be changed to 'deactivated'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'deactivated'. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data..",
        "operationId": "UserService_DeactivateUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2DeactivateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceDeactivateUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/reactivate": {
      "post": {
        "summary": "Reactivate user",
        "description": "Reactivate a user with the state 'deactivated'. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state 'deactivated'..",
        "operationId": "UserService_ReactivateUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2ReactivateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceReactivateUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/lock": {
      "post": {
        "summary": "Lock user",
        "description": "The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..",
        "operationId": "UserService_LockUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2LockUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceLockUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/unlock": {
      "post": {
        "summary": "Unlock user",
        "description": "The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..",
        "operationId": "UserService_UnlockUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2UnlockUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceUnlockUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/passkeys": {
      "post": {
        "summary": "Start the registration of passkey for a user",
        "description": "Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey..",
        "operationId": "UserService_RegisterPasskey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2RegisterPasskeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceRegisterPasskeyBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/passkeys/{passkeyId}": {
      "delete": {
        "summary": "Remove passkey from a user",
        "description": "Remove passkey from a user.",
        "operationId": "UserService_RemovePasskey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RemovePasskeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "passkeyId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Verify a passkey for a user",
        "description": "Verify the passkey registration with the public key credential..",
        "operationId": "UserService_VerifyPasskeyRegistration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2VerifyPasskeyRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "passkeyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceVerifyPasskeyRegistrationBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/passkeys/registration_link": {
      "post": {
        "summary": "Create a passkey registration link for a user",
        "description": "Create a passkey registration link which includes a code and either return it or send it to the user..",
        "operationId": "UserService_CreatePasskeyRegistrationLink",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2CreatePasskeyRegistrationLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceCreatePasskeyRegistrationLinkBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/passkeys/_search": {
      "post": {
        "summary": "List passkeys of an user",
        "description": "List passkeys of an user",
        "operationId": "UserService_ListPasskeys",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2ListPasskeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceListPasskeysBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/u2f": {
      "post": {
        "summary": "Start the registration of a u2f token for a user",
        "description": "Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token..",
        "operationId": "UserService_RegisterU2F",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2RegisterU2FResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceRegisterU2FBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/u2f/{u2fId}": {
      "delete": {
        "summary": "Remove u2f token from a user",
        "description": "Remove u2f token from a user",
        "operationId": "UserService_RemoveU2F",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RemoveU2FResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "u2fId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Verify a u2f token for a user",
        "description": "Verify the u2f token registration with the public key credential..",
        "operationId": "UserService_VerifyU2FRegistration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2VerifyU2FRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "u2fId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceVerifyU2FRegistrationBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/totp": {
      "delete": {
        "summary": "Remove TOTP generator from a user",
        "description": "Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.",
        "operationId": "UserService_RemoveTOTP",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2RemoveTOTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Start the registration of a TOTP generator for a user",
        "description": "Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device..",
        "operationId": "UserService_RegisterTOTP",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2RegisterTOTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceRegisterTOTPBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/totp/verify": {
      "post": {
        "summary": "Verify a TOTP generator for a user",
        "description": "Verify the TOTP registration with a generated code..",
        "operationId": "UserService_VerifyTOTPRegistration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2VerifyTOTPRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceVerifyTOTPRegistrationBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/otp_sms": {
      "delete": {
        "summary": "Remove One-Time Password (OTP) SMS from a user",
        "description": "Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.",
        "operationId": "UserService_RemoveOTPSMS",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2RemoveOTPSMSResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Add OTP SMS for a user",
        "description": "Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor..",
        "operationId": "UserService_AddOTPSMS",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2AddOTPSMSResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceAddOTPSMSBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/otp_email": {
      "delete": {
        "summary": "Remove One-Time Password (OTP) Email from a user",
        "description": "Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.",
        "operationId": "UserService_RemoveOTPEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2RemoveOTPEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Add OTP Email for a user",
        "description": "Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor..",
        "operationId": "UserService_AddOTPEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2AddOTPEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceAddOTPEmailBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/idp_intents": {
      "post": {
        "summary": "Start flow with an identity provider",
        "description": "Start a flow with an identity provider, for external login, registration or linking..",
        "operationId": "UserService_StartIdentityProviderIntent",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2StartIdentityProviderIntentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2StartIdentityProviderIntentRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/idp_intents/{idpIntentId}": {
      "post": {
        "summary": "Retrieve the information returned by the identity provider",
        "description": "Retrieve the information returned by the identity provider for registration or updating an existing user with new information..",
        "operationId": "UserService_RetrieveIdentityProviderIntent",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2RetrieveIdentityProviderIntentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpIntentId",
            "description": "ID of the idp intent, previously returned on the success response of the IDP callback",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceRetrieveIdentityProviderIntentBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/links": {
      "post": {
        "summary": "Add link to an identity provider to an user",
        "description": "Add link to an identity provider to an user..",
        "operationId": "UserService_AddIDPLink",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2AddIDPLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceAddIDPLinkBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/links/_search": {
      "post": {
        "summary": "List links to an identity provider of an user",
        "description": "List links to an identity provider of an user.",
        "operationId": "UserService_ListIDPLinks",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2ListIDPLinksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceListIDPLinksBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/links/{idpId}/{linkedUserId}": {
      "delete": {
        "summary": "Remove link of an identity provider to an user",
        "description": "Remove link of an identity provider to an user.",
        "operationId": "UserService_RemoveIDPLink",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RemoveIDPLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "idpId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkedUserId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceRemoveIDPLinkBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/password_reset": {
      "post": {
        "summary": "Request a code to reset a password",
        "description": "Request a code to reset a password..",
        "operationId": "UserService_PasswordReset",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2PasswordResetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServicePasswordResetBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/password": {
      "post": {
        "summary": "Change password",
        "description": "Change the password of a user with either a verification code or the current password..",
        "operationId": "UserService_SetPassword",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2SetPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2UserServiceSetPasswordBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/authentication_methods": {
      "get": {
        "summary": "List all possible authentication methods of a user",
        "description": "List all possible authentication methods of a user like password, passwordless, (T)OTP and more..",
        "operationId": "UserService_ListAuthenticationMethodTypes",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2ListAuthenticationMethodTypesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainQuery.includeWithoutDomain",
            "description": "List also auth method types without domain information like passkey and U2F added through V1 APIs / Login UI.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "domainQuery.domain",
            "description": "List only auth methods with specific domain.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/authentication_factors/_search": {
      "post": {
        "operationId": "UserService_ListAuthenticationFactors",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2ListAuthenticationFactorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authFactors",
            "description": "Specify the Auth Factors you are interested in",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "OTP",
                "OTP_SMS",
                "OTP_EMAIL",
                "U2F"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "states",
            "description": "Specify the state of the Auth Factors",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "AUTH_FACTOR_STATE_UNSPECIFIED",
                "AUTH_FACTOR_STATE_NOT_READY",
                "AUTH_FACTOR_STATE_READY",
                "AUTH_FACTOR_STATE_REMOVED"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/invite_code": {
      "post": {
        "summary": "Create an invite code for a user",
        "description": "Create an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization's available methods.",
        "operationId": "UserService_CreateInviteCode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2CreateInviteCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceCreateInviteCodeBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/invite_code/resend": {
      "post": {
        "summary": "Resend an invite code for a user",
        "description": "Resend an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization's available methods.\nA resend is only possible if a code has been created previously and sent to the user. If there is no code or it was directly returned, an error will be returned.",
        "operationId": "UserService_ResendInviteCode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2ResendInviteCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/invite_code/verify": {
      "post": {
        "summary": "Verify an invite code for a user",
        "description": "Verify the invite code of a user previously issued. This will set their email to a verified state and\nallow the user to set up their first authentication method (password, passkeys, IdP) depending on the organization's available methods.",
        "operationId": "UserService_VerifyInviteCode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2VerifyInviteCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceVerifyInviteCodeBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/organizations": {
      "post": {
        "summary": "Create an Organization",
        "description": "Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.",
        "operationId": "OrganizationService_AddOrganization",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/orgv2AddOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/orgv2AddOrganizationRequest"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/v2/organizations/_search": {
      "post": {
        "summary": "Search Organizations",
        "description": "Search for Organizations. By default, we will return all organization of the instance. Make sure to include a limit and sorting for pagination..",
        "operationId": "OrganizationService_ListOrganizations",
        "responses": {
          "200": {
            "description": "A list of all organizations matching the query",
            "schema": {
              "$ref": "#/definitions/v2ListOrganizationsResponse"
            }
          },
          "400": {
            "description": "invalid list query",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ListOrganizationsRequest"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/v2beta/users/human": {
      "post": {
        "summary": "Create a new human user",
        "description": "Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA)",
        "operationId": "UserService_AddHumanUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaAddHumanUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaAddHumanUserRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}": {
      "get": {
        "summary": "User by ID",
        "description": "Returns the full user object (human or machine) including the profile, email, etc.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_GetUserByID",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaGetUserByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "User ID of the user you like to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      },
      "delete": {
        "summary": "Delete user",
        "description": "The state of the user will be changed to 'deleted'. The user will not be able to log in anymore. Endpoints requesting this user will return an error 'User not found.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaDeleteUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      },
      "put": {
        "summary": "Update User",
        "description": "Update all information from a user.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_UpdateHumanUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaUpdateHumanUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "profile.givenName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "profile.familyName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "profile.nickName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "profile.displayName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "profile.preferredLanguage",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "profile.gender",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "GENDER_UNSPECIFIED",
              "GENDER_FEMALE",
              "GENDER_MALE",
              "GENDER_DIVERSE"
            ],
            "default": "GENDER_UNSPECIFIED"
          },
          {
            "name": "email.email",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "email.sendCode.urlTemplate",
            "description": "\"Optionally set a url_template, which will be used in the verification mail sent by ZITADEL to guide the user to your verification page. If no template is set, the default ZITADEL url will be used.\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email.isVerified",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "phone.phone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone.isVerified",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "password.password.password",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "password.password.changeRequired",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "password.hashedPassword.hash",
            "description": "\"Encoded hash of a password in Modular Crypt Format: https://zitadel.com/docs/concepts/architecture/secrets#hashed-secrets\"",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "password.hashedPassword.changeRequired",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "password.currentPassword",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "password.verificationCode",
            "description": "\"the verification code generated during password reset request\"",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users": {
      "post": {
        "summary": "Search Users",
        "description": "Search for users. By default, we will return all users of your instance that you have permission to read. Make sure to include a limit and sorting for pagination.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_ListUsers",
        "responses": {
          "200": {
            "description": "A list of all users matching the query",
            "schema": {
              "$ref": "#/definitions/userv2betaListUsersResponse"
            }
          },
          "400": {
            "description": "invalid list query",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaListUsersRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/email": {
      "post": {
        "summary": "Change the user email",
        "description": "Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_SetEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaSetEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceSetEmailBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/email/resend": {
      "post": {
        "summary": "Resend code to verify user email",
        "description": "Resend code to verify user email\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_ResendEmailCode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaResendEmailCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceResendEmailCodeBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/email/verify": {
      "post": {
        "summary": "Verify the email",
        "description": "Verify the email with the generated code.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_VerifyEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaVerifyEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceVerifyEmailBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/phone": {
      "delete": {
        "summary": "Delete the user phone",
        "description": "Delete the phone number of a user.",
        "operationId": "UserService_RemovePhone",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaRemovePhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceRemovePhoneBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      },
      "post": {
        "summary": "Set the user phone",
        "description": "Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_SetPhone",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaSetPhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceSetPhoneBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/phone/resend": {
      "post": {
        "summary": "Resend code to verify user phone",
        "description": "Resend code to verify user phone\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_ResendPhoneCode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaResendPhoneCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceResendPhoneCodeBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/phone/verify": {
      "post": {
        "summary": "Verify the phone",
        "description": "Verify the phone with the generated code.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_VerifyPhone",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaVerifyPhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceVerifyPhoneBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/deactivate": {
      "post": {
        "summary": "Deactivate user",
        "description": "The state of the user will be changed to 'deactivated'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'deactivated'. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_DeactivateUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaDeactivateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceDeactivateUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/reactivate": {
      "post": {
        "summary": "Reactivate user",
        "description": "Reactivate a user with the state 'deactivated'. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state 'deactivated'.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_ReactivateUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaReactivateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceReactivateUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/lock": {
      "post": {
        "summary": "Lock user",
        "description": "The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.).\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_LockUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaLockUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceLockUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/unlock": {
      "post": {
        "summary": "Unlock user",
        "description": "The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.).\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_UnlockUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaUnlockUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceUnlockUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/passkeys": {
      "post": {
        "summary": "Start the registration of passkey for a user",
        "description": "Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_RegisterPasskey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaRegisterPasskeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceRegisterPasskeyBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/passkeys/{passkeyId}": {
      "post": {
        "summary": "Verify a passkey for a user",
        "description": "Verify the passkey registration with the public key credential.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_VerifyPasskeyRegistration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaVerifyPasskeyRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "passkeyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceVerifyPasskeyRegistrationBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/passkeys/registration_link": {
      "post": {
        "summary": "Create a passkey registration link for a user",
        "description": "Create a passkey registration link which includes a code and either return it or send it to the user.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_CreatePasskeyRegistrationLink",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaCreatePasskeyRegistrationLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceCreatePasskeyRegistrationLinkBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/u2f": {
      "post": {
        "summary": "Start the registration of a u2f token for a user",
        "description": "Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_RegisterU2F",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaRegisterU2FResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceRegisterU2FBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/u2f/{u2fId}": {
      "post": {
        "summary": "Verify a u2f token for a user",
        "description": "Verify the u2f token registration with the public key credential.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_VerifyU2FRegistration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaVerifyU2FRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "u2fId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceVerifyU2FRegistrationBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/totp": {
      "delete": {
        "summary": "Remove TOTP generator from a user",
        "description": "Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_RemoveTOTP",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaRemoveTOTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      },
      "post": {
        "summary": "Start the registration of a TOTP generator for a user",
        "description": "Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_RegisterTOTP",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaRegisterTOTPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceRegisterTOTPBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/totp/verify": {
      "post": {
        "summary": "Verify a TOTP generator for a user",
        "description": "Verify the TOTP registration with a generated code.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_VerifyTOTPRegistration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaVerifyTOTPRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceVerifyTOTPRegistrationBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/otp_sms": {
      "delete": {
        "summary": "Remove One-Time Password (OTP) SMS from a user",
        "description": "Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_RemoveOTPSMS",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaRemoveOTPSMSResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      },
      "post": {
        "summary": "Add OTP SMS for a user",
        "description": "Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_AddOTPSMS",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaAddOTPSMSResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceAddOTPSMSBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/otp_email": {
      "delete": {
        "summary": "Remove One-Time Password (OTP) Email from a user",
        "description": "Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_RemoveOTPEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaRemoveOTPEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      },
      "post": {
        "summary": "Add OTP Email for a user",
        "description": "Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_AddOTPEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaAddOTPEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceAddOTPEmailBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/idp_intents": {
      "post": {
        "summary": "Start flow with an identity provider",
        "description": "Start a flow with an identity provider, for external login, registration or linking.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_StartIdentityProviderIntent",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaStartIdentityProviderIntentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaStartIdentityProviderIntentRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/idp_intents/{idpIntentId}": {
      "post": {
        "summary": "Retrieve the information returned by the identity provider",
        "description": "Retrieve the information returned by the identity provider for registration or updating an existing user with new information.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_RetrieveIdentityProviderIntent",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaRetrieveIdentityProviderIntentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpIntentId",
            "description": "ID of the idp intent, previously returned on the success response of the IDP callback",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceRetrieveIdentityProviderIntentBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/links": {
      "post": {
        "summary": "Add link to an identity provider to an user",
        "description": "Add link to an identity provider to an user.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_AddIDPLink",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaAddIDPLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceAddIDPLinkBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/password_reset": {
      "post": {
        "summary": "Request a code to reset a password",
        "description": "Request a code to reset a password.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_PasswordReset",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaPasswordResetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServicePasswordResetBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/password": {
      "post": {
        "summary": "Change password",
        "description": "Change the password of a user with either a verification code or the current password.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_SetPassword",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaSetPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv2betaUserServiceSetPasswordBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/users/{userId}/authentication_methods": {
      "get": {
        "summary": "List all possible authentication methods of a user",
        "description": "List all possible authentication methods of a user like password, passwordless, (T)OTP and more.\n\nDeprecated: please move to the corresponding endpoint under user service v2 (GA).",
        "operationId": "UserService_ListAuthenticationMethodTypes",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userv2betaListAuthenticationMethodTypesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ],
        "deprecated": true
      }
    },
    "/v2beta/organizations": {
      "post": {
        "summary": "Create an Organization",
        "description": "Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.",
        "operationId": "OrganizationService_AddOrganization",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/orgv2betaAddOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/orgv2betaAddOrganizationRequest"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/resources/v3alpha/actions/targets": {
      "post": {
        "summary": "Create a target",
        "description": "Create a new target, which can be used in executions.",
        "operationId": "ZITADELActions_CreateTarget",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3alphaCreateTargetResponse"
            }
          },
          "201": {
            "description": "Target successfully created",
            "schema": {
              "$ref": "#/definitions/v3alphaCreateTargetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "target",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3alphaTarget"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELActions"
        ]
      }
    },
    "/resources/v3alpha/actions/targets/{id}": {
      "get": {
        "summary": "Target by ID",
        "description": "Returns the target identified by the requested ID.",
        "operationId": "ZITADELActions_GetTarget",
        "responses": {
          "200": {
            "description": "Target successfully retrieved",
            "schema": {
              "$ref": "#/definitions/v3alphaGetTargetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELActions"
        ]
      },
      "delete": {
        "summary": "Delete a target",
        "description": "Delete an existing target. This will remove it from any configured execution as well.",
        "operationId": "ZITADELActions_DeleteTarget",
        "responses": {
          "200": {
            "description": "Target successfully deleted",
            "schema": {
              "$ref": "#/definitions/v3alphaDeleteTargetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELActions"
        ]
      },
      "patch": {
        "summary": "Patch a target",
        "description": "Patch an existing target.",
        "operationId": "ZITADELActions_PatchTarget",
        "responses": {
          "200": {
            "description": "Target successfully updated or left unchanged",
            "schema": {
              "$ref": "#/definitions/v3alphaPatchTargetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "target",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/actionv3alphaPatchTarget"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELActions"
        ]
      }
    },
    "/resources/v3alpha/actions/targets/_search": {
      "post": {
        "summary": "Search targets",
        "description": "Search all matching targets. By default all targets of the instance are returned.\nMake sure to include a limit and sorting for pagination.",
        "operationId": "ZITADELActions_SearchTargets",
        "responses": {
          "200": {
            "description": "A list of all targets matching the query",
            "schema": {
              "$ref": "#/definitions/v3alphaSearchTargetsResponse"
            }
          },
          "400": {
            "description": "invalid list query",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filters",
            "description": "Define the criteria to query for.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v3alphaTargetSearchFilter"
              }
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "query.limit",
            "description": "Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "query.desc",
            "description": "default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortingColumn",
            "description": "The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "TARGET_FIELD_NAME_UNSPECIFIED",
              "TARGET_FIELD_NAME_ID",
              "TARGET_FIELD_NAME_CREATED_DATE",
              "TARGET_FIELD_NAME_CHANGED_DATE",
              "TARGET_FIELD_NAME_NAME",
              "TARGET_FIELD_NAME_TARGET_TYPE",
              "TARGET_FIELD_NAME_URL",
              "TARGET_FIELD_NAME_TIMEOUT",
              "TARGET_FIELD_NAME_INTERRUPT_ON_ERROR"
            ],
            "default": "TARGET_FIELD_NAME_UNSPECIFIED"
          }
        ],
        "tags": [
          "ZITADELActions"
        ]
      }
    },
    "/resources/v3alpha/actions/executions": {
      "put": {
        "summary": "Sets an execution to call a target or include the targets of another execution.",
        "description": "Setting an empty list of targets will remove all targets from the execution, making it a noop.",
        "operationId": "ZITADELActions_SetExecution",
        "responses": {
          "200": {
            "description": "Execution successfully updated or left unchanged",
            "schema": {
              "$ref": "#/definitions/v3alphaSetExecutionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3alphaSetExecutionRequest"
            }
          }
        ],
        "tags": [
          "ZITADELActions"
        ]
      }
    },
    "/resources/v3alpha/actions/executions/_search": {
      "post": {
        "summary": "Search executions",
        "description": "Search all matching executions. By default all executions of the instance are returned that have at least one execution target.\nMake sure to include a limit and sorting for pagination.",
        "operationId": "ZITADELActions_SearchExecutions",
        "responses": {
          "200": {
            "description": "A list of all non noop executions matching the query",
            "schema": {
              "$ref": "#/definitions/v3alphaSearchExecutionsResponse"
            }
          },
          "400": {
            "description": "invalid list query",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filters",
            "description": "Define the criteria to query for.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v3alphaExecutionSearchFilter"
              }
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "query.limit",
            "description": "Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "query.desc",
            "description": "default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortingColumn",
            "description": "The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "EXECUTION_FIELD_NAME_UNSPECIFIED",
              "EXECUTION_FIELD_NAME_ID",
              "EXECUTION_FIELD_NAME_CREATED_DATE",
              "EXECUTION_FIELD_NAME_CHANGED_DATE"
            ],
            "default": "EXECUTION_FIELD_NAME_UNSPECIFIED"
          }
        ],
        "tags": [
          "ZITADELActions"
        ]
      }
    },
    "/resources/v3alpha/actions/executions/functions": {
      "get": {
        "summary": "List all available functions",
        "description": "List all available functions which can be used as condition for executions.",
        "operationId": "ZITADELActions_ListExecutionFunctions",
        "responses": {
          "200": {
            "description": "List all functions successfully",
            "schema": {
              "$ref": "#/definitions/v3alphaListExecutionFunctionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ZITADELActions"
        ]
      }
    },
    "/resources/v3alpha/actions/executions/methods": {
      "get": {
        "summary": "List all available methods",
        "description": "List all available methods which can be used as condition for executions.",
        "operationId": "ZITADELActions_ListExecutionMethods",
        "responses": {
          "200": {
            "description": "List all methods successfully",
            "schema": {
              "$ref": "#/definitions/v3alphaListExecutionMethodsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ZITADELActions"
        ]
      }
    },
    "/resources/v3alpha/actions/executions/services": {
      "get": {
        "summary": "List all available service",
        "description": "List all available services which can be used as condition for executions.",
        "operationId": "ZITADELActions_ListExecutionServices",
        "responses": {
          "200": {
            "description": "List all services successfully",
            "schema": {
              "$ref": "#/definitions/v3alphaListExecutionServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ZITADELActions"
        ]
      }
    },
    "/": {
      "post": {
        "summary": "Create a set of debug events.",
        "description": "Create a set of debug events which will be pushed to the eventstore and reduced to the projection.",
        "operationId": "ZITADELDebugEvents_CreateDebugEvents",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v3alphaCreateDebugEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "events",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/debug_eventsv3alphaEvent"
              }
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "aggregateId",
            "description": "unique identifier for the aggregate we want to push events to.",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELDebugEvents"
        ]
      }
    },
    "/v3alpha/debug_events/{id}": {
      "get": {
        "operationId": "ZITADELDebugEvents_GetDebugEventsStateById",
        "responses": {
          "200": {
            "description": "Debug events state successfully retrieved",
            "schema": {
              "$ref": "#/definitions/v3alphaGetDebugEventsStateByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the aggregate.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "triggerBulk",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ZITADELDebugEvents"
        ]
      }
    },
    "/v3alpha/debug_events": {
      "get": {
        "operationId": "ZITADELDebugEvents_ListDebugEventsStates",
        "responses": {
          "200": {
            "description": "Debug events states successfully retrieved",
            "schema": {
              "$ref": "#/definitions/v3alphaListDebugEventsStatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "triggerBulk",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ZITADELDebugEvents"
        ]
      }
    },
    "/resources/v3alpha/users/_search": {
      "post": {
        "summary": "Search users",
        "description": "Search all matching users. By default, we will return all users of your instance.\nMake sure to include a limit and sorting for pagination.",
        "operationId": "ZITADELUsers_SearchUsers",
        "responses": {
          "200": {
            "description": "A list of all users matching the query",
            "schema": {
              "$ref": "#/definitions/v3alphaSearchUsersResponse"
            }
          },
          "400": {
            "description": "invalid list query",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filters",
            "description": "Define the criteria to query for.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/resourcesuserv3alphaSearchFilter"
              }
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "query.limit",
            "description": "Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "query.desc",
            "description": "default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortingColumn",
            "description": "the field the result is sorted.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FIELD_NAME_UNSPECIFIED",
              "FIELD_NAME_ID",
              "FIELD_NAME_CREATION_DATE",
              "FIELD_NAME_CHANGE_DATE",
              "FIELD_NAME_EMAIL",
              "FIELD_NAME_PHONE",
              "FIELD_NAME_STATE",
              "FIELD_NAME_SCHEMA_ID",
              "FIELD_NAME_SCHEMA_TYPE"
            ],
            "default": "FIELD_NAME_UNSPECIFIED"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}": {
      "get": {
        "summary": "User by ID",
        "description": "Returns the user identified by the requested ID.",
        "operationId": "ZITADELUsers_GetUser",
        "responses": {
          "200": {
            "description": "User successfully retrieved",
            "schema": {
              "$ref": "#/definitions/v3alphaGetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      },
      "delete": {
        "summary": "Delete a user",
        "description": "Delete an existing user and change the state to 'deleted'.\nThe user will be able to log in anymore.",
        "operationId": "ZITADELUsers_DeleteUser",
        "responses": {
          "200": {
            "description": "User successfully deleted",
            "schema": {
              "$ref": "#/definitions/userv3alphaDeleteUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      },
      "patch": {
        "summary": "Patch a user",
        "description": "Patch an existing user with data based on a user schema.",
        "operationId": "ZITADELUsers_PatchUser",
        "responses": {
          "200": {
            "description": "User successfully updated or left unchanged",
            "schema": {
              "$ref": "#/definitions/v3alphaPatchUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv3alphaPatchUser"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users": {
      "post": {
        "summary": "Create a user",
        "description": "Create a new user with an optional data schema.",
        "operationId": "ZITADELUsers_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3alphaCreateUserResponse"
            }
          },
          "201": {
            "description": "User successfully created",
            "schema": {
              "$ref": "#/definitions/v3alphaCreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv3alphaCreateUser"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/_deactivate": {
      "post": {
        "summary": "Deactivate a user",
        "description": "Deactivate an existing user and change the state 'deactivated'.\nThe user will not be able to log in anymore.\nUse deactivate user when the user should not be able to use the account anymore,\nbut you still need access to the user data.\n\nThe endpoint returns an error if the user is already in the state 'deactivated'.",
        "operationId": "ZITADELUsers_DeactivateUser",
        "responses": {
          "200": {
            "description": "User successfully deactivated",
            "schema": {
              "$ref": "#/definitions/userv3alphaDeactivateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/_activate": {
      "post": {
        "summary": "Activate a user",
        "description": "Activate a previously deactivated user and change the state to 'active'.\nThe user will be able to log in again.\n\nThe endpoint returns an error if the user is not in the state 'deactivated'.",
        "operationId": "ZITADELUsers_ActivateUser",
        "responses": {
          "200": {
            "description": "User successfully activated",
            "schema": {
              "$ref": "#/definitions/v3alphaActivateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/_lock": {
      "post": {
        "summary": "Lock a user",
        "description": "Lock an existing user and change the state 'locked'.\nThe user will not be able to log in anymore.\nUse lock user when the user should temporarily not be able to log in\nbecause of an event that happened (wrong password, etc.)\n\nThe endpoint returns an error if the user is already in the state 'locked'.",
        "operationId": "ZITADELUsers_LockUser",
        "responses": {
          "200": {
            "description": "User successfully locked",
            "schema": {
              "$ref": "#/definitions/userv3alphaLockUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/_unlock": {
      "post": {
        "summary": "Unlock a user",
        "description": "Unlock a previously locked user and change the state to 'active'.\nThe user will be able to log in again.\n\nThe endpoint returns an error if the user is not in the state 'locked'.",
        "operationId": "ZITADELUsers_UnlockUser",
        "responses": {
          "200": {
            "description": "User successfully unlocked",
            "schema": {
              "$ref": "#/definitions/userv3alphaUnlockUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/email": {
      "put": {
        "summary": "Set contact email",
        "description": "Add or update the contact email address of a user.\nIf the email is not passed as verified, a verification code will be generated,\nwhich can be either returned or will be sent to the user by email.",
        "operationId": "ZITADELUsers_SetContactEmail",
        "responses": {
          "200": {
            "description": "Email successfully set",
            "schema": {
              "$ref": "#/definitions/v3alphaSetContactEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "description": "Set the user's contact email and it's verification state.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv3alphaSetEmail"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/email/_verify": {
      "post": {
        "summary": "Verify the contact email",
        "description": "Verify the contact email with the provided code.",
        "operationId": "ZITADELUsers_VerifyContactEmail",
        "responses": {
          "200": {
            "description": "Email successfully verified",
            "schema": {
              "$ref": "#/definitions/v3alphaVerifyContactEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "verificationCode",
            "description": "Set the verification code generated during the set contact email request.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "example": "SKJd342k",
              "maxLength": 20,
              "minLength": 1,
              "required": [
                "verificationCode"
              ]
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/email/_resend": {
      "post": {
        "summary": "Resend the contact email code",
        "description": "Resend the email with the verification code for the contact email address.",
        "operationId": "ZITADELUsers_ResendContactEmailCode",
        "responses": {
          "200": {
            "description": "Code resend successfully requested",
            "schema": {
              "$ref": "#/definitions/v3alphaResendContactEmailCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZITADELUsersResendContactEmailCodeBody"
            }
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/phone": {
      "put": {
        "summary": "Set contact phone",
        "description": "Add or update the contact phone number of a user.\nIf the phone is not passed as verified, a verification code will be generated,\nwhich can be either returned or will be sent to the user by SMS.",
        "operationId": "ZITADELUsers_SetContactPhone",
        "responses": {
          "200": {
            "description": "Contact phone successfully set",
            "schema": {
              "$ref": "#/definitions/v3alphaSetContactPhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "phone",
            "description": "Set the user's contact phone and it's verification state.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv3alphaSetPhone"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/phone/_verify": {
      "post": {
        "summary": "Verify the contact phone",
        "description": "Verify the contact phone with the provided code.",
        "operationId": "ZITADELUsers_VerifyContactPhone",
        "responses": {
          "200": {
            "description": "Contact phone successfully verified",
            "schema": {
              "$ref": "#/definitions/v3alphaVerifyContactPhoneResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "verificationCode",
            "description": "Set the verification code generated during the set contact phone request.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "example": "SKJd342k",
              "maxLength": 20,
              "minLength": 1,
              "required": [
                "verificationCode"
              ]
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/phone/_resend": {
      "post": {
        "summary": "Resend the contact phone code",
        "description": "Resend the phone with the verification code for the contact phone number.",
        "operationId": "ZITADELUsers_ResendContactPhoneCode",
        "responses": {
          "200": {
            "description": "Code resend successfully requested",
            "schema": {
              "$ref": "#/definitions/v3alphaResendContactPhoneCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZITADELUsersResendContactPhoneCodeBody"
            }
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/username": {
      "post": {
        "summary": "Add a username",
        "description": "Add a new unique username to a user. The username will be used to identify the user on authentication.",
        "operationId": "ZITADELUsers_AddUsername",
        "responses": {
          "200": {
            "description": "Username successfully added",
            "schema": {
              "$ref": "#/definitions/v3alphaAddUsernameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "description": "Set the user's new username.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3alphaSetUsername"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/username/{usernameId}": {
      "delete": {
        "summary": "Remove a username",
        "description": "Remove an existing username of a user, so it cannot be used for authentication anymore.",
        "operationId": "ZITADELUsers_RemoveUsername",
        "responses": {
          "200": {
            "description": "Username successfully removed",
            "schema": {
              "$ref": "#/definitions/v3alphaRemoveUsernameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "usernameId",
            "description": "unique identifier of the username.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/password": {
      "post": {
        "summary": "Set a password",
        "description": "Add, update or reset a user's password with either a verification code or the current password.",
        "operationId": "ZITADELUsers_SetPassword",
        "responses": {
          "200": {
            "description": "Password successfully set",
            "schema": {
              "$ref": "#/definitions/userv3alphaSetPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "newPassword",
            "description": "Provide the new password (in plain text or as hash).",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv3alphaSetPassword"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/password/_reset": {
      "post": {
        "summary": "Request password reset",
        "description": "Request a code to be able to set a new password.",
        "operationId": "ZITADELUsers_RequestPasswordReset",
        "responses": {
          "200": {
            "description": "Password reset successfully requested",
            "schema": {
              "$ref": "#/definitions/v3alphaRequestPasswordResetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZITADELUsersRequestPasswordResetBody"
            }
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/webauthn": {
      "post": {
        "summary": "Start a WebAuthN registration",
        "description": "Start the registration of a new WebAuthN device (e.g. Passkeys) for a user.\nAs a response the public key credential creation options are returned,\nwhich are used to verify the device.",
        "operationId": "ZITADELUsers_StartWebAuthNRegistration",
        "responses": {
          "200": {
            "description": "WebAuthN registration successfully started",
            "schema": {
              "$ref": "#/definitions/v3alphaStartWebAuthNRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "registration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv3alphaStartWebAuthNRegistration"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/webauthn/{webAuthNId}/_verify": {
      "post": {
        "summary": "Verify a WebAuthN registration",
        "description": "Verify the WebAuthN registration started by StartWebAuthNRegistration with the public key credential.",
        "operationId": "ZITADELUsers_VerifyWebAuthNRegistration",
        "responses": {
          "200": {
            "description": "WebAuthN registration successfully verified",
            "schema": {
              "$ref": "#/definitions/v3alphaVerifyWebAuthNRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "webAuthNId",
            "description": "unique identifier of the WebAuthN registration, which was returned in the start webauthn registration.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "verify",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv3alphaVerifyWebAuthNRegistration"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/webauthn/registration_link": {
      "post": {
        "summary": "Create a WebAuthN registration link",
        "description": "Create a link, which includes a code, that can either be returned or directly sent to the user.\nThe code will allow the user to start a new WebAuthN registration.",
        "operationId": "ZITADELUsers_CreateWebAuthNRegistrationLink",
        "responses": {
          "200": {
            "description": "WebAuthN registration successfully created",
            "schema": {
              "$ref": "#/definitions/v3alphaCreateWebAuthNRegistrationLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZITADELUsersCreateWebAuthNRegistrationLinkBody"
            }
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/webauthn/{webAuthNId}": {
      "delete": {
        "summary": "Remove a WebAuthN authenticator",
        "description": "Remove an existing WebAuthN authenticator from a user, so it cannot be used for authentication anymore.",
        "operationId": "ZITADELUsers_RemoveWebAuthNAuthenticator",
        "responses": {
          "200": {
            "description": "WebAuthN authenticator successfully removed",
            "schema": {
              "$ref": "#/definitions/v3alphaRemoveWebAuthNAuthenticatorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "webAuthNId",
            "description": "unique identifier of the WebAuthN authenticator.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/totp": {
      "post": {
        "summary": "Start a TOTP registration",
        "description": "Start the registration of a new time-based one-time password (TOTP) generator for a user.\nAs a response a secret is returned, which is used to initialize a TOTP app or device.",
        "operationId": "ZITADELUsers_StartTOTPRegistration",
        "responses": {
          "200": {
            "description": "TOTP registration successfully started",
            "schema": {
              "$ref": "#/definitions/v3alphaStartTOTPRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/totp/{totpId}/_verify": {
      "post": {
        "summary": "Verify a TOTP registration",
        "description": "Verify the time-based one-time password (TOTP) registration with the generated code.",
        "operationId": "ZITADELUsers_VerifyTOTPRegistration",
        "responses": {
          "200": {
            "description": "TOTP registration successfully verified",
            "schema": {
              "$ref": "#/definitions/userv3alphaVerifyTOTPRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "totpId",
            "description": "unique identifier of the TOTP registration, which was returned in the start TOTP registration.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "description": "Code generated by TOTP app or device.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123456",
              "maxLength": 9,
              "minLength": 6,
              "required": [
                "code"
              ]
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/totp/{totpId}": {
      "delete": {
        "summary": "Remove a TOTP authenticator",
        "description": "Remove an existing time-based one-time password (TOTP) authenticator from a user, so it cannot be used for authentication anymore.",
        "operationId": "ZITADELUsers_RemoveTOTPAuthenticator",
        "responses": {
          "200": {
            "description": "TOTP authenticator successfully removed",
            "schema": {
              "$ref": "#/definitions/v3alphaRemoveTOTPAuthenticatorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "totpId",
            "description": "unique identifier of the TOTP authenticator.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/otp_sms": {
      "post": {
        "summary": "Add a OTP SMS authenticator",
        "description": "Add a new one-time password (OTP) SMS authenticator to a user.\nIf the phone is not passed as verified, a verification code will be generated,\nwhich can be either returned or will be sent to the user by SMS.",
        "operationId": "ZITADELUsers_AddOTPSMSAuthenticator",
        "responses": {
          "200": {
            "description": "OTP SMS authenticator successfully added",
            "schema": {
              "$ref": "#/definitions/v3alphaAddOTPSMSAuthenticatorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "phone",
            "description": "Set the user's phone for the OTP SMS authenticator and it's verification state.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv3alphaSetPhone"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/otp_sms/{otpSmsId}/_verify": {
      "post": {
        "summary": "Verify OTP SMS registration",
        "description": "Verify the OTP SMS registration with the provided code.",
        "operationId": "ZITADELUsers_VerifyOTPSMSRegistration",
        "responses": {
          "200": {
            "description": "OTP SMS authenticator successfully verified",
            "schema": {
              "$ref": "#/definitions/v3alphaVerifyOTPSMSRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "otpSmsId",
            "description": "unique identifier of the OTP SMS registration, which was returned in the add OTP SMS.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "description": "Set the verification code generated during the add OTP SMS request.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "example": "SKJd342k",
              "maxLength": 200,
              "minLength": 1,
              "required": [
                "code"
              ]
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/otp_sms/{otpSmsId}": {
      "delete": {
        "summary": "Remove a OTP SMS authenticator",
        "description": "Remove an existing one-time password (OTP) SMS authenticator from a user, so it cannot be used for authentication anymore.",
        "operationId": "ZITADELUsers_RemoveOTPSMSAuthenticator",
        "responses": {
          "200": {
            "description": "OTP SMS authenticator successfully removed",
            "schema": {
              "$ref": "#/definitions/v3alphaRemoveOTPSMSAuthenticatorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "otpSmsId",
            "description": "unique identifier of the OTP SMS authenticator.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/otp_email": {
      "post": {
        "summary": "Add a OTP Email authenticator",
        "description": "Add a new one-time password (OTP) Email authenticator to a user.\nIf the email is not passed as verified, a verification code will be generated,\nwhich can be either returned or will be sent to the user by email.",
        "operationId": "ZITADELUsers_AddOTPEmailAuthenticator",
        "responses": {
          "200": {
            "description": "OTP Email authenticator successfully added",
            "schema": {
              "$ref": "#/definitions/v3alphaAddOTPEmailAuthenticatorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "description": "Set the user's email for the OTP Email authenticator and it's verification state.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv3alphaSetEmail"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/otp_email/{otpEmailId}/_verify": {
      "post": {
        "summary": "Verify OTP Email registration",
        "description": "Verify the OTP Email registration with the provided code.",
        "operationId": "ZITADELUsers_VerifyOTPEmailRegistration",
        "responses": {
          "200": {
            "description": "OTP Email authenticator successfully verified",
            "schema": {
              "$ref": "#/definitions/v3alphaVerifyOTPEmailRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "otpEmailId",
            "description": "unique identifier of the OTP Email registration, which was returned in the add OTP Email.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "description": "Set the verification code generated during the add OTP Email request.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "example": "SKJd342k",
              "maxLength": 200,
              "minLength": 1,
              "required": [
                "code"
              ]
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/otp_email/{otpEmailId}": {
      "delete": {
        "summary": "Remove a OTP Email authenticator",
        "description": "Remove an existing one-time password (OTP) Email authenticator from a user, so it cannot be used for authentication anymore.",
        "operationId": "ZITADELUsers_RemoveOTPEmailAuthenticator",
        "responses": {
          "200": {
            "description": "OTP Email authenticator successfully removed",
            "schema": {
              "$ref": "#/definitions/v3alphaRemoveOTPEmailAuthenticatorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "otpEmailId",
            "description": "unique identifier of the OTP Email authenticator.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/idp_intents": {
      "post": {
        "summary": "Start an IDP authentication intent",
        "description": "Start a new authentication intent on configured identity provider (IDP) for external login, registration or linking.",
        "operationId": "ZITADELUsers_StartIdentityProviderIntent",
        "responses": {
          "200": {
            "description": "IDP intent successfully started",
            "schema": {
              "$ref": "#/definitions/userv3alphaStartIdentityProviderIntentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userv3alphaStartIdentityProviderIntentRequest"
            }
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/idp_intents/{idpIntentId}": {
      "get": {
        "summary": "Get the information of the IDP authentication intent",
        "description": "Get the information returned by the identity provider (IDP) for registration or updating an existing user with new information.",
        "operationId": "ZITADELUsers_GetIdentityProviderIntent",
        "responses": {
          "200": {
            "description": "IDP intent successfully retrieved",
            "schema": {
              "$ref": "#/definitions/v3alphaGetIdentityProviderIntentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpIntentId",
            "description": "ID of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "idpIntentToken",
            "description": "Token of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent.",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/idps": {
      "post": {
        "summary": "Add an IDP authenticator to a user",
        "description": "Add a new identity provider (IDP) authenticator to an existing user.\nThis will allow the user to authenticate with the provided IDP.",
        "operationId": "ZITADELUsers_AddIDPAuthenticator",
        "responses": {
          "200": {
            "description": "IDP authenticator successfully added",
            "schema": {
              "$ref": "#/definitions/v3alphaAddIDPAuthenticatorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authenticator",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3alphaIDPAuthenticator"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/users/{id}/idps/{idpId}": {
      "delete": {
        "summary": "Remove an IDP authenticator",
        "description": "Remove an existing identity provider (IDP) authenticator from a user, so it cannot be used for authentication anymore.",
        "operationId": "ZITADELUsers_RemoveIDPAuthenticator",
        "responses": {
          "200": {
            "description": "IDP authenticator successfully removed",
            "schema": {
              "$ref": "#/definitions/v3alphaRemoveIDPAuthenticatorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "idpId",
            "description": "unique identifier of the identity provider (IDP) authenticator.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization.orgDomain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUsers"
        ]
      }
    },
    "/resources/v3alpha/user_schemas/_search": {
      "post": {
        "summary": "Search user schemas",
        "description": "Search all matching user schemas. By default, we will return all user schema of your instance. Make sure to include a limit and sorting for pagination.",
        "operationId": "ZITADELUserSchemas_SearchUserSchemas",
        "responses": {
          "200": {
            "description": "A list of all user schema matching the search",
            "schema": {
              "$ref": "#/definitions/v3alphaSearchUserSchemasResponse"
            }
          },
          "400": {
            "description": "invalid search",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filters",
            "description": "Define the criteria to filter for.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/resourcesuserschemav3alphaSearchFilter"
              }
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "query.limit",
            "description": "Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "query.desc",
            "description": "default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortingColumn",
            "description": "The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FIELD_NAME_UNSPECIFIED",
              "FIELD_NAME_TYPE",
              "FIELD_NAME_STATE",
              "FIELD_NAME_REVISION",
              "FIELD_NAME_CHANGE_DATE",
              "FIELD_NAME_CREATION_DATE"
            ],
            "default": "FIELD_NAME_UNSPECIFIED"
          }
        ],
        "tags": [
          "ZITADELUserSchemas"
        ]
      }
    },
    "/resources/v3alpha/user_schemas/{id}": {
      "get": {
        "summary": "User schema by ID",
        "description": "Returns the user schema identified by the requested ID.",
        "operationId": "ZITADELUserSchemas_GetUserSchema",
        "responses": {
          "200": {
            "description": "Schema successfully retrieved",
            "schema": {
              "$ref": "#/definitions/v3alphaGetUserSchemaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the schema.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUserSchemas"
        ]
      },
      "delete": {
        "summary": "Delete a user schema",
        "description": "Delete an existing user schema. This operation is only allowed if there are no associated users to it.",
        "operationId": "ZITADELUserSchemas_DeleteUserSchema",
        "responses": {
          "200": {
            "description": "Schema successfully deleted",
            "schema": {
              "$ref": "#/definitions/v3alphaDeleteUserSchemaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the schema.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUserSchemas"
        ]
      },
      "patch": {
        "summary": "Patch a user schema",
        "description": "Patch an existing user schema to a new revision. Users based on the current revision will not be affected until they are updated.",
        "operationId": "ZITADELUserSchemas_PatchUserSchema",
        "responses": {
          "200": {
            "description": "Schema successfully updated",
            "schema": {
              "$ref": "#/definitions/v3alphaPatchUserSchemaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the schema.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userSchema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userschemav3alphaPatchUserSchema"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUserSchemas"
        ]
      }
    },
    "/resources/v3alpha/user_schemas": {
      "post": {
        "summary": "Create a user schema",
        "description": "Create the first revision of a new user schema. The schema can then be used on users to store and validate their data.",
        "operationId": "ZITADELUserSchemas_CreateUserSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3alphaCreateUserSchemaResponse"
            }
          },
          "201": {
            "description": "Schema successfully created",
            "schema": {
              "$ref": "#/definitions/v3alphaCreateUserSchemaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userSchema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3alphaUserSchema"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUserSchemas"
        ]
      }
    },
    "/resources/v3alpha/user_schemas/{id}/_deactivate": {
      "post": {
        "summary": "Deactivate a user schema",
        "description": "Deactivate an existing user schema and change it into a read-only state. Users based on this schema cannot be updated anymore, but are still able to authenticate.",
        "operationId": "ZITADELUserSchemas_DeactivateUserSchema",
        "responses": {
          "200": {
            "description": "Schema successfully deactivated",
            "schema": {
              "$ref": "#/definitions/v3alphaDeactivateUserSchemaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the schema.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUserSchemas"
        ]
      }
    },
    "/resources/v3alpha/user_schemas/{id}/_reactivate": {
      "post": {
        "summary": "Reactivate a user schema",
        "description": "Reactivate an previously deactivated user schema and change it into an active state again.",
        "operationId": "ZITADELUserSchemas_ReactivateUserSchema",
        "responses": {
          "200": {
            "description": "Schema successfully reactivated",
            "schema": {
              "$ref": "#/definitions/v3alphaReactivateUserSchemaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique identifier of the schema.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELUserSchemas"
        ]
      }
    },
    "/resources/v3alpha/web_keys": {
      "get": {
        "summary": "List web key details for the instance",
        "description": "List web key details for the instance",
        "operationId": "ZITADELWebKeys_ListWebKeys",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v3alphaListWebKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELWebKeys"
        ]
      },
      "post": {
        "summary": "Generate a web key pair for the instance",
        "description": "Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation. The public key can be used to valite OIDC tokens.",
        "operationId": "ZITADELWebKeys_CreateWebKey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v3alphaCreateWebKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3alphaWebKey"
            }
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELWebKeys"
        ]
      }
    },
    "/resources/v3alpha/web_keys/{id}/_activate": {
      "post": {
        "summary": "Activate a signing key for the instance",
        "description": "Switch the active signing web key. The previously active key will be deactivated. Note that the JWKs OIDC endpoint returns a cacheable response. Therefore it is not advised to activate a key that has been created within the cache duration (default is 5min), as the public key may not have been propagated to caches and clients yet.",
        "operationId": "ZITADELWebKeys_ActivateWebKey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v3alphaActivateWebKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELWebKeys"
        ]
      }
    },
    "/resources/v3alpha/web_keys/{id}": {
      "delete": {
        "summary": "Delete a web key pair for the instance",
        "description": "Delete a web key pair. Only inactive keys can be deleted. Once a key is deleted, any tokens signed by this key will be invalid.",
        "operationId": "ZITADELWebKeys_DeleteWebKey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v3alphaDeleteWebKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance.domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZITADELWebKeys"
        ]
      }
    },
    "/v2/saml/saml_requests/{samlRequestId}": {
      "get": {
        "summary": "Get SAML Request details",
        "description": "Get SAML Request details by ID. Returns details that are parsed from the application's SAML Request.",
        "operationId": "SAMLService_GetSAMLRequest",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2GetSAMLRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "samlRequestId",
            "description": "ID of the SAML Request, as obtained from the redirect URL.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SAMLService"
        ]
      },
      "post": {
        "summary": "Finalize a SAML Request and get the response.",
        "description": "Finalize a SAML Request and get the response definition for success or failure. The response must be handled as per the SAML definition to inform the application about the success or failure. On success, the response contains details for the application to obtain the SAMLResponse. This method can only be called once for an SAML request.",
        "operationId": "SAMLService_CreateResponse",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2CreateResponseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "samlRequestId",
            "description": "ID of the SAML Request.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SAMLServiceCreateResponseBody"
            }
          }
        ],
        "tags": [
          "SAMLService"
        ]
      }
    },
    "/v2/sessions/search": {
      "post": {
        "summary": "Search sessions",
        "description": "Search for sessions",
        "operationId": "SessionService_ListSessions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/sessionv2ListSessionsResponse"
            }
          },
          "400": {
            "description": "invalid list query",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sessionv2ListSessionsRequest"
            }
          }
        ],
        "tags": [
          "SessionService"
        ]
      }
    },
    "/v2/sessions/{sessionId}": {
      "get": {
        "summary": "Get a session",
        "description": "Get a session and all its information like the time of the user or password verification",
        "operationId": "SessionService_GetSession",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/sessionv2GetSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SessionService"
        ]
      },
      "delete": {
        "summary": "Terminate an existing session",
        "description": "Terminate your own session or if granted any other session.",
        "operationId": "SessionService_DeleteSession",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/sessionv2DeleteSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sessionId",
            "description": "\"id of the session to terminate\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sessionv2SessionServiceDeleteSessionBody"
            }
          }
        ],
        "tags": [
          "SessionService"
        ]
      },
      "patch": {
        "summary": "Update an existing session",
        "description": "Update an existing session with new information.",
        "operationId": "SessionService_SetSession",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/sessionv2SetSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sessionId",
            "description": "\"id of the session to update\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sessionv2SessionServiceSetSessionBody"
            }
          }
        ],
        "tags": [
          "SessionService"
        ]
      }
    },
    "/v2/sessions": {
      "post": {
        "summary": "Create a new session",
        "description": "Create a new session. A token will be returned, which is required for further updates of the session.",
        "operationId": "SessionService_CreateSession",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/sessionv2CreateSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sessionv2CreateSessionRequest"
            }
          }
        ],
        "tags": [
          "SessionService"
        ]
      }
    },
    "/v2beta/sessions/search": {
      "post": {
        "summary": "Search sessions",
        "description": "Search for sessions",
        "operationId": "SessionService_ListSessions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/sessionv2betaListSessionsResponse"
            }
          },
          "400": {
            "description": "invalid list query",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sessionv2betaListSessionsRequest"
            }
          }
        ],
        "tags": [
          "SessionService"
        ]
      }
    },
    "/v2beta/sessions/{sessionId}": {
      "get": {
        "summary": "Get a session",
        "description": "Get a session and all its information like the time of the user or password verification",
        "operationId": "SessionService_GetSession",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/sessionv2betaGetSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SessionService"
        ]
      },
      "delete": {
        "summary": "Terminate an existing session",
        "description": "Terminate your own session or if granted any other session.",
        "operationId": "SessionService_DeleteSession",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/sessionv2betaDeleteSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sessionId",
            "description": "\"id of the session to terminate\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sessionv2betaSessionServiceDeleteSessionBody"
            }
          }
        ],
        "tags": [
          "SessionService"
        ]
      },
      "patch": {
        "summary": "Update an existing session",
        "description": "Update an existing session with new information.",
        "operationId": "SessionService_SetSession",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/sessionv2betaSetSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sessionId",
            "description": "\"id of the session to update\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sessionv2betaSessionServiceSetSessionBody"
            }
          }
        ],
        "tags": [
          "SessionService"
        ]
      }
    },
    "/v2beta/sessions": {
      "post": {
        "summary": "Create a new session",
        "description": "Create a new session. A token will be returned, which is required for further updates of the session.",
        "operationId": "SessionService_CreateSession",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/sessionv2betaCreateSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sessionv2betaCreateSessionRequest"
            }
          }
        ],
        "tags": [
          "SessionService"
        ]
      }
    },
    "/v2/settings": {
      "get": {
        "summary": "Get basic information over the instance",
        "description": "Return the basic information of the instance for the requested context",
        "operationId": "SettingsService_GetGeneralSettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2GetGeneralSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2/settings/login": {
      "get": {
        "summary": "Get the login settings",
        "description": "Return the settings for the requested context",
        "operationId": "SettingsService_GetLoginSettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2GetLoginSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2/settings/login/idps": {
      "get": {
        "summary": "Get the current active identity providers",
        "description": "Return the current active identity providers for the requested context",
        "operationId": "SettingsService_GetActiveIdentityProviders",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2GetActiveIdentityProvidersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "creationAllowed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "linkingAllowed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "autoCreation",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "autoLinking",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2/settings/password/complexity": {
      "get": {
        "summary": "Get the password complexity settings",
        "description": "Return the password complexity settings for the requested context",
        "operationId": "SettingsService_GetPasswordComplexitySettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2GetPasswordComplexitySettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2/settings/password/expiry": {
      "get": {
        "summary": "Get the password expiry settings",
        "description": "Return the password expiry settings for the requested context",
        "operationId": "SettingsService_GetPasswordExpirySettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2GetPasswordExpirySettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2/settings/branding": {
      "get": {
        "summary": "Get the current active branding settings",
        "description": "Return the current active branding settings for the requested context",
        "operationId": "SettingsService_GetBrandingSettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2GetBrandingSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2/settings/domain": {
      "get": {
        "summary": "Get the domain settings",
        "description": "Return the domain settings for the requested context",
        "operationId": "SettingsService_GetDomainSettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2GetDomainSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2/settings/legal_support": {
      "get": {
        "summary": "Get the legal and support settings",
        "description": "Return the legal settings for the requested context",
        "operationId": "SettingsService_GetLegalAndSupportSettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2GetLegalAndSupportSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2/settings/lockout": {
      "get": {
        "summary": "Get the lockout settings",
        "description": "Return the lockout settings for the requested context, which define when a user will be locked",
        "operationId": "SettingsService_GetLockoutSettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2GetLockoutSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2/settings/security": {
      "get": {
        "summary": "Get Security Settings",
        "description": "Returns the security settings of the ZITADEL instance.",
        "operationId": "SettingsService_GetSecuritySettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/settingsv2GetSecuritySettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Settings"
        ]
      }
    },
    "/v2/policies/security": {
      "put": {
        "summary": "Set Security Settings",
        "description": "Set the security settings of the ZITADEL instance.",
        "operationId": "SettingsService_SetSecuritySettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/settingsv2SetSecuritySettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/settingsv2SetSecuritySettingsRequest"
            }
          }
        ],
        "tags": [
          "Settings"
        ]
      }
    },
    "/v2beta/settings": {
      "get": {
        "summary": "Get basic information over the instance",
        "description": "Return the basic information of the instance for the requested context",
        "operationId": "SettingsService_GetGeneralSettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2betaGetGeneralSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2beta/settings/login": {
      "get": {
        "summary": "Get the login settings",
        "description": "Return the settings for the requested context",
        "operationId": "SettingsService_GetLoginSettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2betaGetLoginSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2beta/settings/login/idps": {
      "get": {
        "summary": "Get the current active identity providers",
        "description": "Return the current active identity providers for the requested context",
        "operationId": "SettingsService_GetActiveIdentityProviders",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2betaGetActiveIdentityProvidersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2beta/settings/password/complexity": {
      "get": {
        "summary": "Get the password complexity settings",
        "description": "Return the password complexity settings for the requested context",
        "operationId": "SettingsService_GetPasswordComplexitySettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2betaGetPasswordComplexitySettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2beta/settings/password/expiry": {
      "get": {
        "summary": "Get the password expiry settings",
        "description": "Return the password expiry settings for the requested context",
        "operationId": "SettingsService_GetPasswordExpirySettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2betaGetPasswordExpirySettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2beta/settings/branding": {
      "get": {
        "summary": "Get the current active branding settings",
        "description": "Return the current active branding settings for the requested context",
        "operationId": "SettingsService_GetBrandingSettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2betaGetBrandingSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2beta/settings/domain": {
      "get": {
        "summary": "Get the domain settings",
        "description": "Return the domain settings for the requested context",
        "operationId": "SettingsService_GetDomainSettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2betaGetDomainSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2beta/settings/legal_support": {
      "get": {
        "summary": "Get the legal and support settings",
        "description": "Return the legal settings for the requested context",
        "operationId": "SettingsService_GetLegalAndSupportSettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2betaGetLegalAndSupportSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2beta/settings/lockout": {
      "get": {
        "summary": "Get the lockout settings",
        "description": "Return the lockout settings for the requested context, which define when a user will be locked",
        "operationId": "SettingsService_GetLockoutSettings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/settingsv2betaGetLockoutSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ctx.orgId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ctx.instance",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2beta/settings/security": {
      "get": {
        "summary": "Get Security Settings",
        "description": "Returns the security settings of the ZITADEL instance.",
        "operationId": "SettingsService_GetSecuritySettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/settingsv2betaGetSecuritySettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/v2beta/policies/security": {
      "put": {
        "summary": "Set Security Settings",
        "description": "Set the security settings of the ZITADEL instance.",
        "operationId": "SettingsService_SetSecuritySettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/settingsv2betaSetSecuritySettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/settingsv2betaSetSecuritySettingsRequest"
            }
          }
        ],
        "tags": [
          "SettingsService"
        ]
      }
    },
    "/instances/_search": {
      "post": {
        "summary": "Returns a list of ZITADEL instances",
        "operationId": "SystemService_ListInstances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListInstancesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Search query for lists",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListInstancesRequest"
            }
          }
        ],
        "tags": [
          "SystemService"
        ]
      }
    },
    "/instances/{instanceId}": {
      "get": {
        "summary": "Returns the detail of an instance",
        "operationId": "SystemService_GetInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SystemService"
        ]
      },
      "delete": {
        "summary": "Removes an instance\nThis might take some time",
        "operationId": "SystemService_RemoveInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SystemService"
        ]
      },
      "put": {
        "summary": "Updates name of an existing instance",
        "operationId": "SystemService_UpdateInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemServiceUpdateInstanceBody"
            }
          }
        ],
        "tags": [
          "SystemService"
        ]
      }
    },
    "/instances": {
      "post": {
        "summary": "Deprecated: Use CreateInstance instead\nCreates a new instance with all needed setup data\nThis might take some time",
        "operationId": "SystemService_AddInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddInstanceRequest"
            }
          }
        ],
        "tags": [
          "SystemService"
        ]
      }
    },
    "/instances/_create": {
      "post": {
        "summary": "Creates a new instance with all needed setup data\nThis might take some time",
        "operationId": "SystemService_CreateInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateInstanceRequest"
            }
          }
        ],
        "tags": [
          "SystemService"
        ]
      }
    },
    "/instances/{instanceId}/members/_search": {
      "post": {
        "summary": "Returns all instance members matching the request\nall queries need to match (ANDed)\nDeprecated: Use the Admin APIs ListIAMMembers instead",
        "operationId": "SystemService_ListIAMMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/zitadelsystemv1ListIAMMembersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemServiceListIAMMembersBody"
            }
          }
        ],
        "tags": [
          "SystemService"
        ]
      }
    },
    "/domains/{domain}/_exists": {
      "post": {
        "summary": "Checks if a domain exists",
        "operationId": "SystemService_ExistsDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExistsDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemServiceExistsDomainBody"
            }
          }
        ],
        "tags": [
          "SystemService"
        ]
      }
    },
    "/instances/{instanceId}/domains/_search": {
      "post": {
        "summary": "Returns the custom domains of an instance\nChecks if a domain exists\nDeprecated: Use the Admin APIs ListInstanceDomains on the admin API instead",
        "operationId": "SystemService_ListDomains",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDomainsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "list limitations and ordering",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemServiceListDomainsBody"
            }
          }
        ],
        "tags": [
          "SystemService"
        ]
      }
    },
    "/instances/{instanceId}/domains": {
      "post": {
        "summary": "Adds a domain to an instance",
        "operationId": "SystemService_AddDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemServiceAddDomainBody"
            }
          }
        ],
        "tags": [
          "SystemService"
        ]
      }
    },
    "/instances/{instanceId}/domains/{domain}": {
      "delete": {
        "summary": "Removes the domain of an instance",
        "operationId": "SystemService_RemoveDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SystemService"
        ]
      }
    },
    "/instances/{instanceId}/domains/_set_primary": {
      "post": {
        "summary": "Sets the primary domain of an instance",
        "operationId": "SystemService_SetPrimaryDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetPrimaryDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemServiceSetPrimaryDomainBody"
            }
          }
        ],
        "tags": [
          "SystemService"
        ]
      }
    },
    "/views/{database}/{viewName}": {
      "post": {
        "summary": "Truncates the delta of the change stream\nbe carefull with this function because ZITADEL has to\nrecompute the deltas after they got cleared.\nSearch requests will return wrong results until all deltas are recomputed",
        "operationId": "SystemService_ClearView",
        "responses": {
          "200": {
            "description": "View cleared",
            "schema": {
              "$ref": "#/definitions/v1ClearViewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "database",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "views"
        ]
      }
    },
    "/failedevents/{database_1}/{viewName}/{failedSequence}": {
      "delete": {
        "summary": "Deletes the event from failed events view.\nthe event is not removed from the change stream\nThis call is usefull if the system was able to process the event later.\ne.g. if the second try of sending an email was successful. the first try produced a\nfailed event. You can find out if it worked on the `failure_count`",
        "operationId": "SystemService_RemoveFailedEvent",
        "responses": {
          "200": {
            "description": "Events removed from the list",
            "schema": {
              "$ref": "#/definitions/zitadelsystemv1RemoveFailedEventResponse"
            }
          },
          "400": {
            "description": "failed event not found",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "database_1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "failedSequence",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "instanceId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "failed events"
        ]
      }
    },
    "/instances/{instanceId}/quotas": {
      "post": {
        "summary": "Creates a new quota\nReturns an error if the quota already exists for the specified unit\nDeprecated: use SetQuota instead",
        "operationId": "SystemService_AddQuota",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddQuotaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemServiceAddQuotaBody"
            }
          }
        ],
        "tags": [
          "Usage Control",
          "Quotas"
        ]
      },
      "put": {
        "summary": "Sets quota configuration properties\nCreates a new quota if it doesn't exist for the specified unit",
        "operationId": "SystemService_SetQuota",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetQuotaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemServiceSetQuotaBody"
            }
          }
        ],
        "tags": [
          "Usage Control",
          "Quotas"
        ]
      }
    },
    "/instances/{instanceId}/quotas/{unit}": {
      "delete": {
        "summary": "Removes a quota",
        "operationId": "SystemService_RemoveQuota",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveQuotaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "unit",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "UNIT_UNIMPLEMENTED",
              "UNIT_REQUESTS_ALL_AUTHENTICATED",
              "UNIT_ACTIONS_ALL_RUN_SECONDS"
            ]
          }
        ],
        "tags": [
          "Usage Control",
          "Quotas"
        ]
      }
    },
    "/instances/{instanceId}/features/{featureId}": {
      "put": {
        "summary": "Set a feature flag on an instance",
        "operationId": "SystemService_SetInstanceFeature",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetInstanceFeatureResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "INSTANCE_FEATURE_UNSPECIFIED",
              "INSTANCE_FEATURE_LOGIN_DEFAULT_ORG"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemServiceSetInstanceFeatureBody"
            }
          }
        ],
        "tags": [
          "SystemService"
        ]
      }
    },
    "/instances/{instanceId}/limits": {
      "delete": {
        "summary": "Resets instance level limits",
        "operationId": "SystemService_ResetLimits",
        "responses": {
          "200": {
            "description": "Limits are reset to the system defaults",
            "schema": {
              "$ref": "#/definitions/v1ResetLimitsResponse"
            }
          },
          "404": {
            "description": "Limits are already set to the system defaults",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Usage Control",
          "Limits"
        ]
      },
      "put": {
        "summary": "Sets instance level limits",
        "operationId": "SystemService_SetLimits",
        "responses": {
          "200": {
            "description": "Instance limits set",
            "schema": {
              "$ref": "#/definitions/v1SetLimitsResponse"
            }
          },
          "400": {
            "description": "At least one limit must be specified",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemServiceSetLimitsBody"
            }
          }
        ],
        "tags": [
          "Usage Control",
          "Limits"
        ]
      }
    },
    "/instances/limits/_bulk": {
      "put": {
        "summary": "Sets many instance level limits",
        "operationId": "SystemService_BulkSetLimits",
        "responses": {
          "200": {
            "description": "Instance limits set",
            "schema": {
              "$ref": "#/definitions/v1BulkSetLimitsResponse"
            }
          },
          "400": {
            "description": "At least one limit must be specified for each instance",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BulkSetLimitsRequest"
            }
          }
        ],
        "tags": [
          "Usage Control",
          "Limits"
        ]
      }
    }
  },
  "definitions": {
    "AdminServiceActivateEmailProviderBody": {
      "type": "object"
    },
    "AdminServiceActivateSMSProviderBody": {
      "type": "object"
    },
    "AdminServiceActivateSMTPConfigBody": {
      "type": "object"
    },
    "AdminServiceAddCustomDomainPolicyBody": {
      "type": "object",
      "properties": {
        "userLoginMustBeDomain": {
          "type": "boolean",
          "description": "the username has to end with the domain of its organization",
          "title": "the username has to end with the domain of its organization (uniqueness is organization based)"
        },
        "validateOrgDomains": {
          "type": "boolean",
          "description": "defines if organization domains should be validated org count as validated automatically"
        },
        "smtpSenderAddressMatchesInstanceDomain": {
          "type": "boolean",
          "description": "defines if the SMTP sender address domain should match an existing domain on the instance"
        }
      }
    },
    "AdminServiceAddCustomOrgIAMPolicyBody": {
      "type": "object",
      "properties": {
        "userLoginMustBeDomain": {
          "type": "boolean",
          "description": "the username has to end with the domain of its organization",
          "title": "the username has to end with the domain of its organization (uniqueness is organization based)"
        }
      }
    },
    "AdminServiceDeactivateEmailProviderBody": {
      "type": "object"
    },
    "AdminServiceDeactivateSMSProviderBody": {
      "type": "object"
    },
    "AdminServiceDeactivateSMTPConfigBody": {
      "type": "object"
    },
    "AdminServiceSetDefaultDomainClaimedMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Domain has been claimed",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Change email / username",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Domain has been claimed",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "The domain {{.Domain}} has been claimed by an organization. Your current user {{.UserName}} is not part of this organization. Therefore you'll have to change your email when you log in. We have created a temporary username ({{.TempUsername}}) for this login.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Login",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "AdminServiceSetDefaultInitMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Initialize User",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Initialize User",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Initialize User",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "This user was created in Zitadel. Use the username {{.PreferredLoginName}} to log in. Please click the button below to finish the initialization process. (Code {{.Code}}) If you didn't ask for this mail, please ignore it.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Finish initialization",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "AdminServiceSetDefaultInviteUserMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Invitation to {{.ApplicationName}}",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Invitation to {{.ApplicationName}}",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Invitation to {{.ApplicationName}}",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.DisplayName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "Your user has been invited to {{.ApplicationName}}. Please click the button below to finish the invite process. If you didn't ask for this mail, please ignore it.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Accept invite",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "AdminServiceSetDefaultPasswordChangeMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Password of the user has changed",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Password Changed",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Password of user has changed",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "The password of your user has changed, if this change was not done by you, please be advised to immediately reset your password.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Login",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "AdminServiceSetDefaultPasswordResetMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Reset Password",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Reset Password",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Reset Password",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "We received a password reset request. Please use the button below to reset your password. (Code {{.Code}}) If you didn't ask for this mail, please ignore it.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Reset Password",
          "maxLength": 500
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "AdminServiceSetDefaultPasswordlessRegistrationMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Add Passwordless Login",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Add Passwordless Login",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Add Passwordless Login",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 500
        },
        "text": {
          "type": "string",
          "example": "We received a request to add a token for passwordless login. Please use the button below to add your token or device for passwordless login.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Add Passwordless Login",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "AdminServiceSetDefaultVerifyEmailMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Verify Email",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Verify Email",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Verify Email",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "A new email has been added. Please use the button below to verify your email. (Code {{.Code}}) If you didn't add a new email, please ignore this email.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Verify Email",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "AdminServiceSetDefaultVerifyEmailOTPMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - One-time Password",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Verify One-time Password ",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Verify One-time Password",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "Please use the \"Authenticate\" button or copy the one-time password {{.OTP}} and paste it to to the authentication screen in order to authenticate at ZITADEL within the next five minutes.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Authenticate",
          "maxLength": 500
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "AdminServiceSetDefaultVerifyPhoneMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Verify Phone",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Verify Phone",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Verify Phone",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "A new phone number has been added. Please use the following code to verify it {{.Code}}.",
          "maxLength": 800
        },
        "buttonText": {
          "type": "string",
          "example": "Verify Phone",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "AdminServiceSetDefaultVerifySMSOTPMessageTextBody": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "example": "Please visit {{ .VerifyURL }} or copy the one-time password {{.OTP}} and paste it to to the authentication screen in order to authenticate at ZITADEL within the next five minutes.",
          "maxLength": 800
        }
      }
    },
    "AdminServiceTestEmailProviderSMTPByIdBody": {
      "type": "object",
      "properties": {
        "receiverAddress": {
          "type": "string",
          "example": "noreply@m.zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "receiverAddress"
      ]
    },
    "AdminServiceTestSMTPConfigByIdBody": {
      "type": "object",
      "properties": {
        "receiverAddress": {
          "type": "string",
          "example": "noreply@m.zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "receiverAddress"
      ]
    },
    "AdminServiceUpdateCustomDomainPolicyBody": {
      "type": "object",
      "properties": {
        "userLoginMustBeDomain": {
          "type": "boolean",
          "description": "the username has to end with the domain of its organization"
        },
        "validateOrgDomains": {
          "type": "boolean",
          "description": "defines if organization domains should be validated org count as validated automatically"
        },
        "smtpSenderAddressMatchesInstanceDomain": {
          "type": "boolean",
          "description": "defines if the SMTP sender address domain should match an existing domain on the instance"
        }
      }
    },
    "AdminServiceUpdateCustomOrgIAMPolicyBody": {
      "type": "object",
      "properties": {
        "userLoginMustBeDomain": {
          "type": "boolean",
          "description": "the username has to end with the domain of its organization"
        }
      }
    },
    "AdminServiceUpdateEmailProviderHTTPBody": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "example": "http://relay.example.com/provider",
          "maxLength": 2048,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "example": "provider description",
          "maxLength": 200
        }
      },
      "required": [
        "endpoint"
      ]
    },
    "AdminServiceUpdateEmailProviderSMTPBody": {
      "type": "object",
      "properties": {
        "senderAddress": {
          "type": "string",
          "example": "noreply@m.zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        },
        "senderName": {
          "type": "string",
          "example": "ZITADEL",
          "maxLength": 200,
          "minLength": 1
        },
        "tls": {
          "type": "boolean"
        },
        "host": {
          "type": "string",
          "example": "smtp.postmarkapp.com:587",
          "description": "Make sure to include the port.",
          "maxLength": 500,
          "minLength": 1
        },
        "user": {
          "type": "string",
          "example": "197f0117-529e-443d-bf6c-0292dd9a02b7"
        },
        "replyToAddress": {
          "type": "string",
          "example": "replyto@m.zitadel.cloud",
          "maxLength": 200
        },
        "password": {
          "type": "string",
          "example": "this-is-my-password"
        },
        "description": {
          "type": "string",
          "example": "provider description",
          "maxLength": 200
        }
      },
      "required": [
        "senderAddress",
        "senderName",
        "host"
      ]
    },
    "AdminServiceUpdateEmailProviderSMTPPasswordBody": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "example": "this-is-my-updated-password"
        }
      }
    },
    "AdminServiceUpdateIAMMemberBody": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "example": [
            "IAM_OWNER"
          ],
          "items": {
            "type": "string"
          },
          "description": "If no roles are provided the user won't have any rights"
        }
      }
    },
    "AdminServiceUpdateIDPBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "google",
          "maxLength": 200,
          "minLength": 1
        },
        "stylingType": {
          "$ref": "#/definitions/v1IDPStylingType",
          "description": "some identity providers specify the styling of the button to their login"
        },
        "autoRegister": {
          "type": "boolean"
        }
      },
      "description": "Updates fields of an IDP",
      "required": [
        "name"
      ]
    },
    "AdminServiceUpdateIDPJWTConfigBody": {
      "type": "object",
      "properties": {
        "jwtEndpoint": {
          "type": "string",
          "example": "https://custom.com/auth/jwt",
          "description": "the endpoint where the jwt can be extracted",
          "maxLength": 200,
          "minLength": 1
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.custom.com",
          "description": "the issuer of the jwt (for validation)",
          "maxLength": 200,
          "minLength": 1
        },
        "keysEndpoint": {
          "type": "string",
          "example": "https://accounts.custom.com/keys",
          "description": "the endpoint to the key (JWK) which is used to sign the JWT with",
          "maxLength": 200,
          "minLength": 1
        },
        "headerName": {
          "type": "string",
          "example": "x-auth-token",
          "description": "the name of the header where the JWT is sent in, default is authorization",
          "maxLength": 200
        }
      },
      "required": [
        "jwtEndpoint",
        "issuer",
        "keysEndpoint",
        "headerName"
      ]
    },
    "AdminServiceUpdateIDPOIDCConfigBody": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com",
          "description": "the oidc issuer of the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "clientId": {
          "type": "string",
          "description": "client id generated by the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "clientSecret": {
          "type": "string",
          "description": "client secret generated by the identity provider. If empty the secret is not overwritten",
          "maxLength": 200
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request on the identity provider"
        },
        "displayNameMapping": {
          "$ref": "#/definitions/v1OIDCMappingField",
          "description": "definition which field is mapped to the display name of the user"
        },
        "usernameMapping": {
          "$ref": "#/definitions/v1OIDCMappingField",
          "description": "definition which field is mapped to the email of the user"
        }
      },
      "required": [
        "issuer",
        "clientId"
      ]
    },
    "AdminServiceUpdateSMSProviderHTTPBody": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "example": "http://relay.example.com/provider",
          "maxLength": 2048,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "example": "provider description",
          "maxLength": 200
        }
      },
      "required": [
        "endpoint"
      ]
    },
    "AdminServiceUpdateSMSProviderTwilioBody": {
      "type": "object",
      "properties": {
        "sid": {
          "type": "string",
          "example": "AB123b9e61d238abae7d3be7b65ecbc987",
          "maxLength": 200,
          "minLength": 1
        },
        "senderNumber": {
          "type": "string",
          "example": "AB123b9e61d238abae7d3be7b65ecbc987",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "example": "provider description",
          "maxLength": 200
        },
        "verifyServiceSid": {
          "type": "string",
          "example": "AB123b9e61d238abae7d3be7b65ecbc987",
          "maxLength": 200
        }
      },
      "required": [
        "sid"
      ]
    },
    "AdminServiceUpdateSMSProviderTwilioTokenBody": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "AdminServiceUpdateSMTPConfigBody": {
      "type": "object",
      "properties": {
        "senderAddress": {
          "type": "string",
          "example": "noreply@m.zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        },
        "senderName": {
          "type": "string",
          "example": "ZITADEL",
          "maxLength": 200,
          "minLength": 1
        },
        "tls": {
          "type": "boolean"
        },
        "host": {
          "type": "string",
          "example": "smtp.postmarkapp.com:587",
          "description": "Make sure to include the port.",
          "maxLength": 500,
          "minLength": 1
        },
        "user": {
          "type": "string",
          "example": "197f0117-529e-443d-bf6c-0292dd9a02b7"
        },
        "replyToAddress": {
          "type": "string",
          "example": "replyto@m.zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        },
        "password": {
          "type": "string",
          "example": "this-is-my-password"
        },
        "description": {
          "type": "string",
          "example": "provider description",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "senderAddress",
        "senderName",
        "host"
      ]
    },
    "AdminServiceUpdateSMTPConfigPasswordBody": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "example": "this-is-my-updated-password"
        }
      }
    },
    "AdminServiceUpdateSecretGeneratorBody": {
      "type": "object",
      "properties": {
        "length": {
          "type": "integer",
          "format": "int64",
          "example": 6
        },
        "expiry": {
          "type": "string",
          "example": "3600s"
        },
        "includeLowerLetters": {
          "type": "boolean"
        },
        "includeUpperLetters": {
          "type": "boolean"
        },
        "includeDigits": {
          "type": "boolean"
        },
        "includeSymbols": {
          "type": "boolean"
        }
      }
    },
    "CreateInstanceRequestMachineKey": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1KeyType"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "example": "2519-04-01T08:45:00.000000Z",
          "description": "The date the key will expire and no logins will be possible"
        }
      }
    },
    "ExportDataRequestGCSOutput": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "example": "zitadel-test-bucket"
        },
        "serviceaccountJson": {
          "type": "string",
          "example": "ewogICJ0eXFUJEfjjue9WFJishieWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAiY2Fvcy0yNDA4MDkiLAogICJwcml2YXRlX2tleV9pZCI6ICJjMmFlYWQwZjYwODk5MGU4NzM0NjllYThiYWZlMjdhZGQ2YTAyMzY2IiwKICAicHJpdmF0ZV9rZXkiOiAiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tJFOgj8JeJFNOEFGQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUNZcHlqMDBqMnRCRThOXG5NYnNRSUk3dkhudG5oUW1QWThDcWZyTzduZXV1cHRuemphNGxJa0pLeDNmcFZFRDJUWXJySWUfh5JfsoixmXG42MTlTeTVLMWFYY05Xamx0Z1UyMVVvbjJLZzdBbi9BVWJkRDdvUUxaWER1MU0rV09nV0NndUlKZ0ZCNjhVaENnXG5acHBtR1FaeTNvNDJaYVFCTkdVRlprR1Z6UnNtU24zakdWZmNaU202YWJCTm9xaitucFVwMjJraDdkdurTJFISE55HVXZBVWs0cWErMXdnR1BlNlNET3Q4NUQ4WFZKV3Urblc2cTNwQjh0WllCMnJWMlpEcGEwK1NnUzBBYWczSXh1XG5COVpZdm14cVZqYjRYQ2h0a0NDTjRoS25GS1N5K09KdnJBcjZiSTZDek0rRzVYQW1HWUxHVGxpRUMwVUlCVXVlXG44U2llbHVVckFnTUJBQUVDZ2dFQUg0b1YrN00rZS9OU2MrcnM5OUdLUnB4WktkUENYR1pqUmJhazR1UW5jQy9ZXG5BeXFvS3RMdnVHeUsrV0huaEJ3VVVpMXg2TUM2SGtHc3lKL2tVNEpzL3Q5WjhoL01rclB1L3NJZGNBZFRnZmZwXG5qZ2I4Y1NqY29sVWNudjBvZGkrRDYrRURTdCtOVkNKdWZmMkU5QWhDblZRZk5OeitMQ09McGJoeFg0Wi9rQUx0XG5QeHI0TG5yd2VEUWxEcFBtdXhibGpoelJHbEhaVFd1YVRKSU9Lb29USzBXN21OK2lqUXp4c1pMYVFsQjkyanhlXG5VM3BGMFkzK2lIRW42SzBVb2RROHB0b2dld3NjMjFYTTZGbkVTMVB4OFBUWTNHWmVnZEd4eU5rVlVwdklEZkRjXG5RV3lBd2NyS28zenh5VUM4VkZrRFZjZitLSGM5U3NOSk9QWVJlYkQ5UlFLQmdRRFFjYTVWTWYybkx0WkNpc2M2XG5seExnNzAvNzVUekN1R2UvZ0JRVGkrUGk2L1lIWXViVGdPcEkwNkN3TndNOUlVOEIzd2pjWHNndGk3QmVqRmhxXG5PUFRiSS8zL0w2U3BMd2d0d1RmSDhwYlFaUVBCWVM2TmkzclV4OWpoa3Q3RzRGeDhHTnhNanRsZjFjK3ZEbE4rXG41d2p2dytLT2RyYnF4Tjk0a2VsazFETi9Od0tCZ1FDN2V2WXFGZ3QwMWVKOVg1NTdMUUp6ajBqcmYvYk1iYis2XG5PWkpHU2NXY1R2N3oxWEdsRTFEZmpXeDdkQ0tPNG5CbnA3THBDOFhCZUI2a1A2ekJRYk9tRmsvbWtnem1SU2F4XG5SZ2o2N3VzQUdsUzQycktMeUc3Y3c4ZHprL29TaWQ3cTdGaDEvb2hCZmRxYnVmdzdVY2FEMmJ6eUNpQjREdmw0XG5mRDJtRituN3JRS0JnUUNRRmVVQ016bzVkS0RiQW45Uk90anI3OEVFU0tQRm5oN3BPeW1sa1UrSHJzQTB2dUw4XG5WT0tlVU51RXM2SmpnVURSOUZCMXRIYi9OTTVIclEvNDdVSWtzUzZFVlhTbkZrRzdEeEwxL2ZUT1BPVnBxVG02XG4waTJvSkRVQlNMc0NFbGtiMXp1QkdFV2VmM2UrZEZLM0tCRC9YQktoaytKQlNyR0c4S1c2OHd4ZDVRS0JnUUNRXG5oanludXZDLzgzV3l3bmh3YWdVZXdsRXJRaTBsOEdEQmxVbitwellQeGhIaU5DTjBac3lNV1FCTXR2MUErcXcrXG5LOWZPc1VXVVhCMzY3aDhscDVsdXFucVR1dmo0dGt3YWttdXZ6V2daWHpMNmdaVHNEdW52ZzNrSXp3VVRMM2RKXG4wRUp0UzNjTVRaR3RSSlY5d1E5d2F2U3QvVUtFYXI3RHM3cnVoRGJhelFLQmdCOEQvbm83NXdISW9zd3p5bUo3XG43STNXekgzUzRsV2s2bUdMdjdlTnR3bFBPWVR6VHhyVFRtVzJHRDExNlhQRkQrbUFnanIwYlNzMDdJd2F5aytzXG5ZUmtGWmQ0emZnb2ZyVU1QS1d6WVBWS0RPOVNGMlFTU0V6SVNmU3p3SkZCWFp6d2pKeHdnbXIwbDR6aDJvZURTXG5iYXZOZDVvaHZNR05WZUZrKzVkZ3pKUEhcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsCiAgImNsaWVudF9lbWFpbCI6ICJvcmJvcy1iZW56QGNhb3MtMjQwODA5LmlhbS5nc2VydmljZWFjY291bnQuY29tIiwKICAiY2xpZW50X2lkIjogIjExMzU0OTkwNDM2NjczMjE1MzM1NSIsCiAgImF1dGhfdXJpIjogImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoIiwKICAidG9rZW5fdXJpIjogImh0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuIiwKICAiYXV0aF9wcm92aWRlcl94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsCiAgImNsaWVudF94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3JvYm90L3YxL21ldGFkYXRhL3g1MDkvb3Jib3MtYmVueiU0MGNhb3MtMjQwODA5LmlhbS5nc2VydmljZWFjY291bnQuY29tIgp9Cg=="
        },
        "path": {
          "type": "string",
          "example": "my_export_file.json"
        }
      }
    },
    "ExportDataRequestLocalOutput": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "ExportDataRequestS3Output": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "accessKeyId": {
          "type": "string"
        },
        "secretAccessKey": {
          "type": "string"
        },
        "ssl": {
          "type": "boolean"
        },
        "bucket": {
          "type": "string"
        }
      }
    },
    "ImportDataRequestGCSInput": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string"
        },
        "serviceaccountJson": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "ImportDataRequestLocalInput": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "ImportDataRequestS3Input": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "accessKeyId": {
          "type": "string"
        },
        "secretAccessKey": {
          "type": "string"
        },
        "ssl": {
          "type": "boolean"
        },
        "bucket": {
          "type": "string"
        }
      }
    },
    "ImportHumanUserResponsePasswordlessRegistration": {
      "type": "object",
      "properties": {
        "link": {
          "type": "string"
        },
        "lifetime": {
          "type": "string",
          "title": "deprecated: use expiration instead"
        },
        "expiration": {
          "type": "string"
        }
      }
    },
    "ListEventsRequestcreation_date_range": {
      "type": "object",
      "properties": {
        "since": {
          "type": "string",
          "format": "date-time",
          "example": "2019-04-01T08:45:00.000000Z",
          "description": "The events returned are younger than the UTC since date"
        },
        "until": {
          "type": "string",
          "format": "date-time",
          "example": "2019-04-01T08:45:00.000000Z",
          "description": "The events returned are older than the UTC until date."
        }
      }
    },
    "ManagementServiceAddAPIAppBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "MyAPIApp",
          "maxLength": 200,
          "minLength": 1
        },
        "authMethodType": {
          "$ref": "#/definitions/v1APIAuthMethodType"
        }
      },
      "required": [
        "name"
      ]
    },
    "ManagementServiceAddAppKeyBody": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1KeyType",
          "example": "KEY_TYPE_JSON"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "example": "2519-04-01T08:45:00.000000Z",
          "description": "The date the key will expire and no logins will be possible"
        }
      }
    },
    "ManagementServiceAddMachineKeyBody": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1KeyType",
          "example": "KEY_TYPE_JSON",
          "description": "The date the key will expire and no logins will be possible"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "example": "2519-04-01T08:45:00.000000Z",
          "description": "The date the key will expire and no logins will be possible"
        },
        "publicKey": {
          "type": "string",
          "format": "byte",
          "example": "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1...",
          "description": "Optionally provide a public key of your own generated RSA private key."
        }
      }
    },
    "ManagementServiceAddOIDCAppBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "MyOIDCApp",
          "maxLength": 200,
          "minLength": 1
        },
        "redirectUris": {
          "type": "array",
          "example": [
            "http://localhost:4200/auth/callback"
          ],
          "items": {
            "type": "string"
          },
          "description": "Callback URI of the authorization request where the code or tokens will be sent to"
        },
        "responseTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OIDCResponseType"
          },
          "description": "Determines whether a code, id_token token or just id_token will be returned"
        },
        "grantTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OIDCGrantType"
          },
          "description": "The flow type the application uses to gain access"
        },
        "appType": {
          "$ref": "#/definitions/v1OIDCAppType",
          "description": "Determines the paradigm of the application"
        },
        "authMethodType": {
          "$ref": "#/definitions/v1OIDCAuthMethodType",
          "description": "Defines how the application passes login credentials"
        },
        "postLogoutRedirectUris": {
          "type": "array",
          "example": [
            "http://localhost:4200/signedout"
          ],
          "items": {
            "type": "string"
          },
          "description": "ZITADEL will redirect to this link after a successful logout"
        },
        "version": {
          "$ref": "#/definitions/v1OIDCVersion"
        },
        "devMode": {
          "type": "boolean",
          "description": "Used for development, some checks of the OIDC specification will not be checked."
        },
        "accessTokenType": {
          "$ref": "#/definitions/v1OIDCTokenType",
          "description": "Type of the access token returned from ZITADEL"
        },
        "accessTokenRoleAssertion": {
          "type": "boolean",
          "description": "Adds roles to the claims of the access token (only if type == JWT) even if they are not requested by scopes"
        },
        "idTokenRoleAssertion": {
          "type": "boolean",
          "description": "Adds roles to the claims of the id token even if they are not requested by scopes"
        },
        "idTokenUserinfoAssertion": {
          "type": "boolean",
          "description": "Claims of profile, email, address and phone scopes are added to the id token even if an access token is issued. Attention this violates the OIDC specification"
        },
        "clockSkew": {
          "type": "string",
          "example": "1s",
          "description": "Used to compensate time difference of servers. Duration added to the \"exp\" claim and subtracted from \"iat\", \"auth_time\" and \"nbf\" claims"
        },
        "additionalOrigins": {
          "type": "array",
          "example": [
            "scheme://localhost:8080"
          ],
          "items": {
            "type": "string"
          },
          "description": "Additional origins (other than the redirect_uris) from where the API can be used, provided string has to be an origin (scheme://hostname[:port]) without path, query or fragment"
        },
        "skipNativeAppSuccessPage": {
          "type": "boolean",
          "description": "Skip the successful login page on native apps and directly redirect the user to the callback."
        },
        "backChannelLogoutUri": {
          "type": "string",
          "example": [
            "https://example.com/auth/backchannel"
          ],
          "description": "ZITADEL will use this URI to notify the application about terminated session according to the OIDC Back-Channel Logout (https://openid.net/specs/openid-connect-backchannel-1_0.html)"
        },
        "loginVersion": {
          "$ref": "#/definitions/v1LoginVersion",
          "description": "Specify the preferred login UI, where the user is redirected to for authentication. If unset, the login UI is chosen by the instance default."
        }
      },
      "required": [
        "name"
      ]
    },
    "ManagementServiceAddPersonalAccessTokenBody": {
      "type": "object",
      "properties": {
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "example": "2519-04-01T08:45:00.000000Z",
          "description": "The date the token will expire and no logins will be possible"
        }
      }
    },
    "ManagementServiceAddProjectGrantBody": {
      "type": "object",
      "properties": {
        "grantedOrgId": {
          "type": "string",
          "example": "28746028909593987"
        },
        "roleKeys": {
          "type": "array",
          "example": [
            "RoleKey1",
            "RoleKey2"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ManagementServiceAddProjectGrantMemberBody": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "69629012906488334",
          "maxLength": 200,
          "minLength": 1
        },
        "roles": {
          "type": "array",
          "example": [
            "PROJECT_GRANT_OWNER"
          ],
          "items": {
            "type": "string"
          },
          "description": "If no roles are provided the user won't have any rights"
        }
      },
      "required": [
        "userId"
      ]
    },
    "ManagementServiceAddProjectMemberBody": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "example": [
            "PROJECT_OWNER"
          ],
          "items": {
            "type": "string"
          },
          "description": "If no roles are provided the user won't have any rights"
        }
      }
    },
    "ManagementServiceAddProjectRoleBody": {
      "type": "object",
      "properties": {
        "roleKey": {
          "type": "string",
          "example": "ADMIN",
          "description": "The key is the only relevant attribute for ZITADEL regarding the authorization checks.",
          "maxLength": 200,
          "minLength": 1
        },
        "displayName": {
          "type": "string",
          "example": "Administrator",
          "maxLength": 200,
          "minLength": 1
        },
        "group": {
          "type": "string",
          "example": "Admins",
          "description": "The group is only used for display purposes. That you have better handling, like giving all the roles from a group to a user.",
          "maxLength": 200
        }
      },
      "required": [
        "roleKey",
        "displayName"
      ]
    },
    "ManagementServiceAddSAMLAppBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "MySAMLApp",
          "maxLength": 200,
          "minLength": 1
        },
        "metadataXml": {
          "type": "string",
          "format": "byte"
        },
        "metadataUrl": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "ManagementServiceAddUserGrantBody": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "example": "58949026806489455",
          "maxLength": 200,
          "minLength": 1
        },
        "projectGrantId": {
          "type": "string",
          "example": "9847026806489455",
          "description": "Make sure to fill in the project grant id if the user grant is for a granted project and the organization is not the owner of the project.",
          "maxLength": 200
        },
        "roleKeys": {
          "type": "array",
          "example": [
            "RoleKey1",
            "RoleKey2"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "projectId"
      ]
    },
    "ManagementServiceBulkAddProjectRolesBody": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "example": [
            {
              "key": "ADMIN",
              "display_name": "Administrator"
            },
            {
              "key": "SUPPORT",
              "display_name": "Supporter"
            }
          ],
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BulkAddProjectRolesRequestRole"
          },
          "title": "Roles"
        }
      }
    },
    "ManagementServiceBulkRemoveUserMetadataBody": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "example": [
            "test1",
            "test2"
          ],
          "items": {
            "type": "string"
          },
          "description": "A list of keys that should be removed"
        }
      },
      "required": [
        "keys"
      ]
    },
    "ManagementServiceBulkSetUserMetadataBody": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "array",
          "example": [
            {
              "key": "test1",
              "value": "VGhpcyBpcyBteSBmaXJzdCB2YWx1ZQ=="
            },
            {
              "key": "test2",
              "value": "VGhpcyBpcyBteSBzZWNvbmQgdmFsdWU="
            }
          ],
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BulkSetUserMetadataRequestMetadata"
          },
          "description": "The values have to be base64 encoded.",
          "title": "Medata (Key/Value)"
        }
      }
    },
    "ManagementServiceDeactivateActionBody": {
      "type": "object"
    },
    "ManagementServiceDeactivateAppBody": {
      "type": "object"
    },
    "ManagementServiceDeactivateOrgIDPBody": {
      "type": "object"
    },
    "ManagementServiceDeactivateProjectBody": {
      "type": "object"
    },
    "ManagementServiceDeactivateProjectGrantBody": {
      "type": "object"
    },
    "ManagementServiceDeactivateUserGrantBody": {
      "type": "object"
    },
    "ManagementServiceDeleteActionBody": {
      "type": "object"
    },
    "ManagementServiceGenerateMachineSecretBody": {
      "type": "object"
    },
    "ManagementServiceGenerateOrgDomainValidationBody": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1DomainValidationType"
        }
      }
    },
    "ManagementServiceListAppKeysBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        }
      }
    },
    "ManagementServiceListAppsBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "ManagementServiceListHumanLinkedIDPsBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        }
      }
    },
    "ManagementServiceListMachineKeysBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        }
      }
    },
    "ManagementServiceListPersonalAccessTokensBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        }
      }
    },
    "ManagementServiceListProjectGrantMembersBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmemberv1SearchQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "ManagementServiceListProjectGrantsBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProjectGrantQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "ManagementServiceListProjectMembersBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmemberv1SearchQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "ManagementServiceListProjectRolesBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "ManagementServiceListUserChangesBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/v1ChangeQuery",
          "title": "list limitations and ordering"
        }
      }
    },
    "ManagementServiceListUserMembershipsBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MembershipQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "ManagementServiceListUserMetadataBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetadataQuery"
          },
          "description": "Metadata object-specific queries.",
          "title": "Medata Query"
        }
      }
    },
    "ManagementServiceReactivateActionBody": {
      "type": "object"
    },
    "ManagementServiceReactivateAppBody": {
      "type": "object"
    },
    "ManagementServiceReactivateOrgIDPBody": {
      "type": "object"
    },
    "ManagementServiceReactivateProjectBody": {
      "type": "object"
    },
    "ManagementServiceReactivateProjectGrantBody": {
      "type": "object"
    },
    "ManagementServiceReactivateUserGrantBody": {
      "type": "object"
    },
    "ManagementServiceRegenerateAPIClientSecretBody": {
      "type": "object"
    },
    "ManagementServiceRegenerateOIDCClientSecretBody": {
      "type": "object"
    },
    "ManagementServiceResendHumanEmailVerificationBody": {
      "type": "object"
    },
    "ManagementServiceResendHumanInitializationBody": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "updated-email@test.com",
          "description": "Send a new email address if the one set on the user is wrong or has a typo."
        }
      }
    },
    "ManagementServiceResendHumanPhoneVerificationBody": {
      "type": "object"
    },
    "ManagementServiceSendHumanResetPasswordNotificationBody": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1SendHumanResetPasswordNotificationRequestType"
        }
      }
    },
    "ManagementServiceSendPasswordlessRegistrationBody": {
      "type": "object"
    },
    "ManagementServiceSetCustomDomainClaimedMessageCustomTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Domain has been claimed",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Change email / username",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Domain has been claimed",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "The domain {{.Domain}} has been claimed by an organization. Your current user {{.UserName}} is not part of this organization. Therefore you'll have to change your email when you log in. We have created a temporary username ({{.TempUsername}}) for this login.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Login",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "ManagementServiceSetCustomInitMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Initialize User",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Initialize User",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Initialize User",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "This user was created in Zitadel. Use the username {{.PreferredLoginName}} to log in. Please click the button below to finish the initialization process. (Code {{.Code}}) If you didn't ask for this mail, please ignore it.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Finish initialization",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "ManagementServiceSetCustomInviteUserMessageCustomTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Invitation to {{.ApplicationName}}",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Invitation to {{.ApplicationName}}",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Invitation to {{.ApplicationName}}",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.DisplayName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "Your user has been invited to {{.ApplicationName}}. Please click the button below to finish the invite process. If you didn't ask for this mail, please ignore it.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Accept invite",
          "maxLength": 500
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "ManagementServiceSetCustomPasswordChangeMessageCustomTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Add Passwordless Login",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Add Passwordless Login",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Add Passwordless Login",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "We received a request to add a token for passwordless login. Please use the button below to add your token or device for passwordless login.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Add Passwordless Login",
          "maxLength": 500
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "ManagementServiceSetCustomPasswordResetMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Reset Password",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Reset Password",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Reset Password",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "We received a password reset request. Please use the button below to reset your password. (Code {{.Code}}) If you didn't ask for this mail, please ignore it.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Reset Password",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "ManagementServiceSetCustomPasswordlessRegistrationMessageCustomTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Password of the user has changed",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Password Changed",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Password of user has changed",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "The password of your user has changed, if this change was not done by you, please be advised to immediately reset your password.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Login",
          "maxLength": 500
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "ManagementServiceSetCustomVerifyEmailMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Verify Email",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Verify Email",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Verify Email",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "A new email has been added. Please use the button below to verify your email. (Code {{.Code}}) If you didn't add a new email, please ignore this email.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Verify Email",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "ManagementServiceSetCustomVerifyEmailOTPMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - One-time Password",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Verify One-time Password ",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Verify One-time Password",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "Please use the \"Authenticate\" button or copy the one-time password {{.OTP}} and paste it to to the authentication screen in order to authenticate at ZITADEL within the next five minutes.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Authenticate",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "ManagementServiceSetCustomVerifyPhoneMessageTextBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "ZITADEL - Verify Phone",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Verify Phone",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Verify Phone",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "A new phone number has been added. Please use the following code to verify it {{.Code}}.",
          "maxLength": 800
        },
        "buttonText": {
          "type": "string",
          "example": "Verify Phone",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "ManagementServiceSetCustomVerifySMSOTPMessageTextBody": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "example": "Please visit {{ .VerifyURL }} or copy the one-time password {{.OTP}} and paste it to to the authentication screen in order to authenticate at ZITADEL within the next five minutes.",
          "maxLength": 800
        }
      }
    },
    "ManagementServiceSetHumanInitialPasswordBody": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        }
      }
    },
    "ManagementServiceSetHumanPasswordBody": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "example": "MyNewPassword1234!",
          "maxLength": 72,
          "minLength": 1
        },
        "noChangeRequired": {
          "type": "boolean"
        }
      },
      "required": [
        "password"
      ]
    },
    "ManagementServiceSetOrgMetadataBody": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "byte",
          "example": "VGhpcyBpcyBteSB0ZXN0IHZhbHVl",
          "description": "The value has to be base64 encoded.",
          "maxLength": 500000,
          "minLength": 1
        }
      }
    },
    "ManagementServiceSetTriggerActionsBody": {
      "type": "object",
      "properties": {
        "actionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ManagementServiceSetUserMetadataBody": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "byte",
          "example": "VGhpcyBpcyBteSB0ZXN0IHZhbHVl",
          "description": "The value has to be base64 encoded.",
          "maxLength": 500000,
          "minLength": 1
        }
      }
    },
    "ManagementServiceUpdateAPIAppConfigBody": {
      "type": "object",
      "properties": {
        "authMethodType": {
          "$ref": "#/definitions/v1APIAuthMethodType"
        }
      }
    },
    "ManagementServiceUpdateActionBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "log context"
        },
        "script": {
          "type": "string",
          "example": "function log(context, calls){console.log(context)}",
          "description": "Javascript code that should be executed",
          "maxLength": 10000,
          "minLength": 1
        },
        "timeout": {
          "type": "string",
          "description": "after which time the action will be terminated if not finished"
        },
        "allowedToFail": {
          "type": "boolean",
          "description": "when true, the next action will be called even if this action fails"
        }
      }
    },
    "ManagementServiceUpdateAppBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "MyApplicationName",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "name"
      ]
    },
    "ManagementServiceUpdateHumanEmailBody": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "gigi@zitadel.com"
        },
        "isEmailVerified": {
          "type": "boolean"
        }
      }
    },
    "ManagementServiceUpdateHumanPhoneBody": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41 71 000 00 00",
          "description": "mobile phone number of the user. (use global pattern of spec https://tools.ietf.org/html/rfc3966)",
          "maxLength": 50,
          "minLength": 1
        },
        "isPhoneVerified": {
          "type": "boolean"
        }
      },
      "required": [
        "phone"
      ]
    },
    "ManagementServiceUpdateHumanProfileBody": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Gigi",
          "maxLength": 200,
          "minLength": 1
        },
        "lastName": {
          "type": "string",
          "example": "Giraffe",
          "maxLength": 200,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "example": "Gigi",
          "maxLength": 200
        },
        "displayName": {
          "type": "string",
          "example": "Gigi",
          "maxLength": 200,
          "minLength": 1
        },
        "preferredLanguage": {
          "type": "string",
          "example": "en",
          "maxLength": 10
        },
        "gender": {
          "$ref": "#/definitions/userv1Gender"
        }
      },
      "required": [
        "firstName",
        "lastName",
        "displayName"
      ]
    },
    "ManagementServiceUpdateMachineBody": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "accessTokenType": {
          "$ref": "#/definitions/userv1AccessTokenType"
        }
      }
    },
    "ManagementServiceUpdateOIDCAppConfigBody": {
      "type": "object",
      "properties": {
        "redirectUris": {
          "type": "array",
          "example": [
            "http://localhost:4200/auth/callback"
          ],
          "items": {
            "type": "string"
          },
          "description": "Callback URI of the authorization request where the code or tokens will be sent to"
        },
        "responseTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OIDCResponseType"
          },
          "description": "Determines whether a code, id_token token or just id_token will be returned"
        },
        "grantTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OIDCGrantType"
          },
          "description": "The flow type the application uses to gain access"
        },
        "appType": {
          "$ref": "#/definitions/v1OIDCAppType",
          "description": "Determines the paradigm of the application"
        },
        "authMethodType": {
          "$ref": "#/definitions/v1OIDCAuthMethodType",
          "description": "Defines how the application passes login credentials"
        },
        "postLogoutRedirectUris": {
          "type": "array",
          "example": [
            "http://localhost:4200/signedout"
          ],
          "items": {
            "type": "string"
          },
          "description": "ZITADEL will redirect to this link after a successful logout"
        },
        "devMode": {
          "type": "boolean",
          "description": "Used for development, some checks of the OIDC specification will not be checked."
        },
        "accessTokenType": {
          "$ref": "#/definitions/v1OIDCTokenType",
          "description": "Type of the access token returned from ZITADEL"
        },
        "accessTokenRoleAssertion": {
          "type": "boolean",
          "description": "Adds roles to the claims of the access token (only if type == JWT) even if they are not requested by scopes"
        },
        "idTokenRoleAssertion": {
          "type": "boolean",
          "description": "Adds roles to the claims of the id token even if they are not requested by scopes"
        },
        "idTokenUserinfoAssertion": {
          "type": "boolean",
          "description": "Claims of profile, email, address and phone scopes are added to the id token even if an access token is issued. Attention this violates the OIDC specification"
        },
        "clockSkew": {
          "type": "string",
          "example": "1s",
          "description": "Used to compensate time difference of servers. Duration added to the \"exp\" claim and subtracted from \"iat\", \"auth_time\" and \"nbf\" claims"
        },
        "additionalOrigins": {
          "type": "array",
          "example": [
            "scheme://localhost:8080"
          ],
          "items": {
            "type": "string"
          },
          "description": "Additional origins (other than the redirect_uris) from where the API can be used, provided string has to be an origin (scheme://hostname[:port]) without path, query or fragment"
        },
        "skipNativeAppSuccessPage": {
          "type": "boolean",
          "description": "Skip the successful login page on native apps and directly redirect the user to the callback."
        },
        "backChannelLogoutUri": {
          "type": "string",
          "example": [
            "https://example.com/auth/backchannel"
          ],
          "description": "ZITADEL will use this URI to notify the application about terminated session according to the OIDC Back-Channel Logout (https://openid.net/specs/openid-connect-backchannel-1_0.html)"
        },
        "loginVersion": {
          "$ref": "#/definitions/v1LoginVersion",
          "description": "Specify the preferred login UI, where the user is redirected to for authentication. If unset, the login UI is chosen by the instance default."
        }
      }
    },
    "ManagementServiceUpdateOrgIDPBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "google",
          "maxLength": 200,
          "minLength": 1
        },
        "stylingType": {
          "$ref": "#/definitions/v1IDPStylingType",
          "description": "some identity providers specify the styling of the button to their login"
        },
        "autoRegister": {
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ]
    },
    "ManagementServiceUpdateOrgIDPJWTConfigBody": {
      "type": "object",
      "properties": {
        "jwtEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com",
          "description": "the endpoint where the JWT can be extracted",
          "maxLength": 200,
          "minLength": 1
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com",
          "description": "the issuer of the JWT (for validation)",
          "maxLength": 200,
          "minLength": 1
        },
        "keysEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com/keys",
          "description": "the endpoint to the key (JWK) which is used to sign the JWT with",
          "maxLength": 200,
          "minLength": 1
        },
        "headerName": {
          "type": "string",
          "example": "x-auth-token",
          "description": "the name of the header where the JWT is sent in, default is authorization",
          "maxLength": 200
        }
      },
      "required": [
        "jwtEndpoint",
        "issuer",
        "keysEndpoint",
        "headerName"
      ]
    },
    "ManagementServiceUpdateOrgIDPOIDCConfigBody": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "client id generated by the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "clientSecret": {
          "type": "string",
          "description": "client secret generated by the identity provider. If empty the secret is not overwritten"
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com",
          "description": "the OIDC issuer of the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request on the identity provider"
        },
        "displayNameMapping": {
          "$ref": "#/definitions/v1OIDCMappingField",
          "description": "definition which field is mapped to the display name of the user"
        },
        "usernameMapping": {
          "$ref": "#/definitions/v1OIDCMappingField",
          "description": "definition which field is mapped to the email of the user"
        }
      },
      "required": [
        "clientId",
        "issuer"
      ]
    },
    "ManagementServiceUpdateOrgMemberBody": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "example": [
            "IAM_OWNER"
          ],
          "items": {
            "type": "string"
          },
          "description": "If no roles are provided the user won't have any rights"
        }
      }
    },
    "ManagementServiceUpdateProjectBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "MyProject-Updated",
          "maxLength": 200,
          "minLength": 1
        },
        "projectRoleAssertion": {
          "type": "boolean",
          "description": "Enable this setting to have role information included in the user info endpoint. It is also dependent on your application settings to include it in tokens and other types."
        },
        "projectRoleCheck": {
          "type": "boolean",
          "description": "When enabled ZITADEL will check if a user has a role of this project assigned when login into an application of this project."
        },
        "hasProjectCheck": {
          "type": "boolean",
          "description": "When enabled ZITADEL will check if the organization of the user, that is trying to log in, has a grant to this project."
        },
        "privateLabelingSetting": {
          "$ref": "#/definitions/v1PrivateLabelingSetting",
          "description": "Define which private labeling/branding should trigger when getting to a login of this project."
        }
      },
      "required": [
        "name"
      ]
    },
    "ManagementServiceUpdateProjectGrantBody": {
      "type": "object",
      "properties": {
        "roleKeys": {
          "type": "array",
          "example": [
            "RoleKey1",
            "RoleKey2"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ManagementServiceUpdateProjectGrantMemberBody": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "example": [
            "PROJECT_GRANT_OWNER"
          ],
          "items": {
            "type": "string"
          },
          "description": "If no roles are provided the user won't have any rights"
        }
      }
    },
    "ManagementServiceUpdateProjectMemberBody": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "example": [
            "PROJECT_OWNER"
          ],
          "items": {
            "type": "string"
          },
          "description": "If no roles are provided the user won't have any rights"
        }
      }
    },
    "ManagementServiceUpdateProjectRoleBody": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "example": "Administrator",
          "maxLength": 200,
          "minLength": 1
        },
        "group": {
          "type": "string",
          "example": "Admins",
          "description": "The group is only used for display purposes. That you have better handling, like giving all the roles from a group to a user.",
          "maxLength": 200
        }
      },
      "required": [
        "displayName"
      ]
    },
    "ManagementServiceUpdateSAMLAppConfigBody": {
      "type": "object",
      "properties": {
        "metadataXml": {
          "type": "string",
          "format": "byte"
        },
        "metadataUrl": {
          "type": "string"
        }
      }
    },
    "ManagementServiceUpdateUserGrantBody": {
      "type": "object",
      "properties": {
        "roleKeys": {
          "type": "array",
          "example": [
            "RoleKey1",
            "RoleKey2"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ManagementServiceUpdateUserNameBody": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "example": "minnie-mouse-updated",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "userName"
      ]
    },
    "ManagementServiceValidateOrgDomainBody": {
      "type": "object"
    },
    "SAMLServiceCreateResponseBody": {
      "type": "object",
      "properties": {
        "session": {
          "$ref": "#/definitions/zitadelsamlv2Session"
        },
        "error": {
          "$ref": "#/definitions/zitadelsamlv2AuthorizationError",
          "description": "Set this field when the authorization flow failed. It creates a response depending on the SP, with the error details set."
        }
      }
    },
    "SetUpOrgRequestHumanEmail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "email address of the user. (spec: https://tools.ietf.org/html/rfc2822#section-3.4.1)",
          "minLength": 1
        },
        "isEmailVerified": {
          "type": "boolean"
        }
      },
      "required": [
        "email"
      ]
    },
    "SetUpOrgRequestHumanPhone": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41 71 000 00 00",
          "description": "mobile phone number of the user. (use global pattern of spec https://tools.ietf.org/html/rfc3966)",
          "title": "has to be a global number",
          "maxLength": 50,
          "minLength": 1
        },
        "isPhoneVerified": {
          "type": "boolean"
        }
      },
      "required": [
        "phone"
      ]
    },
    "SetUpOrgRequestHumanProfile": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Gigi",
          "maxLength": 200,
          "minLength": 1
        },
        "lastName": {
          "type": "string",
          "example": "Giraffe",
          "maxLength": 200,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "example": "gigi-giraffe",
          "maxLength": 200
        },
        "displayName": {
          "type": "string",
          "example": "Gigi Giraffe",
          "description": "a user can set the display name if nothing is set ZITADEL computes \"first_name last_name\"",
          "maxLength": 200
        },
        "preferredLanguage": {
          "type": "string",
          "example": "en",
          "description": "language tag analog https://tools.ietf.org/html/rfc3066",
          "maxLength": 10
        },
        "gender": {
          "$ref": "#/definitions/userv1Gender"
        }
      },
      "required": [
        "firstName",
        "lastName"
      ]
    },
    "SystemServiceAddDomainBody": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        }
      }
    },
    "SystemServiceAddQuotaBody": {
      "type": "object",
      "properties": {
        "unit": {
          "$ref": "#/definitions/v1Unit",
          "description": "the unit a quota should be imposed on",
          "title": "the unit a quota should be imposed on"
        },
        "from": {
          "type": "string",
          "format": "date-time",
          "example": "2019-04-01T08:45:00.000000Z",
          "description": "the starting time from which the current quota period is calculated from. This is relevant for querying the current usage."
        },
        "resetInterval": {
          "type": "string",
          "description": "the quota periods duration",
          "title": "the quota periods duration"
        },
        "amount": {
          "type": "string",
          "format": "uint64",
          "description": "the quota amount of units",
          "title": "the quota amount of units"
        },
        "limit": {
          "type": "boolean",
          "description": "whether ZITADEL should block further usage when the configured amount is used",
          "title": "whether ZITADEL should block further usage when the configured amount is used"
        },
        "notifications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Notification"
          },
          "description": "the handlers, ZITADEL executes when certain quota percentages are reached",
          "title": "the handlers, ZITADEL executes when certain quota percentages are reached"
        }
      }
    },
    "SystemServiceExistsDomainBody": {
      "type": "object"
    },
    "SystemServiceListDomainsBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1DomainFieldName",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelinstancev1DomainSearchQuery"
          },
          "title": "criterias the client is looking for"
        }
      }
    },
    "SystemServiceSetInstanceFeatureBody": {
      "type": "object",
      "properties": {
        "bool": {
          "type": "boolean"
        }
      }
    },
    "SystemServiceSetLimitsBody": {
      "type": "object",
      "properties": {
        "auditLogRetention": {
          "type": "string",
          "description": "auditLogRetention limits the number of events that can be queried via the events API by their age. A value of '0s' means that all events are available. If this value is set, it overwrites the system default."
        },
        "block": {
          "type": "boolean",
          "description": "if block is true, requests are responded with a resource exhausted error code."
        }
      }
    },
    "SystemServiceSetPrimaryDomainBody": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        }
      }
    },
    "SystemServiceSetQuotaBody": {
      "type": "object",
      "properties": {
        "unit": {
          "$ref": "#/definitions/v1Unit",
          "description": "the unit a quota should be imposed on",
          "title": "the unit a quota should be imposed on"
        },
        "from": {
          "type": "string",
          "format": "date-time",
          "example": "2019-04-01T08:45:00.000000Z",
          "description": "the starting time from which the current quota period is calculated from. This is relevant for querying the current usage."
        },
        "resetInterval": {
          "type": "string",
          "description": "the quota periods duration",
          "title": "the quota periods duration"
        },
        "amount": {
          "type": "string",
          "format": "uint64",
          "description": "the quota amount of units",
          "title": "the quota amount of units"
        },
        "limit": {
          "type": "boolean",
          "description": "whether ZITADEL should block further usage when the configured amount is used",
          "title": "whether ZITADEL should block further usage when the configured amount is used"
        },
        "notifications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Notification"
          },
          "description": "the handlers, ZITADEL executes when certain quota percentages are reached",
          "title": "the handlers, ZITADEL executes when certain quota percentages are reached"
        }
      }
    },
    "SystemServiceUpdateInstanceBody": {
      "type": "object",
      "properties": {
        "instanceName": {
          "type": "string"
        }
      }
    },
    "UserServiceCreateInviteCodeBody": {
      "type": "object",
      "properties": {
        "sendCode": {
          "$ref": "#/definitions/v2SendInviteCode"
        },
        "returnCode": {
          "$ref": "#/definitions/v2ReturnInviteCode"
        }
      }
    },
    "UserServiceListIDPLinksBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/objectv2ListQuery",
          "title": "list limitations and ordering"
        }
      }
    },
    "UserServiceListPasskeysBody": {
      "type": "object"
    },
    "UserServiceRemoveIDPLinkBody": {
      "type": "object"
    },
    "UserServiceSendEmailCodeBody": {
      "type": "object",
      "properties": {
        "sendCode": {
          "$ref": "#/definitions/userv2SendEmailVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2ReturnEmailVerificationCode"
        }
      }
    },
    "UserServiceVerifyInviteCodeBody": {
      "type": "object",
      "properties": {
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "\"the verification code generated during the invite code request\"",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "verificationCode"
      ]
    },
    "WebKeyECDSAConfigECDSACurve": {
      "type": "string",
      "enum": [
        "ECDSA_CURVE_UNSPECIFIED",
        "ECDSA_CURVE_P256",
        "ECDSA_CURVE_P384",
        "ECDSA_CURVE_P512"
      ],
      "default": "ECDSA_CURVE_UNSPECIFIED"
    },
    "WebKeyRSAConfigRSABits": {
      "type": "string",
      "enum": [
        "RSA_BITS_UNSPECIFIED",
        "RSA_BITS_2048",
        "RSA_BITS_3072",
        "RSA_BITS_4096"
      ],
      "default": "RSA_BITS_UNSPECIFIED"
    },
    "WebKeyRSAConfigRSAHasher": {
      "type": "string",
      "enum": [
        "RSA_HASHER_UNSPECIFIED",
        "RSA_HASHER_SHA256",
        "RSA_HASHER_SHA384",
        "RSA_HASHER_SHA512"
      ],
      "default": "RSA_HASHER_UNSPECIFIED"
    },
    "ZITADELUsersCreateWebAuthNRegistrationLinkBody": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/objectv3alphaInstance",
          "default": "\"domain from HOST or :authority header\""
        },
        "organization": {
          "$ref": "#/definitions/objectv3alphaOrganization",
          "description": "Optionally expect the user to be in this organization."
        },
        "sendLink": {
          "$ref": "#/definitions/v3alphaSendWebAuthNRegistrationLink",
          "description": "Let ZITADEL send the link to the user via email."
        },
        "returnCode": {
          "$ref": "#/definitions/v3alphaReturnWebAuthNRegistrationCode",
          "description": "Get the code back to provide it to the user in your preferred mechanism."
        }
      }
    },
    "ZITADELUsersRequestPasswordResetBody": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/objectv3alphaInstance",
          "default": "\"domain from HOST or :authority header\""
        },
        "organization": {
          "$ref": "#/definitions/objectv3alphaOrganization",
          "description": "Optionally expect the user to be in this organization."
        },
        "sendEmail": {
          "$ref": "#/definitions/v3alphaSendPasswordResetEmail",
          "description": "Let ZITADEL send the link to the user via email."
        },
        "sendSms": {
          "$ref": "#/definitions/v3alphaSendPasswordResetSMS",
          "description": "Let ZITADEL send the link to the user via SMS."
        },
        "returnCode": {
          "$ref": "#/definitions/userv3alphaReturnPasswordResetCode",
          "description": "Get the code back to provide it to the user in your preferred mechanism."
        }
      }
    },
    "ZITADELUsersResendContactEmailCodeBody": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/objectv3alphaInstance",
          "default": "\"domain from HOST or :authority header\""
        },
        "organization": {
          "$ref": "#/definitions/objectv3alphaOrganization",
          "description": "Optionally expect the user to be in this organization."
        },
        "sendCode": {
          "$ref": "#/definitions/userv3alphaSendEmailVerificationCode",
          "description": "Let ZITADEL send the link to the user via email."
        },
        "returnCode": {
          "$ref": "#/definitions/userv3alphaReturnEmailVerificationCode",
          "description": "Get the code back to provide it to the user in your preferred mechanism."
        }
      }
    },
    "ZITADELUsersResendContactPhoneCodeBody": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/objectv3alphaInstance",
          "default": "\"domain from HOST or :authority header\""
        },
        "organization": {
          "$ref": "#/definitions/objectv3alphaOrganization",
          "description": "Optionally expect the user to be in this organization."
        },
        "sendCode": {
          "$ref": "#/definitions/userv3alphaSendPhoneVerificationCode",
          "description": "Let ZITADEL send the link to the user via SMS."
        },
        "returnCode": {
          "$ref": "#/definitions/userv3alphaReturnPhoneVerificationCode",
          "description": "Get the code back to provide it to the user in your preferred mechanism."
        }
      }
    },
    "actionv1Flow": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/zitadelactionv1FlowType",
          "description": "\"the type of the flow\"",
          "title": "id of the flow type"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "state": {
          "$ref": "#/definitions/v1FlowState",
          "description": "the state of the flow"
        },
        "triggerActions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TriggerAction"
          }
        }
      }
    },
    "actionv3alphaGetTarget": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "config": {
          "$ref": "#/definitions/v3alphaTarget"
        },
        "signingKey": {
          "type": "string",
          "example": "98KmsU67"
        }
      }
    },
    "actionv3alphaPatchTarget": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ip_allow_list",
          "maxLength": 1000,
          "minLength": 1
        },
        "restWebhook": {
          "$ref": "#/definitions/v3alphaSetRESTWebhook"
        },
        "restCall": {
          "$ref": "#/definitions/v3alphaSetRESTCall"
        },
        "restAsync": {
          "$ref": "#/definitions/v3alphaSetRESTAsync"
        },
        "timeout": {
          "type": "string",
          "example": "10s",
          "description": "if the target doesn't respond before this timeout expires, the the connection is closed and the action fails"
        },
        "endpoint": {
          "type": "string",
          "example": "https://example.com/hooks/ip_check",
          "maxLength": 1000,
          "minLength": 1
        },
        "expirationSigningKey": {
          "type": "string",
          "example": "0s",
          "description": "Regenerate the key used for signing and checking the payload sent to the target.\nSet the graceful period for the existing key. During that time, the previous\nsigning key and the new one will be used to sign the request to allow you a smooth\ntransition onf your API.\n\nNote that we currently only allow an immediate rotation (\"0s\") and will support\nlonger expirations in the future."
        }
      }
    },
    "adminv1GetIDPByIDResponse": {
      "type": "object",
      "properties": {
        "idp": {
          "$ref": "#/definitions/idpv1IDP"
        }
      }
    },
    "appv1LoginV2": {
      "type": "object",
      "properties": {
        "baseUri": {
          "type": "string",
          "description": "Optionally specify a base uri of the login UI. If unspecified the default URI will be used."
        }
      }
    },
    "debug_eventsv3alphaEvent": {
      "type": "object",
      "properties": {
        "add": {
          "$ref": "#/definitions/v3alphaAddedEvent"
        },
        "change": {
          "$ref": "#/definitions/v3alphaChangedEvent"
        },
        "remove": {
          "$ref": "#/definitions/v3alphaRemovedEvent"
        }
      }
    },
    "eventv1Event": {
      "type": "object",
      "properties": {
        "editor": {
          "$ref": "#/definitions/v1Editor"
        },
        "aggregate": {
          "$ref": "#/definitions/v1Aggregate"
        },
        "sequence": {
          "type": "string",
          "format": "uint64"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "example": "2019-04-01T08:45:00.000000Z",
          "description": "The timestamp the event occurred"
        },
        "payload": {
          "type": "object",
          "example": {
            "firstName": "Gigi",
            "lastName": "Giraffe",
            "userName": "gigi@zitadel.com",
            "displayName": "Gigi"
          },
          "description": "Payload contains the data of the event."
        },
        "type": {
          "$ref": "#/definitions/v1EventType"
        }
      }
    },
    "featurev2FeatureFlag": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": false,
          "description": "Whether a feature is enabled."
        },
        "source": {
          "$ref": "#/definitions/featurev2Source",
          "description": "The source where the setting of the feature was defined. The source may be the resource itself or a resource owner through inheritance."
        }
      },
      "description": "FeatureFlag is a simple boolean Feature setting, without further payload."
    },
    "featurev2FeatureServiceSetOrganizationFeaturesBody": {
      "type": "object"
    },
    "featurev2FeatureServiceSetUserFeaturesBody": {
      "type": "object"
    },
    "featurev2GetInstanceFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "loginDefaultOrg": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "The login UI will use the settings of the default org (and not from the instance) if no organization context is set"
        },
        "oidcTriggerIntrospectionProjections": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature."
        },
        "oidcLegacyIntrospection": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature."
        },
        "userSchema": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "oidcTokenExchange": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance."
        },
        "actions": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "Actions v2 allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "improvedPerformance": {
          "$ref": "#/definitions/featurev2ImprovedPerformanceFeatureFlag",
          "example": [
            1
          ],
          "description": "Improves performance of specified execution paths."
        },
        "webKey": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "Enable the webkey/v3alpha API. The first time this feature is enabled, web keys are generated and activated."
        },
        "debugOidcParentError": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "Return parent errors to OIDC clients for debugging purposes. Parent errors may contain sensitive data or unwanted details about the system status of zitadel. Only enable if really needed."
        },
        "oidcSingleV1SessionTermination": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions."
        },
        "disableUserTokenEvent": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "Do not push user token meta-event user.token.v2.added to improve performance on many concurrent single (machine-)user logins"
        },
        "enableBackChannelLogout": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "If the flag is enabled, you'll be able to use the OIDC Back-Channel Logout to be notified in your application about terminated user sessions."
        },
        "loginV2": {
          "$ref": "#/definitions/v2LoginV2FeatureFlag",
          "example": true,
          "description": "If the flag is set, all users will be redirected to the login V2 regardless of the application's preference."
        }
      }
    },
    "featurev2GetOrganizationFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "featurev2GetSystemFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "loginDefaultOrg": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "The login UI will use the settings of the default org (and not from the instance) if no organization context is set"
        },
        "oidcTriggerIntrospectionProjections": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature."
        },
        "oidcLegacyIntrospection": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature."
        },
        "userSchema": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "oidcTokenExchange": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance."
        },
        "actions": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "Actions v2 allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "improvedPerformance": {
          "$ref": "#/definitions/featurev2ImprovedPerformanceFeatureFlag",
          "example": [
            1
          ],
          "description": "Improves performance of specified execution paths."
        },
        "oidcSingleV1SessionTermination": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions."
        },
        "disableUserTokenEvent": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "Do not push user token meta-event user.token.v2.added to improve performance on many concurrent single (machine-)user logins"
        },
        "enableBackChannelLogout": {
          "$ref": "#/definitions/featurev2FeatureFlag",
          "example": true,
          "description": "If the flag is enabled, you'll be able to use the OIDC Back-Channel Logout to be notified in your application about terminated user sessions."
        },
        "loginV2": {
          "$ref": "#/definitions/v2LoginV2FeatureFlag",
          "example": true,
          "description": "If the flag is set, all users will be redirected to the login V2 regardless of the application's preference."
        }
      }
    },
    "featurev2GetUserFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "featurev2ImprovedPerformance": {
      "type": "string",
      "enum": [
        "IMPROVED_PERFORMANCE_UNSPECIFIED",
        "IMPROVED_PERFORMANCE_ORG_BY_ID",
        "IMPROVED_PERFORMANCE_PROJECT_GRANT",
        "IMPROVED_PERFORMANCE_PROJECT",
        "IMPROVED_PERFORMANCE_USER_GRANT",
        "IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED"
      ],
      "default": "IMPROVED_PERFORMANCE_UNSPECIFIED",
      "description": " - IMPROVED_PERFORMANCE_ORG_BY_ID: Uses the eventstore to query the org by id\ninstead of the sql table.\n - IMPROVED_PERFORMANCE_PROJECT_GRANT: Improves performance on write side by using\noptimized processes to query data to determine\ncorrectnes of data.\n - IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED: Improve performance on write side when\nusers are checked against verified domains\nfrom other organizations."
    },
    "featurev2ImprovedPerformanceFeatureFlag": {
      "type": "object",
      "properties": {
        "executionPaths": {
          "type": "array",
          "example": [
            1
          ],
          "items": {
            "$ref": "#/definitions/featurev2ImprovedPerformance"
          },
          "description": "Which of the performance improvements is enabled"
        },
        "source": {
          "$ref": "#/definitions/featurev2Source",
          "description": "The source where the setting of the feature was defined. The source may be the resource itself or a resource owner through inheritance."
        }
      }
    },
    "featurev2LoginV2": {
      "type": "object",
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Require that all users must use the new login UI. If enabled, all users will be redirected to the login V2 regardless of the application's preference."
        },
        "baseUri": {
          "type": "string",
          "description": "Optionally specify a base uri of the login UI. If unspecified the default URI will be used."
        }
      }
    },
    "featurev2ResetInstanceFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "featurev2ResetOrganizationFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "featurev2ResetSystemFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "featurev2ResetUserFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "featurev2SetInstanceFeaturesRequest": {
      "type": "object",
      "properties": {
        "loginDefaultOrg": {
          "type": "boolean",
          "example": true,
          "description": "The login UI will use the settings of the default org (and not from the instance) if no organization context is set"
        },
        "oidcTriggerIntrospectionProjections": {
          "type": "boolean",
          "example": true,
          "description": "Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature."
        },
        "oidcLegacyIntrospection": {
          "type": "boolean",
          "example": true,
          "description": "We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature."
        },
        "userSchema": {
          "type": "boolean",
          "example": true,
          "description": "User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "oidcTokenExchange": {
          "type": "boolean",
          "example": true,
          "description": "Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance."
        },
        "actions": {
          "type": "boolean",
          "example": true,
          "description": "Actions allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "improvedPerformance": {
          "type": "array",
          "example": [
            1
          ],
          "items": {
            "$ref": "#/definitions/featurev2ImprovedPerformance"
          },
          "description": "Improves performance of specified execution paths."
        },
        "webKey": {
          "type": "boolean",
          "example": true,
          "description": "Enable the webkey/v3alpha API. The first time this feature is enabled, web keys are generated and activated."
        },
        "debugOidcParentError": {
          "type": "boolean",
          "example": true,
          "description": "Return parent errors to OIDC clients for debugging purposes. Parent errors may contain sensitive data or unwanted details about the system status of zitadel. Only enable if really needed."
        },
        "oidcSingleV1SessionTermination": {
          "type": "boolean",
          "example": true,
          "description": "If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions."
        },
        "disableUserTokenEvent": {
          "type": "boolean",
          "example": true,
          "description": "Do not push user token meta-event user.token.v2.added to improve performance on many concurrent single (machine-)user logins"
        },
        "enableBackChannelLogout": {
          "type": "boolean",
          "example": true,
          "description": "If the flag is enabled, you'll be able to use the OIDC Back-Channel Logout to be notified in your application about terminated user sessions."
        },
        "loginV2": {
          "$ref": "#/definitions/featurev2LoginV2",
          "description": "Specify the login UI for all users and applications regardless of their preference."
        }
      }
    },
    "featurev2SetInstanceFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "featurev2SetOrganizationFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "featurev2SetSystemFeaturesRequest": {
      "type": "object",
      "properties": {
        "loginDefaultOrg": {
          "type": "boolean",
          "example": true,
          "description": "The login UI will use the settings of the default org (and not from the instance) if no organization context is set"
        },
        "oidcTriggerIntrospectionProjections": {
          "type": "boolean",
          "example": true,
          "description": "Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature."
        },
        "oidcLegacyIntrospection": {
          "type": "boolean",
          "example": true,
          "description": "We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature."
        },
        "userSchema": {
          "type": "boolean",
          "example": true,
          "description": "User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "oidcTokenExchange": {
          "type": "boolean",
          "example": true,
          "description": "Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance."
        },
        "actions": {
          "type": "boolean",
          "example": true,
          "description": "Actions allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "improvedPerformance": {
          "type": "array",
          "example": [
            1
          ],
          "items": {
            "$ref": "#/definitions/featurev2ImprovedPerformance"
          },
          "description": "Improves performance of specified execution paths."
        },
        "oidcSingleV1SessionTermination": {
          "type": "boolean",
          "example": true,
          "description": "If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions."
        },
        "disableUserTokenEvent": {
          "type": "boolean",
          "example": true,
          "description": "Do not push user token meta-event user.token.v2.added to improve performance on many concurrent single (machine-)user logins"
        },
        "enableBackChannelLogout": {
          "type": "boolean",
          "example": true,
          "description": "If the flag is enabled, you'll be able to use the OIDC Back-Channel Logout to be notified in your application about terminated user sessions."
        },
        "loginV2": {
          "$ref": "#/definitions/featurev2LoginV2",
          "description": "Specify the login UI for all users and applications regardless of their preference."
        }
      }
    },
    "featurev2SetSystemFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "featurev2SetUserFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "featurev2Source": {
      "type": "string",
      "enum": [
        "SOURCE_UNSPECIFIED",
        "SOURCE_SYSTEM",
        "SOURCE_INSTANCE",
        "SOURCE_ORGANIZATION",
        "SOURCE_PROJECT",
        "SOURCE_APP",
        "SOURCE_USER"
      ],
      "default": "SOURCE_UNSPECIFIED",
      "title": "- SOURCE_PROJECT: reserved for future use\n - SOURCE_APP: reserved for future use"
    },
    "featurev2betaFeatureFlag": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": false,
          "description": "Whether a feature is enabled."
        },
        "source": {
          "$ref": "#/definitions/featurev2betaSource",
          "description": "The source where the setting of the feature was defined. The source may be the resource itself or a resource owner through inheritance."
        }
      },
      "description": "FeatureFlag is a simple boolean Feature setting, without further payload."
    },
    "featurev2betaFeatureServiceSetOrganizationFeaturesBody": {
      "type": "object"
    },
    "featurev2betaFeatureServiceSetUserFeaturesBody": {
      "type": "object"
    },
    "featurev2betaGetInstanceFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "loginDefaultOrg": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "The login UI will use the settings of the default org (and not from the instance) if no organization context is set"
        },
        "oidcTriggerIntrospectionProjections": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature."
        },
        "oidcLegacyIntrospection": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature."
        },
        "userSchema": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "oidcTokenExchange": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance."
        },
        "actions": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "Actions v2 allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "improvedPerformance": {
          "$ref": "#/definitions/featurev2betaImprovedPerformanceFeatureFlag",
          "example": [
            1
          ],
          "description": "Improves performance of specified execution paths."
        },
        "webKey": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "Enable the webkey/v3alpha API. The first time this feature is enabled, web keys are generated and activated."
        },
        "debugOidcParentError": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "Return parent errors to OIDC clients for debugging purposes. Parent errors may contain sensitive data or unwanted details about the system status of zitadel. Only enable if really needed."
        },
        "oidcSingleV1SessionTermination": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions."
        }
      }
    },
    "featurev2betaGetOrganizationFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "featurev2betaGetSystemFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "loginDefaultOrg": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "The login UI will use the settings of the default org (and not from the instance) if no organization context is set"
        },
        "oidcTriggerIntrospectionProjections": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature."
        },
        "oidcLegacyIntrospection": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature."
        },
        "userSchema": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "oidcTokenExchange": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance."
        },
        "actions": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "Actions v2 allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "improvedPerformance": {
          "$ref": "#/definitions/featurev2betaImprovedPerformanceFeatureFlag",
          "example": [
            1
          ],
          "description": "Improves performance of specified execution paths."
        },
        "oidcSingleV1SessionTermination": {
          "$ref": "#/definitions/featurev2betaFeatureFlag",
          "example": true,
          "description": "If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions."
        }
      }
    },
    "featurev2betaGetUserFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "featurev2betaImprovedPerformance": {
      "type": "string",
      "enum": [
        "IMPROVED_PERFORMANCE_UNSPECIFIED",
        "IMPROVED_PERFORMANCE_ORG_BY_ID",
        "IMPROVED_PERFORMANCE_PROJECT_GRANT",
        "IMPROVED_PERFORMANCE_PROJECT",
        "IMPROVED_PERFORMANCE_USER_GRANT",
        "IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED"
      ],
      "default": "IMPROVED_PERFORMANCE_UNSPECIFIED",
      "description": " - IMPROVED_PERFORMANCE_ORG_BY_ID: Uses the eventstore to query the org by id\ninstead of the sql table.\n - IMPROVED_PERFORMANCE_PROJECT_GRANT: Improves performance on write side by using\noptimized processes to query data to determine\ncorrectnes of data.\n - IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED: Improve performance on write side when\nusers are checked against verified domains\nfrom other organizations."
    },
    "featurev2betaImprovedPerformanceFeatureFlag": {
      "type": "object",
      "properties": {
        "executionPaths": {
          "type": "array",
          "example": [
            1
          ],
          "items": {
            "$ref": "#/definitions/featurev2betaImprovedPerformance"
          },
          "description": "Which of the performance improvements is enabled"
        },
        "source": {
          "$ref": "#/definitions/featurev2betaSource",
          "description": "The source where the setting of the feature was defined. The source may be the resource itself or a resource owner through inheritance."
        }
      }
    },
    "featurev2betaResetInstanceFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "featurev2betaResetOrganizationFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "featurev2betaResetSystemFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "featurev2betaResetUserFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "featurev2betaSetInstanceFeaturesRequest": {
      "type": "object",
      "properties": {
        "loginDefaultOrg": {
          "type": "boolean",
          "example": true,
          "description": "The login UI will use the settings of the default org (and not from the instance) if no organization context is set"
        },
        "oidcTriggerIntrospectionProjections": {
          "type": "boolean",
          "example": true,
          "description": "Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature."
        },
        "oidcLegacyIntrospection": {
          "type": "boolean",
          "example": true,
          "description": "We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature."
        },
        "userSchema": {
          "type": "boolean",
          "example": true,
          "description": "User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "oidcTokenExchange": {
          "type": "boolean",
          "example": true,
          "description": "Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance."
        },
        "actions": {
          "type": "boolean",
          "example": true,
          "description": "Actions allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "improvedPerformance": {
          "type": "array",
          "example": [
            1
          ],
          "items": {
            "$ref": "#/definitions/featurev2betaImprovedPerformance"
          },
          "description": "Improves performance of specified execution paths."
        },
        "webKey": {
          "type": "boolean",
          "example": true,
          "description": "Enable the webkey/v3alpha API. The first time this feature is enabled, web keys are generated and activated."
        },
        "debugOidcParentError": {
          "type": "boolean",
          "example": true,
          "description": "Return parent errors to OIDC clients for debugging purposes. Parent errors may contain sensitive data or unwanted details about the system status of zitadel. Only enable if really needed."
        },
        "oidcSingleV1SessionTermination": {
          "type": "boolean",
          "example": true,
          "description": "If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions."
        }
      }
    },
    "featurev2betaSetInstanceFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "featurev2betaSetOrganizationFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "featurev2betaSetSystemFeaturesRequest": {
      "type": "object",
      "properties": {
        "loginDefaultOrg": {
          "type": "boolean",
          "example": true,
          "description": "The login UI will use the settings of the default org (and not from the instance) if no organization context is set"
        },
        "oidcTriggerIntrospectionProjections": {
          "type": "boolean",
          "example": true,
          "description": "Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature."
        },
        "oidcLegacyIntrospection": {
          "type": "boolean",
          "example": true,
          "description": "We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature."
        },
        "userSchema": {
          "type": "boolean",
          "example": true,
          "description": "User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "oidcTokenExchange": {
          "type": "boolean",
          "example": true,
          "description": "Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance."
        },
        "actions": {
          "type": "boolean",
          "example": true,
          "description": "Actions allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage."
        },
        "improvedPerformance": {
          "type": "array",
          "example": [
            1
          ],
          "items": {
            "$ref": "#/definitions/featurev2betaImprovedPerformance"
          },
          "description": "Improves performance of specified execution paths."
        },
        "oidcSingleV1SessionTermination": {
          "type": "boolean",
          "example": true,
          "description": "If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions."
        }
      }
    },
    "featurev2betaSetSystemFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "featurev2betaSetUserFeaturesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "featurev2betaSource": {
      "type": "string",
      "enum": [
        "SOURCE_UNSPECIFIED",
        "SOURCE_SYSTEM",
        "SOURCE_INSTANCE",
        "SOURCE_ORGANIZATION",
        "SOURCE_PROJECT",
        "SOURCE_APP",
        "SOURCE_USER"
      ],
      "default": "SOURCE_UNSPECIFIED",
      "title": "- SOURCE_PROJECT: reserved for future use\n - SOURCE_APP: reserved for future use"
    },
    "idpv1AppleConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "com.client.id",
          "description": "Client id (App ID or Service ID) provided by Apple"
        },
        "teamId": {
          "type": "string",
          "example": "ALT03JV3OS",
          "description": "Team ID provided by Apple"
        },
        "keyId": {
          "type": "string",
          "example": "OGKDK25KD",
          "description": "ID of the private key generated by Apple"
        },
        "scopes": {
          "type": "array",
          "example": [
            "name",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request to Apple"
        }
      }
    },
    "idpv1AutoLinkingOption": {
      "type": "string",
      "enum": [
        "AUTO_LINKING_OPTION_UNSPECIFIED",
        "AUTO_LINKING_OPTION_USERNAME",
        "AUTO_LINKING_OPTION_EMAIL"
      ],
      "default": "AUTO_LINKING_OPTION_UNSPECIFIED",
      "description": " - AUTO_LINKING_OPTION_UNSPECIFIED: AUTO_LINKING_OPTION_UNSPECIFIED disables the auto linking prompt.\n - AUTO_LINKING_OPTION_USERNAME: AUTO_LINKING_OPTION_USERNAME will use the username of the external user to check for a corresponding ZITADEL user.\n - AUTO_LINKING_OPTION_EMAIL: AUTO_LINKING_OPTION_EMAIL  will use the email of the external user to check for a corresponding ZITADEL user with the same verified email\nNote that in case multiple users match, no prompt will be shown."
    },
    "idpv1AzureADConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "client id of the Azure AD application"
        },
        "tenant": {
          "$ref": "#/definitions/idpv1AzureADTenant",
          "description": "Defines what user accounts should be able to login (Personal, Organizational, All)"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Azure AD doesn't send if the email has been verified. Enable this if the user email should always be added verified in ZITADEL (no verification emails will be sent)"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email",
            "User.Read"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request to Azure AD"
        }
      }
    },
    "idpv1AzureADTenant": {
      "type": "object",
      "properties": {
        "tenantType": {
          "$ref": "#/definitions/idpv1AzureADTenantType"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "idpv1AzureADTenantType": {
      "type": "string",
      "enum": [
        "AZURE_AD_TENANT_TYPE_COMMON",
        "AZURE_AD_TENANT_TYPE_ORGANISATIONS",
        "AZURE_AD_TENANT_TYPE_CONSUMERS"
      ],
      "default": "AZURE_AD_TENANT_TYPE_COMMON"
    },
    "idpv1GenericOIDCConfig": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com/",
          "description": "the OIDC issuer of the identity provider"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "client id generated by the identity provider"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request on the identity provider"
        },
        "isIdTokenMapping": {
          "type": "boolean",
          "example": true,
          "description": "if true, provider information get mapped from the id token, not from the userinfo endpoint"
        }
      }
    },
    "idpv1GitHubConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "the client ID of the GitHub App"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request to GitHub"
        }
      }
    },
    "idpv1GitHubEnterpriseServerConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "the client ID of the GitHub App"
        },
        "authorizationEndpoint": {
          "type": "string"
        },
        "tokenEndpoint": {
          "type": "string"
        },
        "userEndpoint": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request to GitHub"
        }
      }
    },
    "idpv1GitLabConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "client id of the GitLab application"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request to GitLab"
        }
      }
    },
    "idpv1GitLabSelfHostedConfig": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "client id of the GitLab application"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request to GitLab"
        }
      }
    },
    "idpv1GoogleConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "client id of the Google application"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request to Google"
        }
      }
    },
    "idpv1IDP": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "state": {
          "$ref": "#/definitions/idpv1IDPState",
          "description": "the state of the identity provider"
        },
        "name": {
          "type": "string",
          "example": "google"
        },
        "stylingType": {
          "$ref": "#/definitions/v1IDPStylingType",
          "description": "some identity providers specify the styling of the button to their login"
        },
        "owner": {
          "$ref": "#/definitions/v1IDPOwnerType",
          "description": "the administrator of this identity provider"
        },
        "oidcConfig": {
          "$ref": "#/definitions/zitadelidpv1OIDCConfig"
        },
        "jwtConfig": {
          "$ref": "#/definitions/idpv1JWTConfig"
        },
        "autoRegister": {
          "type": "boolean"
        }
      }
    },
    "idpv1IDPState": {
      "type": "string",
      "enum": [
        "IDP_STATE_UNSPECIFIED",
        "IDP_STATE_ACTIVE",
        "IDP_STATE_INACTIVE"
      ],
      "default": "IDP_STATE_UNSPECIFIED"
    },
    "idpv1IDPType": {
      "type": "string",
      "enum": [
        "IDP_TYPE_UNSPECIFIED",
        "IDP_TYPE_OIDC",
        "IDP_TYPE_JWT"
      ],
      "default": "IDP_TYPE_UNSPECIFIED",
      "title": "authorization framework of the identity provider"
    },
    "idpv1JWTConfig": {
      "type": "object",
      "properties": {
        "jwtEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com",
          "description": "the endpoint where the JWT can be extracted"
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com",
          "description": "the issuer of the JWT (for validation)"
        },
        "keysEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com/keys",
          "description": "the endpoint to the key (JWK) which is used to sign the JWT with"
        },
        "headerName": {
          "type": "string",
          "example": "x-auth-token",
          "description": "the name of the header where the JWT is sent in, default is authorization"
        }
      }
    },
    "idpv1LDAPAttributes": {
      "type": "object",
      "properties": {
        "idAttribute": {
          "type": "string"
        },
        "firstNameAttribute": {
          "type": "string"
        },
        "lastNameAttribute": {
          "type": "string"
        },
        "displayNameAttribute": {
          "type": "string"
        },
        "nickNameAttribute": {
          "type": "string"
        },
        "preferredUsernameAttribute": {
          "type": "string"
        },
        "emailAttribute": {
          "type": "string"
        },
        "emailVerifiedAttribute": {
          "type": "string"
        },
        "phoneAttribute": {
          "type": "string"
        },
        "phoneVerifiedAttribute": {
          "type": "string"
        },
        "preferredLanguageAttribute": {
          "type": "string"
        },
        "avatarUrlAttribute": {
          "type": "string"
        },
        "profileAttribute": {
          "type": "string"
        }
      }
    },
    "idpv1LDAPConfig": {
      "type": "object",
      "properties": {
        "servers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startTls": {
          "type": "boolean"
        },
        "baseDn": {
          "type": "string"
        },
        "bindDn": {
          "type": "string"
        },
        "userBase": {
          "type": "string"
        },
        "userObjectClasses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeout": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/idpv1LDAPAttributes"
        }
      }
    },
    "idpv1OAuthConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "client id generated by the identity provider"
        },
        "authorizationEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com/o/oauth2/v2/auth",
          "description": "the endpoint where ZITADEL send the user to authenticate"
        },
        "tokenEndpoint": {
          "type": "string",
          "example": "https://oauth2.googleapis.com/token",
          "description": "the endpoint where ZITADEL can get the token"
        },
        "userEndpoint": {
          "type": "string",
          "example": "https://openidconnect.googleapis.com/v1/userinfo",
          "description": "the endpoint where ZITADEL can get the user information"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request on the identity provider"
        },
        "idAttribute": {
          "type": "string",
          "example": "user_id",
          "description": "defines how the attribute is called where ZITADEL can get the id of the user"
        }
      }
    },
    "idpv1Options": {
      "type": "object",
      "properties": {
        "isLinkingAllowed": {
          "type": "boolean",
          "description": "Enable if users should be able to manually link an existing ZITADEL user with an external account. Disable if users should only be allowed to link the proposed account in case of active auto_linking."
        },
        "isCreationAllowed": {
          "type": "boolean",
          "description": "Enable if users should be able to manually create a new account in ZITADEL when using an external account. Disable if users should not be able to edit account information when auto_creation is enabled."
        },
        "isAutoCreation": {
          "type": "boolean",
          "description": "Enable if a new account in ZITADEL should be created automatically when login with an external account."
        },
        "isAutoUpdate": {
          "type": "boolean",
          "description": "Enable if a the ZITADEL account fields should be updated automatically on each login."
        },
        "autoLinking": {
          "$ref": "#/definitions/idpv1AutoLinkingOption",
          "description": "Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches."
        }
      }
    },
    "idpv1SAMLBinding": {
      "type": "string",
      "enum": [
        "SAML_BINDING_UNSPECIFIED",
        "SAML_BINDING_POST",
        "SAML_BINDING_REDIRECT",
        "SAML_BINDING_ARTIFACT"
      ],
      "default": "SAML_BINDING_UNSPECIFIED"
    },
    "idpv1SAMLNameIDFormat": {
      "type": "string",
      "enum": [
        "SAML_NAME_ID_FORMAT_UNSPECIFIED",
        "SAML_NAME_ID_FORMAT_EMAIL_ADDRESS",
        "SAML_NAME_ID_FORMAT_PERSISTENT",
        "SAML_NAME_ID_FORMAT_TRANSIENT"
      ],
      "default": "SAML_NAME_ID_FORMAT_UNSPECIFIED"
    },
    "idpv2AppleConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "com.client.id",
          "description": "Client id (App ID or Service ID) provided by Apple."
        },
        "teamId": {
          "type": "string",
          "example": "ALT03JV3OS",
          "description": "Team ID provided by Apple."
        },
        "keyId": {
          "type": "string",
          "example": "OGKDK25KD",
          "description": "ID of the private key generated by Apple."
        },
        "scopes": {
          "type": "array",
          "example": [
            "name",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to Apple."
        }
      }
    },
    "idpv2AutoLinkingOption": {
      "type": "string",
      "enum": [
        "AUTO_LINKING_OPTION_UNSPECIFIED",
        "AUTO_LINKING_OPTION_USERNAME",
        "AUTO_LINKING_OPTION_EMAIL"
      ],
      "default": "AUTO_LINKING_OPTION_UNSPECIFIED",
      "description": " - AUTO_LINKING_OPTION_UNSPECIFIED: AUTO_LINKING_OPTION_UNSPECIFIED disables the auto linking prompt.\n - AUTO_LINKING_OPTION_USERNAME: AUTO_LINKING_OPTION_USERNAME will use the username of the external user to check for a corresponding ZITADEL user.\n - AUTO_LINKING_OPTION_EMAIL: AUTO_LINKING_OPTION_EMAIL  will use the email of the external user to check for a corresponding ZITADEL user with the same verified email\nNote that in case multiple users match, no prompt will be shown."
    },
    "idpv2AzureADConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "title": "Client id of the Azure AD application"
        },
        "tenant": {
          "$ref": "#/definitions/idpv2AzureADTenant",
          "description": "Defines what user accounts should be able to login (Personal, Organizational, All)."
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Azure AD doesn't send if the email has been verified. Enable this if the user email should always be added verified in ZITADEL (no verification emails will be sent)."
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email",
            "User.Read"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to Azure AD."
        }
      }
    },
    "idpv2AzureADTenant": {
      "type": "object",
      "properties": {
        "tenantType": {
          "$ref": "#/definitions/idpv2AzureADTenantType"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "idpv2AzureADTenantType": {
      "type": "string",
      "enum": [
        "AZURE_AD_TENANT_TYPE_COMMON",
        "AZURE_AD_TENANT_TYPE_ORGANISATIONS",
        "AZURE_AD_TENANT_TYPE_CONSUMERS"
      ],
      "default": "AZURE_AD_TENANT_TYPE_COMMON"
    },
    "idpv2GenericOIDCConfig": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com/",
          "description": "The OIDC issuer of the identity provider."
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by the identity provider."
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request on the identity provider."
        },
        "isIdTokenMapping": {
          "type": "boolean",
          "example": true,
          "description": "If true, provider information get mapped from the id token, not from the userinfo endpoint."
        }
      }
    },
    "idpv2GetIDPByIDResponse": {
      "type": "object",
      "properties": {
        "idp": {
          "$ref": "#/definitions/idpv2IDP"
        }
      }
    },
    "idpv2GitHubConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "The client ID of the GitHub App."
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitHub."
        }
      }
    },
    "idpv2GitHubEnterpriseServerConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "The client ID of the GitHub App."
        },
        "authorizationEndpoint": {
          "type": "string"
        },
        "tokenEndpoint": {
          "type": "string"
        },
        "userEndpoint": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitHub."
        }
      }
    },
    "idpv2GitLabConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id of the GitLab application."
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitLab."
        }
      }
    },
    "idpv2GitLabSelfHostedConfig": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id of the GitLab application."
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitLab."
        }
      }
    },
    "idpv2GoogleConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id of the Google application."
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to Google."
        }
      }
    },
    "idpv2IDP": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334",
          "description": "Unique identifier for the identity provider."
        },
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "state": {
          "$ref": "#/definitions/idpv2IDPState",
          "description": "Current state of the identity provider."
        },
        "name": {
          "type": "string",
          "example": "Google"
        },
        "type": {
          "$ref": "#/definitions/idpv2IDPType",
          "description": "Type of the identity provider, for example OIDC, JWT, LDAP and SAML."
        },
        "config": {
          "$ref": "#/definitions/v2IDPConfig",
          "description": "Configuration for the type of the identity provider."
        }
      }
    },
    "idpv2IDPState": {
      "type": "string",
      "enum": [
        "IDP_STATE_UNSPECIFIED",
        "IDP_STATE_ACTIVE",
        "IDP_STATE_INACTIVE",
        "IDP_STATE_REMOVED",
        "IDP_STATE_MIGRATED"
      ],
      "default": "IDP_STATE_UNSPECIFIED"
    },
    "idpv2IDPType": {
      "type": "string",
      "enum": [
        "IDP_TYPE_UNSPECIFIED",
        "IDP_TYPE_OIDC",
        "IDP_TYPE_JWT",
        "IDP_TYPE_LDAP",
        "IDP_TYPE_OAUTH",
        "IDP_TYPE_AZURE_AD",
        "IDP_TYPE_GITHUB",
        "IDP_TYPE_GITHUB_ES",
        "IDP_TYPE_GITLAB",
        "IDP_TYPE_GITLAB_SELF_HOSTED",
        "IDP_TYPE_GOOGLE",
        "IDP_TYPE_APPLE",
        "IDP_TYPE_SAML"
      ],
      "default": "IDP_TYPE_UNSPECIFIED"
    },
    "idpv2JWTConfig": {
      "type": "object",
      "properties": {
        "jwtEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com",
          "description": "The endpoint where the JWT can be extracted."
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com",
          "description": "The issuer of the JWT (for validation)."
        },
        "keysEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com/keys",
          "description": "The endpoint to the key (JWK) which is used to sign the JWT with."
        },
        "headerName": {
          "type": "string",
          "example": "x-auth-token",
          "description": "The name of the header where the JWT is sent in, default is authorization."
        }
      }
    },
    "idpv2LDAPAttributes": {
      "type": "object",
      "properties": {
        "idAttribute": {
          "type": "string"
        },
        "firstNameAttribute": {
          "type": "string"
        },
        "lastNameAttribute": {
          "type": "string"
        },
        "displayNameAttribute": {
          "type": "string"
        },
        "nickNameAttribute": {
          "type": "string"
        },
        "preferredUsernameAttribute": {
          "type": "string"
        },
        "emailAttribute": {
          "type": "string"
        },
        "emailVerifiedAttribute": {
          "type": "string"
        },
        "phoneAttribute": {
          "type": "string"
        },
        "phoneVerifiedAttribute": {
          "type": "string"
        },
        "preferredLanguageAttribute": {
          "type": "string"
        },
        "avatarUrlAttribute": {
          "type": "string"
        },
        "profileAttribute": {
          "type": "string"
        }
      }
    },
    "idpv2LDAPConfig": {
      "type": "object",
      "properties": {
        "servers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startTls": {
          "type": "boolean"
        },
        "baseDn": {
          "type": "string"
        },
        "bindDn": {
          "type": "string"
        },
        "userBase": {
          "type": "string"
        },
        "userObjectClasses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeout": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/idpv2LDAPAttributes"
        }
      }
    },
    "idpv2OAuthConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by the identity provider."
        },
        "authorizationEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com/o/oauth2/v2/auth",
          "description": "The endpoint where ZITADEL send the user to authenticate."
        },
        "tokenEndpoint": {
          "type": "string",
          "example": "https://oauth2.googleapis.com/token",
          "description": "The endpoint where ZITADEL can get the token."
        },
        "userEndpoint": {
          "type": "string",
          "example": "https://openidconnect.googleapis.com/v1/userinfo",
          "description": "The endpoint where ZITADEL can get the user information."
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request on the identity provider."
        },
        "idAttribute": {
          "type": "string",
          "example": "user_id",
          "description": "Defines how the attribute is called where ZITADEL can get the id of the user."
        }
      }
    },
    "idpv2SAMLBinding": {
      "type": "string",
      "enum": [
        "SAML_BINDING_UNSPECIFIED",
        "SAML_BINDING_POST",
        "SAML_BINDING_REDIRECT",
        "SAML_BINDING_ARTIFACT"
      ],
      "default": "SAML_BINDING_UNSPECIFIED"
    },
    "idpv2SAMLConfig": {
      "type": "object",
      "properties": {
        "metadataXml": {
          "type": "string",
          "format": "byte",
          "description": "Metadata of the SAML identity provider."
        },
        "binding": {
          "$ref": "#/definitions/idpv2SAMLBinding",
          "description": "Binding which defines the type of communication with the identity provider."
        },
        "withSignedRequest": {
          "type": "boolean",
          "description": "Boolean which defines if the authentication requests are signed."
        },
        "nameIdFormat": {
          "$ref": "#/definitions/idpv2SAMLNameIDFormat",
          "description": "`nameid-format` for the SAML Request."
        },
        "transientMappingAttributeName": {
          "type": "string",
          "description": "Optional name of the attribute, which will be used to map the user\nin case the nameid-format returned is `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`."
        }
      }
    },
    "idpv2SAMLNameIDFormat": {
      "type": "string",
      "enum": [
        "SAML_NAME_ID_FORMAT_UNSPECIFIED",
        "SAML_NAME_ID_FORMAT_EMAIL_ADDRESS",
        "SAML_NAME_ID_FORMAT_PERSISTENT",
        "SAML_NAME_ID_FORMAT_TRANSIENT"
      ],
      "default": "SAML_NAME_ID_FORMAT_UNSPECIFIED"
    },
    "instancev1DomainQuery": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "description": "zitadel.com"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "instancev1FieldName": {
      "type": "string",
      "enum": [
        "FIELD_NAME_UNSPECIFIED",
        "FIELD_NAME_ID",
        "FIELD_NAME_NAME",
        "FIELD_NAME_CREATION_DATE"
      ],
      "default": "FIELD_NAME_UNSPECIFIED"
    },
    "instancev1Instance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "state": {
          "$ref": "#/definitions/instancev1State",
          "description": "current state of the instance"
        },
        "name": {
          "type": "string",
          "example": "ZITADEL"
        },
        "version": {
          "type": "string",
          "example": "1.0.0"
        },
        "domains": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelinstancev1Domain"
          }
        }
      }
    },
    "instancev1State": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_CREATING",
        "STATE_RUNNING",
        "STATE_STOPPING",
        "STATE_STOPPED"
      ],
      "default": "STATE_UNSPECIFIED"
    },
    "managementv1AddHumanUserRequest": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "profile": {
          "$ref": "#/definitions/v1AddHumanUserRequestProfile"
        },
        "email": {
          "$ref": "#/definitions/v1AddHumanUserRequestEmail"
        },
        "phone": {
          "$ref": "#/definitions/v1AddHumanUserRequestPhone"
        },
        "initialPassword": {
          "type": "string"
        }
      }
    },
    "managementv1AddHumanUserResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "managementv1DeactivateUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "managementv1GetUserByIDResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/userv1User"
        }
      }
    },
    "managementv1ListUsersRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "sortingColumn": {
          "$ref": "#/definitions/userv1UserFieldName",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeluserv1SearchQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "managementv1ListUsersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "sortingColumn": {
          "$ref": "#/definitions/userv1UserFieldName"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv1User"
          }
        }
      }
    },
    "managementv1LockUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "managementv1ReactivateUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "managementv1UnlockUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "memberv1UserIDQuery": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "the id of the user",
          "maxLength": 200
        }
      }
    },
    "metadatav1Metadata": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "key": {
          "type": "string",
          "example": "key1",
          "description": "metadata key"
        },
        "value": {
          "type": "string",
          "format": "byte",
          "example": "VGhpcyBpcyBteSBmaXJzdCB2YWx1ZQ==",
          "description": "metadata value is base64 encoded, make sure to decode to get the value"
        }
      }
    },
    "objectv2Details": {
      "type": "object",
      "properties": {
        "sequence": {
          "type": "string",
          "format": "uint64",
          "example": "2",
          "description": "on read: the sequence of the last event reduced by the projection\n\non manipulation: the timestamp of the event(s) added by the manipulation",
          "title": "sequence represents the order of events. It's always counting"
        },
        "changeDate": {
          "type": "string",
          "format": "date-time",
          "description": "on read: the timestamp of the last event reduced by the projection\n\non manipulation: the timestamp of the event(s) added by the manipulation",
          "title": "change_date is the timestamp when the object was changed"
        },
        "resourceOwner": {
          "type": "string",
          "example": "69629023906488334",
          "title": "resource_owner is the organization or instance_id an object belongs to"
        }
      }
    },
    "objectv2ListDetails": {
      "type": "object",
      "properties": {
        "totalResult": {
          "type": "string",
          "format": "uint64",
          "example": "2"
        },
        "processedSequence": {
          "type": "string",
          "format": "uint64",
          "example": "267831"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "the last time the projection got updated"
        }
      }
    },
    "objectv2ListQuery": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "string",
          "format": "uint64",
          "example": "0"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "example": 100,
          "description": "Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken."
        },
        "asc": {
          "type": "boolean",
          "description": "default is descending"
        }
      },
      "description": "Object unspecific list filters like offset, limit and asc/desc.",
      "title": "General List Query"
    },
    "objectv2RequestContext": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "instance": {
          "type": "boolean"
        }
      }
    },
    "objectv2TextQueryMethod": {
      "type": "string",
      "enum": [
        "TEXT_QUERY_METHOD_EQUALS",
        "TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE",
        "TEXT_QUERY_METHOD_STARTS_WITH",
        "TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE",
        "TEXT_QUERY_METHOD_CONTAINS",
        "TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE",
        "TEXT_QUERY_METHOD_ENDS_WITH",
        "TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE"
      ],
      "default": "TEXT_QUERY_METHOD_EQUALS"
    },
    "objectv2betaDetails": {
      "type": "object",
      "properties": {
        "sequence": {
          "type": "string",
          "format": "uint64",
          "example": "2",
          "description": "on read: the sequence of the last event reduced by the projection\n\non manipulation: the timestamp of the event(s) added by the manipulation",
          "title": "sequence represents the order of events. It's always counting"
        },
        "changeDate": {
          "type": "string",
          "format": "date-time",
          "description": "on read: the timestamp of the last event reduced by the projection\n\non manipulation: the timestamp of the event(s) added by the manipulation",
          "title": "change_date is the timestamp when the object was changed"
        },
        "resourceOwner": {
          "type": "string",
          "example": "69629023906488334",
          "title": "resource_owner is the organization or instance_id an object belongs to"
        }
      }
    },
    "objectv2betaListDetails": {
      "type": "object",
      "properties": {
        "totalResult": {
          "type": "string",
          "format": "uint64",
          "example": "2"
        },
        "processedSequence": {
          "type": "string",
          "format": "uint64",
          "example": "267831"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "the last time the projection got updated"
        }
      }
    },
    "objectv2betaListQuery": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "string",
          "format": "uint64",
          "example": "0"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "example": 100,
          "description": "Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken."
        },
        "asc": {
          "type": "boolean",
          "description": "default is descending"
        }
      },
      "description": "Object unspecific list filters like offset, limit and asc/desc.",
      "title": "General List Query"
    },
    "objectv2betaOrganization": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "orgDomain": {
          "type": "string"
        }
      }
    },
    "objectv2betaRequestContext": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "instance": {
          "type": "boolean"
        }
      }
    },
    "objectv2betaTextQueryMethod": {
      "type": "string",
      "enum": [
        "TEXT_QUERY_METHOD_EQUALS",
        "TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE",
        "TEXT_QUERY_METHOD_STARTS_WITH",
        "TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE",
        "TEXT_QUERY_METHOD_CONTAINS",
        "TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE",
        "TEXT_QUERY_METHOD_ENDS_WITH",
        "TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE"
      ],
      "default": "TEXT_QUERY_METHOD_EQUALS"
    },
    "objectv3alphaInstance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        }
      }
    },
    "objectv3alphaListDetails": {
      "type": "object",
      "properties": {
        "appliedLimit": {
          "type": "string",
          "format": "uint64",
          "example": 100
        },
        "totalResult": {
          "type": "string",
          "format": "uint64",
          "example": "2"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "the last time the projection got updated"
        }
      }
    },
    "objectv3alphaOrganization": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "orgDomain": {
          "type": "string"
        }
      }
    },
    "objectv3alphaSearchQuery": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "string",
          "format": "uint64",
          "example": "0"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "example": 100,
          "description": "Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error."
        },
        "desc": {
          "type": "boolean",
          "description": "default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results."
        }
      },
      "description": "Object unspecific list filters like offset, limit and asc/desc.",
      "title": "General List Query"
    },
    "oidcv2AuthRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the authorization request"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the auth request was created"
        },
        "clientId": {
          "type": "string",
          "description": "OIDC client ID of the application that created the auth request"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Requested scopes by the application, which the user must consent to."
        },
        "redirectUri": {
          "type": "string",
          "description": "Base URI that points back to the application"
        },
        "prompt": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/oidcv2Prompt"
          },
          "description": "Prompts that must be displayed to the user"
        },
        "uiLocales": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "End-User's preferred languages and scripts for the user interface, represented as a list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value [fr-CA, fr, en] represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported."
        },
        "loginHint": {
          "type": "string",
          "description": "Login hint can be set by the application with a user identifier such as an email or phone number."
        },
        "maxAge": {
          "type": "string",
          "description": "Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated. If the elapsed time is greater than this value, or the field is present with 0 duration, the user must be re-authenticated."
        },
        "hintUserId": {
          "type": "string",
          "description": "User ID taken from a ID Token Hint if it was present and valid."
        }
      },
      "externalDocs": {
        "description": "Find out more about OIDC Auth Request parameters",
        "url": "https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest"
      }
    },
    "oidcv2CreateCallbackResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "callbackUrl": {
          "type": "string",
          "example": "https://client.example.org/cb?code=SplxlOBeZQQYbYS6WxSbIA\u0026state=af0ifjsldkj",
          "description": "Callback URL where the user should be redirected, using a \"302 FOUND\" status. Contains details for the application to obtain the tokens on success, or error details on failure. Note that this field must be treated as credentials, as the contained code can be used to obtain tokens on behalve of the user."
        }
      }
    },
    "oidcv2GetAuthRequestResponse": {
      "type": "object",
      "properties": {
        "authRequest": {
          "$ref": "#/definitions/oidcv2AuthRequest"
        }
      }
    },
    "oidcv2OIDCServiceCreateCallbackBody": {
      "type": "object",
      "properties": {
        "session": {
          "$ref": "#/definitions/zitadeloidcv2Session"
        },
        "error": {
          "$ref": "#/definitions/zitadeloidcv2AuthorizationError",
          "description": "Set this field when the authorization flow failed. It creates a callback URL to the application, with the error details set."
        }
      }
    },
    "oidcv2Prompt": {
      "type": "string",
      "enum": [
        "PROMPT_UNSPECIFIED",
        "PROMPT_NONE",
        "PROMPT_LOGIN",
        "PROMPT_CONSENT",
        "PROMPT_SELECT_ACCOUNT",
        "PROMPT_CREATE"
      ],
      "default": "PROMPT_UNSPECIFIED"
    },
    "oidcv2betaAuthRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the authorization request"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the auth request was created"
        },
        "clientId": {
          "type": "string",
          "description": "OIDC client ID of the application that created the auth request"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Requested scopes by the application, which the user must consent to."
        },
        "redirectUri": {
          "type": "string",
          "description": "Base URI that points back to the application"
        },
        "prompt": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/oidcv2betaPrompt"
          },
          "description": "Prompts that must be displayed to the user"
        },
        "uiLocales": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "End-User's preferred languages and scripts for the user interface, represented as a list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value [fr-CA, fr, en] represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported."
        },
        "loginHint": {
          "type": "string",
          "description": "Login hint can be set by the application with a user identifier such as an email or phone number."
        },
        "maxAge": {
          "type": "string",
          "description": "Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated. If the elapsed time is greater than this value, or the field is present with 0 duration, the user must be re-authenticated."
        },
        "hintUserId": {
          "type": "string",
          "description": "User ID taken from a ID Token Hint if it was present and valid."
        }
      },
      "externalDocs": {
        "description": "Find out more about OIDC Auth Request parameters",
        "url": "https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest"
      }
    },
    "oidcv2betaAuthorizationError": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/oidcv2betaErrorReason"
        },
        "errorDescription": {
          "type": "string"
        },
        "errorUri": {
          "type": "string"
        }
      }
    },
    "oidcv2betaCreateCallbackResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "callbackUrl": {
          "type": "string",
          "example": "https://client.example.org/cb?code=SplxlOBeZQQYbYS6WxSbIA\u0026state=af0ifjsldkj",
          "description": "Callback URL where the user should be redirected, using a \"302 FOUND\" status. Contains details for the application to obtain the tokens on success, or error details on failure. Note that this field must be treated as credentials, as the contained code can be used to obtain tokens on behalve of the user."
        }
      }
    },
    "oidcv2betaErrorReason": {
      "type": "string",
      "enum": [
        "ERROR_REASON_UNSPECIFIED",
        "ERROR_REASON_INVALID_REQUEST",
        "ERROR_REASON_UNAUTHORIZED_CLIENT",
        "ERROR_REASON_ACCESS_DENIED",
        "ERROR_REASON_UNSUPPORTED_RESPONSE_TYPE",
        "ERROR_REASON_INVALID_SCOPE",
        "ERROR_REASON_SERVER_ERROR",
        "ERROR_REASON_TEMPORARY_UNAVAILABLE",
        "ERROR_REASON_INTERACTION_REQUIRED",
        "ERROR_REASON_LOGIN_REQUIRED",
        "ERROR_REASON_ACCOUNT_SELECTION_REQUIRED",
        "ERROR_REASON_CONSENT_REQUIRED",
        "ERROR_REASON_INVALID_REQUEST_URI",
        "ERROR_REASON_INVALID_REQUEST_OBJECT",
        "ERROR_REASON_REQUEST_NOT_SUPPORTED",
        "ERROR_REASON_REQUEST_URI_NOT_SUPPORTED",
        "ERROR_REASON_REGISTRATION_NOT_SUPPORTED"
      ],
      "default": "ERROR_REASON_UNSPECIFIED",
      "title": "- ERROR_REASON_INVALID_REQUEST: Error states from https://datatracker.ietf.org/doc/html/rfc6749#section-4.2.2.1\n - ERROR_REASON_INTERACTION_REQUIRED: Error states from https://openid.net/specs/openid-connect-core-1_0.html#AuthError"
    },
    "oidcv2betaGetAuthRequestResponse": {
      "type": "object",
      "properties": {
        "authRequest": {
          "$ref": "#/definitions/oidcv2betaAuthRequest"
        }
      }
    },
    "oidcv2betaOIDCServiceCreateCallbackBody": {
      "type": "object",
      "properties": {
        "session": {
          "$ref": "#/definitions/zitadeloidcv2betaSession"
        },
        "error": {
          "$ref": "#/definitions/oidcv2betaAuthorizationError",
          "description": "Set this field when the authorization flow failed. It creates a callback URL to the application, with the error details set."
        }
      }
    },
    "oidcv2betaPrompt": {
      "type": "string",
      "enum": [
        "PROMPT_UNSPECIFIED",
        "PROMPT_NONE",
        "PROMPT_LOGIN",
        "PROMPT_CONSENT",
        "PROMPT_SELECT_ACCOUNT",
        "PROMPT_CREATE"
      ],
      "default": "PROMPT_UNSPECIFIED"
    },
    "orgv1Org": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "state": {
          "$ref": "#/definitions/v1OrgState",
          "description": "current state of the organization"
        },
        "name": {
          "type": "string",
          "example": "ZITADEL"
        },
        "primaryDomain": {
          "type": "string",
          "example": "zitadel.cloud"
        }
      }
    },
    "orgv2AddOrganizationRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ZITADEL",
          "maxLength": 200,
          "minLength": 1
        },
        "admins": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/orgv2AddOrganizationRequestAdmin"
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "orgv2AddOrganizationRequestAdmin": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "human": {
          "$ref": "#/definitions/userv2AddHumanUserRequest"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "specify Org Member Roles for the provided user (default is ORG_OWNER if roles are empty)"
        }
      }
    },
    "orgv2AddOrganizationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "organizationId": {
          "type": "string"
        },
        "createdAdmins": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/orgv2AddOrganizationResponseCreatedAdmin"
          }
        }
      }
    },
    "orgv2AddOrganizationResponseCreatedAdmin": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "emailCode": {
          "type": "string"
        },
        "phoneCode": {
          "type": "string"
        }
      }
    },
    "orgv2betaAddOrganizationRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ZITADEL",
          "maxLength": 200,
          "minLength": 1
        },
        "admins": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/orgv2betaAddOrganizationRequestAdmin"
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "orgv2betaAddOrganizationRequestAdmin": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "human": {
          "$ref": "#/definitions/userv2betaAddHumanUserRequest"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "specify Org Member Roles for the provided user (default is ORG_OWNER if roles are empty)"
        }
      }
    },
    "orgv2betaAddOrganizationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "organizationId": {
          "type": "string"
        },
        "createdAdmins": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/orgv2betaAddOrganizationResponseCreatedAdmin"
          }
        }
      }
    },
    "orgv2betaAddOrganizationResponseCreatedAdmin": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "emailCode": {
          "type": "string"
        },
        "phoneCode": {
          "type": "string"
        }
      }
    },
    "policyv1MultiFactorType": {
      "type": "string",
      "enum": [
        "MULTI_FACTOR_TYPE_UNSPECIFIED",
        "MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION"
      ],
      "default": "MULTI_FACTOR_TYPE_UNSPECIFIED"
    },
    "policyv1SecondFactorType": {
      "type": "string",
      "enum": [
        "SECOND_FACTOR_TYPE_UNSPECIFIED",
        "SECOND_FACTOR_TYPE_OTP",
        "SECOND_FACTOR_TYPE_U2F",
        "SECOND_FACTOR_TYPE_OTP_EMAIL",
        "SECOND_FACTOR_TYPE_OTP_SMS"
      ],
      "default": "SECOND_FACTOR_TYPE_UNSPECIFIED",
      "title": "- SECOND_FACTOR_TYPE_OTP: SECOND_FACTOR_TYPE_OTP is the type for TOTP"
    },
    "policyv1ThemeMode": {
      "type": "string",
      "enum": [
        "THEME_MODE_UNSPECIFIED",
        "THEME_MODE_AUTO",
        "THEME_MODE_DARK",
        "THEME_MODE_LIGHT"
      ],
      "default": "THEME_MODE_UNSPECIFIED"
    },
    "projectv1Role": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "role.super.man"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "displayName": {
          "type": "string",
          "example": "Super man"
        },
        "group": {
          "type": "string",
          "example": "people"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "resourcesdebug_eventsv3alphaState": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails",
          "description": "Details provide some base information (such as the last change date) of the schema."
        },
        "blob": {
          "type": "string"
        }
      }
    },
    "resourcesuserschemav3alphaAndFilter": {
      "type": "object",
      "properties": {
        "queries": {
          "type": "array",
          "example": [
            {
              "typeFilter": {
                "id": "employees",
                "method": "TEXT_FILTER_METHOD_STARTS_WITH"
              }
            },
            {
              "stateFilter": {
                "state": "STATE_ACTIVE"
              }
            }
          ],
          "items": {
            "type": "object",
            "$ref": "#/definitions/resourcesuserschemav3alphaSearchFilter"
          }
        }
      }
    },
    "resourcesuserschemav3alphaFieldName": {
      "type": "string",
      "enum": [
        "FIELD_NAME_UNSPECIFIED",
        "FIELD_NAME_TYPE",
        "FIELD_NAME_STATE",
        "FIELD_NAME_REVISION",
        "FIELD_NAME_CHANGE_DATE",
        "FIELD_NAME_CREATION_DATE"
      ],
      "default": "FIELD_NAME_UNSPECIFIED"
    },
    "resourcesuserschemav3alphaNotFilter": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/resourcesuserschemav3alphaSearchFilter",
          "example": {
            "stateFilter": {
              "state": "STATE_ACTIVE"
            }
          }
        }
      }
    },
    "resourcesuserschemav3alphaOrFilter": {
      "type": "object",
      "properties": {
        "queries": {
          "type": "array",
          "example": [
            {
              "idFilter": {
                "id": "163840776835432705",
                "method": "TEXT_FILTER_METHOD_EQUALS"
              }
            },
            {
              "idFilter": {
                "id": "163840776835943483",
                "method": "TEXT_FILTER_METHOD_EQUALS"
              }
            }
          ],
          "items": {
            "type": "object",
            "$ref": "#/definitions/resourcesuserschemav3alphaSearchFilter"
          }
        }
      }
    },
    "resourcesuserschemav3alphaSearchFilter": {
      "type": "object",
      "properties": {
        "orFilter": {
          "$ref": "#/definitions/resourcesuserschemav3alphaOrFilter",
          "description": "Union the results of each sub filter ('OR')."
        },
        "andFilter": {
          "$ref": "#/definitions/resourcesuserschemav3alphaAndFilter",
          "description": "Limit the result to match all sub queries ('AND').\nNote that if you specify multiple queries, they will be implicitly used as andQueries.\nUse the andFilter in combination with orFilter and notFilter."
        },
        "notFilter": {
          "$ref": "#/definitions/resourcesuserschemav3alphaNotFilter",
          "description": "Exclude / Negate the result of the sub filter ('NOT')."
        },
        "typeFilter": {
          "$ref": "#/definitions/v3alphaTypeFilter",
          "description": "Limit the result to a specific schema type."
        },
        "stateFilter": {
          "$ref": "#/definitions/resourcesuserschemav3alphaStateFilter",
          "description": "Limit the result to a specific state of the schema."
        },
        "idFilter": {
          "$ref": "#/definitions/v3alphaIDFilter",
          "description": "Limit the result to a specific schema ID."
        }
      }
    },
    "resourcesuserschemav3alphaState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_ACTIVE",
        "STATE_INACTIVE"
      ],
      "default": "STATE_UNSPECIFIED"
    },
    "resourcesuserschemav3alphaStateFilter": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/resourcesuserschemav3alphaState",
          "example": "STATE_ACTIVE",
          "description": "Defines the state to filter for."
        }
      },
      "required": [
        "state"
      ]
    },
    "resourcesuserv3alphaAndFilter": {
      "type": "object",
      "properties": {
        "queries": {
          "type": "array",
          "example": [
            {
              "organizationIdFilter": {
                "id": "163840776835432705",
                "method": "TEXT_FILTER_METHOD_EQUALS"
              }
            },
            {
              "usernameFilter": {
                "username": "gigi",
                "method": "TEXT_FILTER_METHOD_EQUALS"
              }
            }
          ],
          "items": {
            "type": "object",
            "$ref": "#/definitions/resourcesuserv3alphaSearchFilter"
          }
        }
      }
    },
    "resourcesuserv3alphaFieldName": {
      "type": "string",
      "enum": [
        "FIELD_NAME_UNSPECIFIED",
        "FIELD_NAME_ID",
        "FIELD_NAME_CREATION_DATE",
        "FIELD_NAME_CHANGE_DATE",
        "FIELD_NAME_EMAIL",
        "FIELD_NAME_PHONE",
        "FIELD_NAME_STATE",
        "FIELD_NAME_SCHEMA_ID",
        "FIELD_NAME_SCHEMA_TYPE"
      ],
      "default": "FIELD_NAME_UNSPECIFIED"
    },
    "resourcesuserv3alphaNotFilter": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/resourcesuserv3alphaSearchFilter",
          "example": {
            "schemaIDFilter": {
              "id": "163840776835432705"
            }
          }
        }
      }
    },
    "resourcesuserv3alphaOrFilter": {
      "type": "object",
      "properties": {
        "queries": {
          "type": "array",
          "example": [
            {
              "userIdFilter": {
                "id": "163840776835432705",
                "method": "TEXT_FILTER_METHOD_EQUALS"
              }
            },
            {
              "userIdFilter": {
                "id": "163840776835943483",
                "method": "TEXT_FILTER_METHOD_EQUALS"
              }
            }
          ],
          "items": {
            "type": "object",
            "$ref": "#/definitions/resourcesuserv3alphaSearchFilter"
          }
        }
      }
    },
    "resourcesuserv3alphaSearchFilter": {
      "type": "object",
      "properties": {
        "orFilter": {
          "$ref": "#/definitions/resourcesuserv3alphaOrFilter",
          "description": "Union the results of each sub filter ('OR')."
        },
        "andFilter": {
          "$ref": "#/definitions/resourcesuserv3alphaAndFilter",
          "description": "Limit the result to match all sub queries ('AND').\nNote that if you specify multiple queries, they will be implicitly used as andQueries.\nUse the andFilter in combination with orFilter and notFilter."
        },
        "notFilter": {
          "$ref": "#/definitions/resourcesuserv3alphaNotFilter",
          "description": "Exclude / Negate the result of the sub query ('NOT')."
        },
        "userIdFilter": {
          "$ref": "#/definitions/v3alphaUserIDFilter",
          "description": "Limit the result to a specific user ID."
        },
        "organizationIdFilter": {
          "$ref": "#/definitions/v3alphaOrganizationIDFilter",
          "description": "Limit the result to a specific organization."
        },
        "usernameFilter": {
          "$ref": "#/definitions/v3alphaUsernameFilter",
          "description": "Limit the result to a specific username."
        },
        "emailFilter": {
          "$ref": "#/definitions/v3alphaEmailFilter",
          "description": "Limit the result to a specific contact email."
        },
        "phoneFilter": {
          "$ref": "#/definitions/v3alphaPhoneFilter",
          "description": "Limit the result to a specific contact phone."
        },
        "stateFilter": {
          "$ref": "#/definitions/resourcesuserv3alphaStateFilter",
          "description": "Limit the result to a specific state of the user."
        },
        "schemaIdFilter": {
          "$ref": "#/definitions/v3alphaSchemaIDFilter",
          "description": "Limit the result to a specific schema ID."
        },
        "schemaTypeFilter": {
          "$ref": "#/definitions/v3alphaSchemaTypeFilter",
          "description": "Limit the result to a specific schema type."
        }
      }
    },
    "resourcesuserv3alphaState": {
      "type": "string",
      "enum": [
        "USER_STATE_UNSPECIFIED",
        "USER_STATE_ACTIVE",
        "USER_STATE_INACTIVE",
        "USER_STATE_DELETED",
        "USER_STATE_LOCKED"
      ],
      "default": "USER_STATE_UNSPECIFIED"
    },
    "resourcesuserv3alphaStateFilter": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/resourcesuserv3alphaState",
          "example": "STATE_ACTIVE",
          "description": "Defines the state to query for."
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "sessionv2Challenges": {
      "type": "object",
      "properties": {
        "webAuthN": {
          "$ref": "#/definitions/sessionv2ChallengesWebAuthN"
        },
        "otpSms": {
          "type": "string"
        },
        "otpEmail": {
          "type": "string"
        }
      }
    },
    "sessionv2ChallengesWebAuthN": {
      "type": "object",
      "properties": {
        "publicKeyCredentialRequestOptions": {
          "type": "object",
          "example": {
            "publicKey": {
              "allowCredentials": [
                {
                  "id": "ATmqBg-99qyOZk2zloPdJQyS2R7IkFT7v9Hoos_B_nM",
                  "type": "public-key"
                }
              ],
              "challenge": "GAOHYz2jE69kJMYo6Laij8yWw9-dKKgbViNhfuy0StA",
              "rpId": "localhost",
              "timeout": 300000,
              "userVerification": "required"
            }
          },
          "description": "Options for Assertion Generaration (dictionary PublicKeyCredentialRequestOptions). Generated helper methods transform the field to JSON, for use in a WebauthN client. See also: https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialrequestoptions"
        }
      }
    },
    "sessionv2CheckIDPIntent": {
      "type": "object",
      "properties": {
        "idpIntentId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "ID of the idp intent, previously returned on the success response of the IDP callback",
          "maxLength": 200,
          "minLength": 1
        },
        "idpIntentToken": {
          "type": "string",
          "example": "SJKL3ioIDpo342ioqw98fjp3sdf32wahb=",
          "description": "token of the idp intent, previously returned on the success response of the IDP callback",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "sessionv2CheckOTP": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "3237642",
          "minLength": 1
        }
      }
    },
    "sessionv2CheckPassword": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "example": "V3ryS3cure!",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "sessionv2CheckTOTP": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "323764",
          "maxLength": 6,
          "minLength": 6
        }
      }
    },
    "sessionv2CheckUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "maxLength": 200,
          "minLength": 1
        },
        "loginName": {
          "type": "string",
          "example": "mini@mouse.com",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "sessionv2CheckWebAuthN": {
      "type": "object",
      "properties": {
        "credentialAssertionData": {
          "type": "object",
          "description": "JSON representation of public key credential issued by the webAuthN client",
          "maxLength": 1048576,
          "minLength": 55
        }
      },
      "required": [
        "credentialAssertionData"
      ]
    },
    "sessionv2Checks": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/sessionv2CheckUser",
          "description": "\"checks the user and updates the session on success\""
        },
        "password": {
          "$ref": "#/definitions/sessionv2CheckPassword",
          "description": "\"Checks the password and updates the session on success. Requires that the user is already checked, either in the previous or the same request.\""
        },
        "webAuthN": {
          "$ref": "#/definitions/sessionv2CheckWebAuthN",
          "description": "\"Checks the public key credential issued by the WebAuthN client. Requires that the user is already checked and a WebAuthN challenge to be requested, in any previous request.\""
        },
        "idpIntent": {
          "$ref": "#/definitions/sessionv2CheckIDPIntent",
          "description": "\"Checks the IDP intent. Requires that the userlink is already checked and a successful idp intent.\""
        },
        "totp": {
          "$ref": "#/definitions/sessionv2CheckTOTP",
          "description": "\"Checks the Time-based One-Time Password and updates the session on success. Requires that the user is already checked, either in the previous or the same request.\""
        },
        "otpSms": {
          "$ref": "#/definitions/sessionv2CheckOTP",
          "description": "\"Checks the One-Time Password sent over SMS and updates the session on success. Requires that the user is already checked, either in the previous or the same request.\""
        },
        "otpEmail": {
          "$ref": "#/definitions/sessionv2CheckOTP",
          "description": "\"Checks the One-Time Password sent over Email and updates the session on success. Requires that the user is already checked, either in the previous or the same request.\""
        }
      }
    },
    "sessionv2CreateSessionRequest": {
      "type": "object",
      "properties": {
        "checks": {
          "$ref": "#/definitions/sessionv2Checks",
          "description": "\"Check for user and password. Successful checks will be stated as factors on the session.\""
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "\"custom key value list to be stored on the session\""
        },
        "challenges": {
          "$ref": "#/definitions/sessionv2RequestChallenges"
        },
        "userAgent": {
          "$ref": "#/definitions/sessionv2UserAgent"
        },
        "lifetime": {
          "type": "string",
          "example": "18000s",
          "description": "\"duration (in seconds) after which the session will be automatically invalidated\""
        }
      }
    },
    "sessionv2CreateSessionResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "sessionId": {
          "type": "string",
          "example": "222430354126975533",
          "description": "\"id of the session\""
        },
        "sessionToken": {
          "type": "string",
          "description": "\"The current token of the session, which is required for delete session, get session or the request of other resources.\""
        },
        "challenges": {
          "$ref": "#/definitions/sessionv2Challenges"
        }
      }
    },
    "sessionv2CreationDateQuery": {
      "type": "object",
      "properties": {
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TimestampQueryMethod",
          "description": "defines which timestamp comparison method is used"
        }
      }
    },
    "sessionv2DeleteSessionResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "sessionv2Factors": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/sessionv2UserFactor"
        },
        "password": {
          "$ref": "#/definitions/sessionv2PasswordFactor"
        },
        "webAuthN": {
          "$ref": "#/definitions/sessionv2WebAuthNFactor"
        },
        "intent": {
          "$ref": "#/definitions/sessionv2IntentFactor"
        },
        "totp": {
          "$ref": "#/definitions/sessionv2TOTPFactor"
        },
        "otpSms": {
          "$ref": "#/definitions/sessionv2OTPFactor"
        },
        "otpEmail": {
          "$ref": "#/definitions/sessionv2OTPFactor"
        }
      }
    },
    "sessionv2GetSessionResponse": {
      "type": "object",
      "properties": {
        "session": {
          "$ref": "#/definitions/zitadelsessionv2Session"
        }
      }
    },
    "sessionv2IDsQuery": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "sessionv2IntentFactor": {
      "type": "object",
      "properties": {
        "verifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when an intent was last checked\""
        }
      }
    },
    "sessionv2ListSessionsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/objectv2ListQuery"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelsessionv2SearchQuery"
          }
        },
        "sortingColumn": {
          "$ref": "#/definitions/sessionv2SessionFieldName"
        }
      }
    },
    "sessionv2ListSessionsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2ListDetails"
        },
        "sessions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelsessionv2Session"
          }
        }
      }
    },
    "sessionv2OTPFactor": {
      "type": "object",
      "properties": {
        "verifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the One-Time Password was last checked\""
        }
      }
    },
    "sessionv2PasswordFactor": {
      "type": "object",
      "properties": {
        "verifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the password was last checked\""
        }
      }
    },
    "sessionv2RequestChallenges": {
      "type": "object",
      "properties": {
        "webAuthN": {
          "$ref": "#/definitions/sessionv2RequestChallengesWebAuthN"
        },
        "otpSms": {
          "$ref": "#/definitions/sessionv2RequestChallengesOTPSMS"
        },
        "otpEmail": {
          "$ref": "#/definitions/sessionv2RequestChallengesOTPEmail"
        }
      }
    },
    "sessionv2RequestChallengesOTPEmail": {
      "type": "object",
      "properties": {
        "sendCode": {
          "$ref": "#/definitions/sessionv2RequestChallengesOTPEmailSendCode"
        },
        "returnCode": {
          "$ref": "#/definitions/sessionv2RequestChallengesOTPEmailReturnCode"
        }
      }
    },
    "sessionv2RequestChallengesOTPEmailReturnCode": {
      "type": "object"
    },
    "sessionv2RequestChallengesOTPEmailSendCode": {
      "type": "object",
      "properties": {
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/otp/verify?userID={{.UserID}}\u0026code={{.Code}}",
          "description": "Optionally set a url_template, which will be used in the mail sent by ZITADEL to guide the user to your verification page.\nIf no template is set, the default ZITADEL url will be used.\n\nThe following placeholders can be used: Code, UserID, LoginName, DisplayName, PreferredLanguage, SessionID",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "sessionv2RequestChallengesOTPSMS": {
      "type": "object",
      "properties": {
        "returnCode": {
          "type": "boolean"
        }
      }
    },
    "sessionv2RequestChallengesWebAuthN": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "description": "\"Domain on which the session was created. Will be used in the WebAuthN challenge.\""
        },
        "userVerificationRequirement": {
          "$ref": "#/definitions/sessionv2UserVerificationRequirement",
          "description": "\"User verification that is required during validation. When set to `USER_VERIFICATION_REQUIREMENT_REQUIRED` the behaviour is for passkey authentication. Other values will mean U2F\""
        }
      },
      "required": [
        "domain",
        "userVerificationRequirement"
      ]
    },
    "sessionv2SessionFieldName": {
      "type": "string",
      "enum": [
        "SESSION_FIELD_NAME_UNSPECIFIED",
        "SESSION_FIELD_NAME_CREATION_DATE"
      ],
      "default": "SESSION_FIELD_NAME_UNSPECIFIED"
    },
    "sessionv2SessionServiceDeleteSessionBody": {
      "type": "object",
      "properties": {
        "sessionToken": {
          "type": "string",
          "description": "\"The current token of the session, previously returned on the create / update request. The token is required unless the authenticated user terminates the own session or is granted the `session.delete` permission.\""
        }
      }
    },
    "sessionv2SessionServiceSetSessionBody": {
      "type": "object",
      "properties": {
        "sessionToken": {
          "type": "string",
          "description": "\"DEPRECATED: this field is ignored.\"",
          "maxLength": 200,
          "minLength": 1
        },
        "checks": {
          "$ref": "#/definitions/sessionv2Checks",
          "description": "\"Check for user and password. Successful checks will be stated as factors on the session.\""
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "\"custom key value list to be stored on the session\""
        },
        "challenges": {
          "$ref": "#/definitions/sessionv2RequestChallenges"
        },
        "lifetime": {
          "type": "string",
          "example": "18000s",
          "description": "\"duration (in seconds) after which the session will be automatically invalidated\""
        }
      }
    },
    "sessionv2SetSessionResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "sessionToken": {
          "type": "string",
          "description": "\"The current token of the session, which is required for delete session, get session or the request of other resources.\""
        },
        "challenges": {
          "$ref": "#/definitions/sessionv2Challenges"
        }
      }
    },
    "sessionv2TOTPFactor": {
      "type": "object",
      "properties": {
        "verifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the Time-based One-Time Password was last checked\""
        }
      }
    },
    "sessionv2UserAgent": {
      "type": "object",
      "properties": {
        "fingerprintId": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "header": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/sessionv2UserAgentHeaderValues"
          }
        }
      }
    },
    "sessionv2UserAgentHeaderValues": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "A header may have multiple values.\nIn Go, headers are defined\nas map[string][]string, but protobuf\ndoesn't allow this scheme."
    },
    "sessionv2UserFactor": {
      "type": "object",
      "properties": {
        "verifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the user was last checked\""
        },
        "id": {
          "type": "string",
          "description": "\"id of the checked user\""
        },
        "loginName": {
          "type": "string",
          "description": "\"login name of the checked user\""
        },
        "displayName": {
          "type": "string",
          "description": "\"display name of the checked user\""
        },
        "organizationId": {
          "type": "string",
          "description": "\"organization id of the checked user\""
        }
      }
    },
    "sessionv2UserIDQuery": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "sessionv2UserVerificationRequirement": {
      "type": "string",
      "enum": [
        "USER_VERIFICATION_REQUIREMENT_UNSPECIFIED",
        "USER_VERIFICATION_REQUIREMENT_REQUIRED",
        "USER_VERIFICATION_REQUIREMENT_PREFERRED",
        "USER_VERIFICATION_REQUIREMENT_DISCOURAGED"
      ],
      "default": "USER_VERIFICATION_REQUIREMENT_UNSPECIFIED"
    },
    "sessionv2WebAuthNFactor": {
      "type": "object",
      "properties": {
        "verifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the passkey challenge was last checked\""
        },
        "userVerified": {
          "type": "boolean"
        }
      }
    },
    "sessionv2betaChallenges": {
      "type": "object",
      "properties": {
        "webAuthN": {
          "$ref": "#/definitions/sessionv2betaChallengesWebAuthN"
        },
        "otpSms": {
          "type": "string"
        },
        "otpEmail": {
          "type": "string"
        }
      }
    },
    "sessionv2betaChallengesWebAuthN": {
      "type": "object",
      "properties": {
        "publicKeyCredentialRequestOptions": {
          "type": "object",
          "example": {
            "publicKey": {
              "allowCredentials": [
                {
                  "id": "ATmqBg-99qyOZk2zloPdJQyS2R7IkFT7v9Hoos_B_nM",
                  "type": "public-key"
                }
              ],
              "challenge": "GAOHYz2jE69kJMYo6Laij8yWw9-dKKgbViNhfuy0StA",
              "rpId": "localhost",
              "timeout": 300000,
              "userVerification": "required"
            }
          },
          "description": "Options for Assertion Generaration (dictionary PublicKeyCredentialRequestOptions). Generated helper methods transform the field to JSON, for use in a WebauthN client. See also: https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialrequestoptions"
        }
      }
    },
    "sessionv2betaCheckIDPIntent": {
      "type": "object",
      "properties": {
        "idpIntentId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "ID of the idp intent, previously returned on the success response of the IDP callback",
          "maxLength": 200,
          "minLength": 1
        },
        "idpIntentToken": {
          "type": "string",
          "example": "SJKL3ioIDpo342ioqw98fjp3sdf32wahb=",
          "description": "token of the idp intent, previously returned on the success response of the IDP callback",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "sessionv2betaCheckOTP": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "3237642",
          "minLength": 1
        }
      }
    },
    "sessionv2betaCheckPassword": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "example": "V3ryS3cure!",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "sessionv2betaCheckTOTP": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "323764",
          "maxLength": 6,
          "minLength": 6
        }
      }
    },
    "sessionv2betaCheckUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "maxLength": 200,
          "minLength": 1
        },
        "loginName": {
          "type": "string",
          "example": "mini@mouse.com",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "sessionv2betaCheckWebAuthN": {
      "type": "object",
      "properties": {
        "credentialAssertionData": {
          "type": "object",
          "description": "JSON representation of public key credential issued by the webAuthN client",
          "maxLength": 1048576,
          "minLength": 55
        }
      },
      "required": [
        "credentialAssertionData"
      ]
    },
    "sessionv2betaChecks": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/sessionv2betaCheckUser",
          "description": "\"checks the user and updates the session on success\""
        },
        "password": {
          "$ref": "#/definitions/sessionv2betaCheckPassword",
          "description": "\"Checks the password and updates the session on success. Requires that the user is already checked, either in the previous or the same request.\""
        },
        "webAuthN": {
          "$ref": "#/definitions/sessionv2betaCheckWebAuthN",
          "description": "\"Checks the public key credential issued by the WebAuthN client. Requires that the user is already checked and a WebAuthN challenge to be requested, in any previous request.\""
        },
        "idpIntent": {
          "$ref": "#/definitions/sessionv2betaCheckIDPIntent",
          "description": "\"Checks the IDP intent. Requires that the userlink is already checked and a successful idp intent.\""
        },
        "totp": {
          "$ref": "#/definitions/sessionv2betaCheckTOTP",
          "description": "\"Checks the Time-based One-Time Password and updates the session on success. Requires that the user is already checked, either in the previous or the same request.\""
        },
        "otpSms": {
          "$ref": "#/definitions/sessionv2betaCheckOTP",
          "description": "\"Checks the One-Time Password sent over SMS and updates the session on success. Requires that the user is already checked, either in the previous or the same request.\""
        },
        "otpEmail": {
          "$ref": "#/definitions/sessionv2betaCheckOTP",
          "description": "\"Checks the One-Time Password sent over Email and updates the session on success. Requires that the user is already checked, either in the previous or the same request.\""
        }
      }
    },
    "sessionv2betaCreateSessionRequest": {
      "type": "object",
      "properties": {
        "checks": {
          "$ref": "#/definitions/sessionv2betaChecks",
          "description": "\"Check for user and password. Successful checks will be stated as factors on the session.\""
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "\"custom key value list to be stored on the session\""
        },
        "challenges": {
          "$ref": "#/definitions/sessionv2betaRequestChallenges"
        },
        "userAgent": {
          "$ref": "#/definitions/sessionv2betaUserAgent"
        },
        "lifetime": {
          "type": "string",
          "example": "18000s",
          "description": "\"duration (in seconds) after which the session will be automatically invalidated\""
        }
      }
    },
    "sessionv2betaCreateSessionResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "sessionId": {
          "type": "string",
          "example": "222430354126975533",
          "description": "\"id of the session\""
        },
        "sessionToken": {
          "type": "string",
          "description": "\"The current token of the session, which is required for delete session, get session or the request of other resources.\""
        },
        "challenges": {
          "$ref": "#/definitions/sessionv2betaChallenges"
        }
      }
    },
    "sessionv2betaCreationDateQuery": {
      "type": "object",
      "properties": {
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TimestampQueryMethod",
          "description": "defines which timestamp comparison method is used"
        }
      }
    },
    "sessionv2betaDeleteSessionResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "sessionv2betaFactors": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/sessionv2betaUserFactor"
        },
        "password": {
          "$ref": "#/definitions/sessionv2betaPasswordFactor"
        },
        "webAuthN": {
          "$ref": "#/definitions/sessionv2betaWebAuthNFactor"
        },
        "intent": {
          "$ref": "#/definitions/sessionv2betaIntentFactor"
        },
        "totp": {
          "$ref": "#/definitions/sessionv2betaTOTPFactor"
        },
        "otpSms": {
          "$ref": "#/definitions/sessionv2betaOTPFactor"
        },
        "otpEmail": {
          "$ref": "#/definitions/sessionv2betaOTPFactor"
        }
      }
    },
    "sessionv2betaGetSessionResponse": {
      "type": "object",
      "properties": {
        "session": {
          "$ref": "#/definitions/zitadelsessionv2betaSession"
        }
      }
    },
    "sessionv2betaIDsQuery": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "sessionv2betaIntentFactor": {
      "type": "object",
      "properties": {
        "verifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when an intent was last checked\""
        }
      }
    },
    "sessionv2betaListSessionsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/objectv2betaListQuery"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelsessionv2betaSearchQuery"
          }
        },
        "sortingColumn": {
          "$ref": "#/definitions/sessionv2betaSessionFieldName"
        }
      }
    },
    "sessionv2betaListSessionsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaListDetails"
        },
        "sessions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelsessionv2betaSession"
          }
        }
      }
    },
    "sessionv2betaOTPFactor": {
      "type": "object",
      "properties": {
        "verifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the One-Time Password was last checked\""
        }
      }
    },
    "sessionv2betaPasswordFactor": {
      "type": "object",
      "properties": {
        "verifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the password was last checked\""
        }
      }
    },
    "sessionv2betaRequestChallenges": {
      "type": "object",
      "properties": {
        "webAuthN": {
          "$ref": "#/definitions/sessionv2betaRequestChallengesWebAuthN"
        },
        "otpSms": {
          "$ref": "#/definitions/sessionv2betaRequestChallengesOTPSMS"
        },
        "otpEmail": {
          "$ref": "#/definitions/sessionv2betaRequestChallengesOTPEmail"
        }
      }
    },
    "sessionv2betaRequestChallengesOTPEmail": {
      "type": "object",
      "properties": {
        "sendCode": {
          "$ref": "#/definitions/sessionv2betaRequestChallengesOTPEmailSendCode"
        },
        "returnCode": {
          "$ref": "#/definitions/sessionv2betaRequestChallengesOTPEmailReturnCode"
        }
      }
    },
    "sessionv2betaRequestChallengesOTPEmailReturnCode": {
      "type": "object"
    },
    "sessionv2betaRequestChallengesOTPEmailSendCode": {
      "type": "object",
      "properties": {
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/otp/verify?userID={{.UserID}}\u0026code={{.Code}}",
          "description": "\"Optionally set a url_template, which will be used in the mail sent by ZITADEL to guide the user to your verification page. If no template is set, the default ZITADEL url will be used.\"",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "sessionv2betaRequestChallengesOTPSMS": {
      "type": "object",
      "properties": {
        "returnCode": {
          "type": "boolean"
        }
      }
    },
    "sessionv2betaRequestChallengesWebAuthN": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "description": "\"Domain on which the session was created. Will be used in the WebAuthN challenge.\""
        },
        "userVerificationRequirement": {
          "$ref": "#/definitions/sessionv2betaUserVerificationRequirement",
          "description": "\"User verification that is required during validation. When set to `USER_VERIFICATION_REQUIREMENT_REQUIRED` the behaviour is for passkey authentication. Other values will mean U2F\""
        }
      },
      "required": [
        "domain",
        "userVerificationRequirement"
      ]
    },
    "sessionv2betaSessionFieldName": {
      "type": "string",
      "enum": [
        "SESSION_FIELD_NAME_UNSPECIFIED",
        "SESSION_FIELD_NAME_CREATION_DATE"
      ],
      "default": "SESSION_FIELD_NAME_UNSPECIFIED"
    },
    "sessionv2betaSessionServiceDeleteSessionBody": {
      "type": "object",
      "properties": {
        "sessionToken": {
          "type": "string",
          "description": "\"The current token of the session, previously returned on the create / update request. The token is required unless the authenticated user terminates the own session or is granted the `session.delete` permission.\""
        }
      }
    },
    "sessionv2betaSessionServiceSetSessionBody": {
      "type": "object",
      "properties": {
        "sessionToken": {
          "type": "string",
          "description": "\"DEPRECATED: this field is ignored.\"",
          "maxLength": 200,
          "minLength": 1
        },
        "checks": {
          "$ref": "#/definitions/sessionv2betaChecks",
          "description": "\"Check for user and password. Successful checks will be stated as factors on the session.\""
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "\"custom key value list to be stored on the session\""
        },
        "challenges": {
          "$ref": "#/definitions/sessionv2betaRequestChallenges"
        },
        "lifetime": {
          "type": "string",
          "example": "18000s",
          "description": "\"duration (in seconds) after which the session will be automatically invalidated\""
        }
      }
    },
    "sessionv2betaSetSessionResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "sessionToken": {
          "type": "string",
          "description": "\"The current token of the session, which is required for delete session, get session or the request of other resources.\""
        },
        "challenges": {
          "$ref": "#/definitions/sessionv2betaChallenges"
        }
      }
    },
    "sessionv2betaTOTPFactor": {
      "type": "object",
      "properties": {
        "verifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the Time-based One-Time Password was last checked\""
        }
      }
    },
    "sessionv2betaUserAgent": {
      "type": "object",
      "properties": {
        "fingerprintId": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "header": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/sessionv2betaUserAgentHeaderValues"
          }
        }
      }
    },
    "sessionv2betaUserAgentHeaderValues": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "A header may have multiple values.\nIn Go, headers are defined\nas map[string][]string, but protobuf\ndoesn't allow this scheme."
    },
    "sessionv2betaUserFactor": {
      "type": "object",
      "properties": {
        "verifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the user was last checked\""
        },
        "id": {
          "type": "string",
          "description": "\"id of the checked user\""
        },
        "loginName": {
          "type": "string",
          "description": "\"login name of the checked user\""
        },
        "displayName": {
          "type": "string",
          "description": "\"display name of the checked user\""
        },
        "organizationId": {
          "type": "string",
          "description": "\"organization id of the checked user\""
        }
      }
    },
    "sessionv2betaUserIDQuery": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "sessionv2betaUserVerificationRequirement": {
      "type": "string",
      "enum": [
        "USER_VERIFICATION_REQUIREMENT_UNSPECIFIED",
        "USER_VERIFICATION_REQUIREMENT_REQUIRED",
        "USER_VERIFICATION_REQUIREMENT_PREFERRED",
        "USER_VERIFICATION_REQUIREMENT_DISCOURAGED"
      ],
      "default": "USER_VERIFICATION_REQUIREMENT_UNSPECIFIED"
    },
    "sessionv2betaWebAuthNFactor": {
      "type": "object",
      "properties": {
        "verifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the passkey challenge was last checked\""
        },
        "userVerified": {
          "type": "boolean"
        }
      }
    },
    "settingsv2BrandingSettings": {
      "type": "object",
      "properties": {
        "lightTheme": {
          "$ref": "#/definitions/settingsv2Theme"
        },
        "darkTheme": {
          "$ref": "#/definitions/settingsv2Theme"
        },
        "fontUrl": {
          "type": "string",
          "example": "https://acme.com/assets/v1/165617850692654601/policy/label/font-180950243237405441",
          "description": "url to the font used"
        },
        "hideLoginNameSuffix": {
          "type": "boolean",
          "description": "hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set",
          "title": "hides the org suffix on the login form if the scope \\\"urn:zitadel:iam:org:domain:primary:{domainname}\\\" is set"
        },
        "disableWatermark": {
          "type": "boolean",
          "description": "boolean to disable the watermark"
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2ResourceOwnerType",
          "description": "resource_owner_type returns if the setting is managed on the organization or on the instance",
          "title": "resource_owner_type returns if the setting is managed on the organization or on the instance"
        },
        "themeMode": {
          "$ref": "#/definitions/settingsv2ThemeMode",
          "description": "states whether both or only dark or light theme will be used"
        }
      }
    },
    "settingsv2DomainSettings": {
      "type": "object",
      "properties": {
        "loginNameIncludesDomain": {
          "type": "boolean",
          "description": "the username has to end with the domain of its organization"
        },
        "requireOrgDomainVerification": {
          "type": "boolean",
          "description": "defines if organization domains should be verified upon creation, otherwise will be created already verified"
        },
        "smtpSenderAddressMatchesInstanceDomain": {
          "type": "boolean",
          "description": "defines if the SMTP sender address domain should match an existing domain on the instance"
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2ResourceOwnerType",
          "description": "resource_owner_type returns if the setting is managed on the organization or on the instance",
          "title": "resource_owner_type returns if the setting is managed on the organization or on the instance"
        }
      }
    },
    "settingsv2EmbeddedIframeSettings": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "states if iframe embedding is enabled or disabled"
        },
        "allowedOrigins": {
          "type": "array",
          "example": [
            "foo.bar.com",
            "localhost:8080"
          ],
          "items": {
            "type": "string"
          },
          "description": "origins allowed loading ZITADEL in an iframe if enabled."
        }
      }
    },
    "settingsv2GetActiveIdentityProvidersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2ListDetails"
        },
        "identityProviders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/settingsv2IdentityProvider"
          }
        }
      }
    },
    "settingsv2GetBrandingSettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2BrandingSettings"
        }
      }
    },
    "settingsv2GetDomainSettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2DomainSettings"
        }
      }
    },
    "settingsv2GetGeneralSettingsResponse": {
      "type": "object",
      "properties": {
        "defaultOrgId": {
          "type": "string",
          "description": "default organization for the current context"
        },
        "defaultLanguage": {
          "type": "string",
          "example": "en",
          "description": "default language for the current context"
        },
        "supportedLanguages": {
          "type": "array",
          "example": [
            "en",
            "de",
            "it"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "settingsv2GetLegalAndSupportSettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2LegalAndSupportSettings"
        }
      }
    },
    "settingsv2GetLockoutSettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2LockoutSettings"
        }
      }
    },
    "settingsv2GetLoginSettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2LoginSettings"
        }
      }
    },
    "settingsv2GetPasswordComplexitySettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2PasswordComplexitySettings"
        }
      }
    },
    "settingsv2GetPasswordExpirySettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2PasswordExpirySettings"
        }
      }
    },
    "settingsv2GetSecuritySettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2SecuritySettings"
        }
      }
    },
    "settingsv2IdentityProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/settingsv2IdentityProviderType"
        },
        "options": {
          "$ref": "#/definitions/zitadelidpv2Options"
        }
      }
    },
    "settingsv2IdentityProviderType": {
      "type": "string",
      "enum": [
        "IDENTITY_PROVIDER_TYPE_UNSPECIFIED",
        "IDENTITY_PROVIDER_TYPE_OIDC",
        "IDENTITY_PROVIDER_TYPE_JWT",
        "IDENTITY_PROVIDER_TYPE_LDAP",
        "IDENTITY_PROVIDER_TYPE_OAUTH",
        "IDENTITY_PROVIDER_TYPE_AZURE_AD",
        "IDENTITY_PROVIDER_TYPE_GITHUB",
        "IDENTITY_PROVIDER_TYPE_GITHUB_ES",
        "IDENTITY_PROVIDER_TYPE_GITLAB",
        "IDENTITY_PROVIDER_TYPE_GITLAB_SELF_HOSTED",
        "IDENTITY_PROVIDER_TYPE_GOOGLE",
        "IDENTITY_PROVIDER_TYPE_SAML",
        "IDENTITY_PROVIDER_TYPE_APPLE"
      ],
      "default": "IDENTITY_PROVIDER_TYPE_UNSPECIFIED"
    },
    "settingsv2LegalAndSupportSettings": {
      "type": "object",
      "properties": {
        "tosLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/legal/terms-of-service"
        },
        "privacyPolicyLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/legal/privacy-policy"
        },
        "helpLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/manuals/introduction"
        },
        "supportEmail": {
          "type": "string",
          "example": "support-email@test.com",
          "description": "help / support email address."
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2ResourceOwnerType",
          "description": "resource_owner_type returns if the setting is managed on the organization or on the instance",
          "title": "resource_owner_type returns if the setting is managed on the organization or on the instance"
        },
        "docsLink": {
          "type": "string",
          "example": "https://zitadel.com/docs",
          "description": "Link to documentation to be shown in the console."
        },
        "customLink": {
          "type": "string",
          "example": "https://external.link",
          "description": "Link to an external resource that will be available to users in the console."
        },
        "customLinkText": {
          "type": "string",
          "example": "External",
          "description": "The button text that would be shown in console pointing to custom link."
        }
      }
    },
    "settingsv2LockoutSettings": {
      "type": "object",
      "properties": {
        "maxPasswordAttempts": {
          "type": "string",
          "format": "uint64",
          "example": "10",
          "description": "Maximum password check attempts before the account gets locked. Attempts are reset as soon as the password is entered correctly or the password is reset. If set to 0 the account will never be locked."
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2ResourceOwnerType",
          "description": "resource_owner_type returns if the settings is managed on the organization or on the instance",
          "title": "resource_owner_type returns if the settings is managed on the organization or on the instance"
        },
        "maxOtpAttempts": {
          "type": "string",
          "format": "uint64",
          "example": "10",
          "description": "Maximum failed attempts for a single OTP type (TOTP, SMS, Email) before the account gets locked. Attempts are reset as soon as the OTP is entered correctly. If set to 0 the account will never be locked."
        }
      }
    },
    "settingsv2LoginSettings": {
      "type": "object",
      "properties": {
        "allowUsernamePassword": {
          "type": "boolean",
          "description": "defines if a user is allowed to log in with username and password"
        },
        "allowRegister": {
          "type": "boolean",
          "description": "defines if a person is allowed to register a user on this organization"
        },
        "allowExternalIdp": {
          "type": "boolean",
          "description": "defines if a user is allowed to add a defined identity provider. E.g. Google auth"
        },
        "forceMfa": {
          "type": "boolean",
          "description": "defines if a user MUST use a multi-factor to log in"
        },
        "passkeysType": {
          "$ref": "#/definitions/settingsv2PasskeysType",
          "description": "defines if passkeys are allowed for users"
        },
        "hidePasswordReset": {
          "type": "boolean",
          "description": "defines if password reset link should be shown in the login screen"
        },
        "ignoreUnknownUsernames": {
          "type": "boolean",
          "description": "defines if unknown username on login screen directly returns an error or always displays the password screen"
        },
        "defaultRedirectUri": {
          "type": "string",
          "example": "https://acme.com/ui/console",
          "description": "defines where the user will be redirected to if the login is started without app context (e.g. from mail)"
        },
        "passwordCheckLifetime": {
          "type": "string",
          "example": "864000s",
          "description": "Defines after how much time the user has to re-authenticate with the password."
        },
        "externalLoginCheckLifetime": {
          "type": "string",
          "example": "864000s",
          "description": "Defines after how much time the user has to re-authenticate with an external provider."
        },
        "mfaInitSkipLifetime": {
          "type": "string",
          "example": "2592000s",
          "description": "Defines after how much time the mfa prompt will be shown again."
        },
        "secondFactorCheckLifetime": {
          "type": "string",
          "example": "64800s",
          "description": "Defines after how long the second factor check is valid."
        },
        "multiFactorCheckLifetime": {
          "type": "string",
          "example": "43200s",
          "description": "Defines how long the multi-factor check is valid."
        },
        "secondFactors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/settingsv2SecondFactorType"
          }
        },
        "multiFactors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/settingsv2MultiFactorType"
          }
        },
        "allowDomainDiscovery": {
          "type": "boolean",
          "description": "If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success."
        },
        "disableLoginWithEmail": {
          "type": "boolean",
          "description": "defines if the user can additionally (to the login name) be identified by their verified email address"
        },
        "disableLoginWithPhone": {
          "type": "boolean",
          "description": "defines if the user can additionally (to the login name) be identified by their verified phone number"
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2ResourceOwnerType",
          "description": "resource_owner_type returns if the settings is managed on the organization or on the instance",
          "title": "resource_owner_type returns if the settings is managed on the organization or on the instance"
        },
        "forceMfaLocalOnly": {
          "type": "boolean",
          "description": "if activated, only local authenticated users are forced to use MFA. Authentication through IDPs won't prompt a MFA step in the login."
        }
      }
    },
    "settingsv2MultiFactorType": {
      "type": "string",
      "enum": [
        "MULTI_FACTOR_TYPE_UNSPECIFIED",
        "MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION"
      ],
      "default": "MULTI_FACTOR_TYPE_UNSPECIFIED"
    },
    "settingsv2PasskeysType": {
      "type": "string",
      "enum": [
        "PASSKEYS_TYPE_NOT_ALLOWED",
        "PASSKEYS_TYPE_ALLOWED"
      ],
      "default": "PASSKEYS_TYPE_NOT_ALLOWED"
    },
    "settingsv2PasswordComplexitySettings": {
      "type": "object",
      "properties": {
        "minLength": {
          "type": "string",
          "format": "uint64",
          "example": "8",
          "description": "Defines the minimum length of a password."
        },
        "requiresUppercase": {
          "type": "boolean",
          "description": "defines if the password MUST contain an upper case letter"
        },
        "requiresLowercase": {
          "type": "boolean",
          "description": "defines if the password MUST contain a lowercase letter"
        },
        "requiresNumber": {
          "type": "boolean",
          "description": "defines if the password MUST contain a number"
        },
        "requiresSymbol": {
          "type": "boolean",
          "description": "defines if the password MUST contain a symbol. E.g. \"$\""
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2ResourceOwnerType",
          "description": "resource_owner_type returns if the settings is managed on the organization or on the instance",
          "title": "resource_owner_type returns if the settings is managed on the organization or on the instance"
        }
      }
    },
    "settingsv2PasswordExpirySettings": {
      "type": "object",
      "properties": {
        "maxAgeDays": {
          "type": "string",
          "format": "uint64",
          "example": "365",
          "description": "Amount of days after which a password will expire. The user will be forced to change the password on the following authentication."
        },
        "expireWarnDays": {
          "type": "string",
          "format": "uint64",
          "example": "10",
          "description": "Amount of days after which the user should be notified of the upcoming expiry. ZITADEL will not notify the user."
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2ResourceOwnerType",
          "title": "resource_owner_type returns if the settings is managed on the organization or on the instance"
        }
      }
    },
    "settingsv2ResourceOwnerType": {
      "type": "string",
      "enum": [
        "RESOURCE_OWNER_TYPE_UNSPECIFIED",
        "RESOURCE_OWNER_TYPE_INSTANCE",
        "RESOURCE_OWNER_TYPE_ORG"
      ],
      "default": "RESOURCE_OWNER_TYPE_UNSPECIFIED"
    },
    "settingsv2SecondFactorType": {
      "type": "string",
      "enum": [
        "SECOND_FACTOR_TYPE_UNSPECIFIED",
        "SECOND_FACTOR_TYPE_OTP",
        "SECOND_FACTOR_TYPE_U2F",
        "SECOND_FACTOR_TYPE_OTP_EMAIL",
        "SECOND_FACTOR_TYPE_OTP_SMS"
      ],
      "default": "SECOND_FACTOR_TYPE_UNSPECIFIED",
      "title": "- SECOND_FACTOR_TYPE_OTP: This is the type for TOTP"
    },
    "settingsv2SecuritySettings": {
      "type": "object",
      "properties": {
        "embeddedIframe": {
          "$ref": "#/definitions/settingsv2EmbeddedIframeSettings"
        },
        "enableImpersonation": {
          "type": "boolean",
          "example": "en",
          "description": "default language for the current context"
        }
      }
    },
    "settingsv2SetSecuritySettingsRequest": {
      "type": "object",
      "properties": {
        "embeddedIframe": {
          "$ref": "#/definitions/settingsv2EmbeddedIframeSettings"
        },
        "enableImpersonation": {
          "type": "boolean",
          "description": "allows users to impersonate other users. The impersonator needs the appropriate `*_IMPERSONATOR` roles assigned as well"
        }
      }
    },
    "settingsv2SetSecuritySettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "settingsv2Theme": {
      "type": "object",
      "properties": {
        "primaryColor": {
          "type": "string",
          "example": "#5469d4",
          "description": "hex value for primary color",
          "title": "hex value for primary color"
        },
        "backgroundColor": {
          "type": "string",
          "example": "#FAFAFA",
          "description": "hex value for background color",
          "title": "hex value for background color"
        },
        "warnColor": {
          "type": "string",
          "example": "#CD3D56",
          "description": "hex value for warn color",
          "title": "hex value for warning color"
        },
        "fontColor": {
          "type": "string",
          "example": "#000000",
          "description": "hex value for font color",
          "title": "hex value for font color"
        },
        "logoUrl": {
          "type": "string",
          "example": "https://acme.com/assets/v1/165617850692654601/policy/label/logo-180950416321494657",
          "description": "url to the logo",
          "title": "url where the logo is served"
        },
        "iconUrl": {
          "type": "string",
          "example": "https://acme.com/assets/v1/165617850692654601/policy/label/icon-180950498874178817",
          "description": "url to the icon",
          "title": "url where the icon is served"
        }
      }
    },
    "settingsv2ThemeMode": {
      "type": "string",
      "enum": [
        "THEME_MODE_UNSPECIFIED",
        "THEME_MODE_AUTO",
        "THEME_MODE_LIGHT",
        "THEME_MODE_DARK"
      ],
      "default": "THEME_MODE_UNSPECIFIED"
    },
    "settingsv2betaBrandingSettings": {
      "type": "object",
      "properties": {
        "lightTheme": {
          "$ref": "#/definitions/settingsv2betaTheme"
        },
        "darkTheme": {
          "$ref": "#/definitions/settingsv2betaTheme"
        },
        "fontUrl": {
          "type": "string",
          "example": "https://acme.com/assets/v1/165617850692654601/policy/label/font-180950243237405441",
          "description": "url to the font used"
        },
        "hideLoginNameSuffix": {
          "type": "boolean",
          "description": "hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set",
          "title": "hides the org suffix on the login form if the scope \\\"urn:zitadel:iam:org:domain:primary:{domainname}\\\" is set"
        },
        "disableWatermark": {
          "type": "boolean",
          "description": "boolean to disable the watermark"
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2betaResourceOwnerType",
          "description": "resource_owner_type returns if the setting is managed on the organization or on the instance",
          "title": "resource_owner_type returns if the setting is managed on the organization or on the instance"
        },
        "themeMode": {
          "$ref": "#/definitions/settingsv2betaThemeMode",
          "description": "states whether both or only dark or light theme will be used"
        }
      }
    },
    "settingsv2betaDomainSettings": {
      "type": "object",
      "properties": {
        "loginNameIncludesDomain": {
          "type": "boolean",
          "description": "the username has to end with the domain of its organization"
        },
        "requireOrgDomainVerification": {
          "type": "boolean",
          "description": "defines if organization domains should be verified upon creation, otherwise will be created already verified"
        },
        "smtpSenderAddressMatchesInstanceDomain": {
          "type": "boolean",
          "description": "defines if the SMTP sender address domain should match an existing domain on the instance"
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2betaResourceOwnerType",
          "description": "resource_owner_type returns if the setting is managed on the organization or on the instance",
          "title": "resource_owner_type returns if the setting is managed on the organization or on the instance"
        }
      }
    },
    "settingsv2betaEmbeddedIframeSettings": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "states if iframe embedding is enabled or disabled"
        },
        "allowedOrigins": {
          "type": "array",
          "example": [
            "foo.bar.com",
            "localhost:8080"
          ],
          "items": {
            "type": "string"
          },
          "description": "origins allowed loading ZITADEL in an iframe if enabled."
        }
      }
    },
    "settingsv2betaGetActiveIdentityProvidersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaListDetails"
        },
        "identityProviders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/settingsv2betaIdentityProvider"
          }
        }
      }
    },
    "settingsv2betaGetBrandingSettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2betaBrandingSettings"
        }
      }
    },
    "settingsv2betaGetDomainSettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2betaDomainSettings"
        }
      }
    },
    "settingsv2betaGetGeneralSettingsResponse": {
      "type": "object",
      "properties": {
        "defaultOrgId": {
          "type": "string",
          "description": "default organization for the current context"
        },
        "defaultLanguage": {
          "type": "string",
          "example": "en",
          "description": "default language for the current context"
        },
        "supportedLanguages": {
          "type": "array",
          "example": [
            "en",
            "de",
            "it"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "settingsv2betaGetLegalAndSupportSettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2betaLegalAndSupportSettings"
        }
      }
    },
    "settingsv2betaGetLockoutSettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2betaLockoutSettings"
        }
      }
    },
    "settingsv2betaGetLoginSettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2betaLoginSettings"
        }
      }
    },
    "settingsv2betaGetPasswordComplexitySettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2betaPasswordComplexitySettings"
        }
      }
    },
    "settingsv2betaGetPasswordExpirySettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2betaPasswordExpirySettings"
        }
      }
    },
    "settingsv2betaGetSecuritySettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "settings": {
          "$ref": "#/definitions/settingsv2betaSecuritySettings"
        }
      }
    },
    "settingsv2betaIdentityProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/settingsv2betaIdentityProviderType"
        }
      }
    },
    "settingsv2betaIdentityProviderType": {
      "type": "string",
      "enum": [
        "IDENTITY_PROVIDER_TYPE_UNSPECIFIED",
        "IDENTITY_PROVIDER_TYPE_OIDC",
        "IDENTITY_PROVIDER_TYPE_JWT",
        "IDENTITY_PROVIDER_TYPE_LDAP",
        "IDENTITY_PROVIDER_TYPE_OAUTH",
        "IDENTITY_PROVIDER_TYPE_AZURE_AD",
        "IDENTITY_PROVIDER_TYPE_GITHUB",
        "IDENTITY_PROVIDER_TYPE_GITHUB_ES",
        "IDENTITY_PROVIDER_TYPE_GITLAB",
        "IDENTITY_PROVIDER_TYPE_GITLAB_SELF_HOSTED",
        "IDENTITY_PROVIDER_TYPE_GOOGLE",
        "IDENTITY_PROVIDER_TYPE_SAML"
      ],
      "default": "IDENTITY_PROVIDER_TYPE_UNSPECIFIED"
    },
    "settingsv2betaLegalAndSupportSettings": {
      "type": "object",
      "properties": {
        "tosLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/legal/terms-of-service"
        },
        "privacyPolicyLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/legal/privacy-policy"
        },
        "helpLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/manuals/introduction"
        },
        "supportEmail": {
          "type": "string",
          "example": "support-email@test.com",
          "description": "help / support email address."
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2betaResourceOwnerType",
          "description": "resource_owner_type returns if the setting is managed on the organization or on the instance",
          "title": "resource_owner_type returns if the setting is managed on the organization or on the instance"
        },
        "docsLink": {
          "type": "string",
          "example": "https://zitadel.com/docs",
          "description": "Link to documentation to be shown in the console."
        },
        "customLink": {
          "type": "string",
          "example": "https://external.link",
          "description": "Link to an external resource that will be available to users in the console."
        },
        "customLinkText": {
          "type": "string",
          "example": "External",
          "description": "The button text that would be shown in console pointing to custom link."
        }
      }
    },
    "settingsv2betaLockoutSettings": {
      "type": "object",
      "properties": {
        "maxPasswordAttempts": {
          "type": "string",
          "format": "uint64",
          "example": "10",
          "description": "Maximum password check attempts before the account gets locked. Attempts are reset as soon as the password is entered correctly or the password is reset. If set to 0 the account will never be locked."
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2betaResourceOwnerType",
          "description": "resource_owner_type returns if the settings is managed on the organization or on the instance",
          "title": "resource_owner_type returns if the settings is managed on the organization or on the instance"
        },
        "maxOtpAttempts": {
          "type": "string",
          "format": "uint64",
          "example": "10",
          "description": "Maximum failed attempts for a single OTP type (TOTP, SMS, Email) before the account gets locked. Attempts are reset as soon as the OTP is entered correctly. If set to 0 the account will never be locked."
        }
      }
    },
    "settingsv2betaLoginSettings": {
      "type": "object",
      "properties": {
        "allowUsernamePassword": {
          "type": "boolean",
          "description": "defines if a user is allowed to log in with username and password"
        },
        "allowRegister": {
          "type": "boolean",
          "description": "defines if a person is allowed to register a user on this organization"
        },
        "allowExternalIdp": {
          "type": "boolean",
          "description": "defines if a user is allowed to add a defined identity provider. E.g. Google auth"
        },
        "forceMfa": {
          "type": "boolean",
          "description": "defines if a user MUST use a multi-factor to log in"
        },
        "passkeysType": {
          "$ref": "#/definitions/settingsv2betaPasskeysType",
          "description": "defines if passkeys are allowed for users"
        },
        "hidePasswordReset": {
          "type": "boolean",
          "description": "defines if password reset link should be shown in the login screen"
        },
        "ignoreUnknownUsernames": {
          "type": "boolean",
          "description": "defines if unknown username on login screen directly returns an error or always displays the password screen"
        },
        "defaultRedirectUri": {
          "type": "string",
          "example": "https://acme.com/ui/console",
          "description": "defines where the user will be redirected to if the login is started without app context (e.g. from mail)"
        },
        "passwordCheckLifetime": {
          "type": "string",
          "example": "864000s",
          "description": "Defines after how much time the user has to re-authenticate with the password."
        },
        "externalLoginCheckLifetime": {
          "type": "string",
          "example": "864000s",
          "description": "Defines after how much time the user has to re-authenticate with an external provider."
        },
        "mfaInitSkipLifetime": {
          "type": "string",
          "example": "2592000s",
          "description": "Defines after how much time the mfa prompt will be shown again."
        },
        "secondFactorCheckLifetime": {
          "type": "string",
          "example": "64800s",
          "description": "Defines after how long the second factor check is valid."
        },
        "multiFactorCheckLifetime": {
          "type": "string",
          "example": "43200s",
          "description": "Defines how long the multi-factor check is valid."
        },
        "secondFactors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/settingsv2betaSecondFactorType"
          }
        },
        "multiFactors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/settingsv2betaMultiFactorType"
          }
        },
        "allowDomainDiscovery": {
          "type": "boolean",
          "description": "If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success."
        },
        "disableLoginWithEmail": {
          "type": "boolean",
          "description": "defines if the user can additionally (to the login name) be identified by their verified email address"
        },
        "disableLoginWithPhone": {
          "type": "boolean",
          "description": "defines if the user can additionally (to the login name) be identified by their verified phone number"
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2betaResourceOwnerType",
          "description": "resource_owner_type returns if the settings is managed on the organization or on the instance",
          "title": "resource_owner_type returns if the settings is managed on the organization or on the instance"
        },
        "forceMfaLocalOnly": {
          "type": "boolean",
          "description": "if activated, only local authenticated users are forced to use MFA. Authentication through IDPs won't prompt a MFA step in the login."
        }
      }
    },
    "settingsv2betaMultiFactorType": {
      "type": "string",
      "enum": [
        "MULTI_FACTOR_TYPE_UNSPECIFIED",
        "MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION"
      ],
      "default": "MULTI_FACTOR_TYPE_UNSPECIFIED"
    },
    "settingsv2betaPasskeysType": {
      "type": "string",
      "enum": [
        "PASSKEYS_TYPE_NOT_ALLOWED",
        "PASSKEYS_TYPE_ALLOWED"
      ],
      "default": "PASSKEYS_TYPE_NOT_ALLOWED"
    },
    "settingsv2betaPasswordComplexitySettings": {
      "type": "object",
      "properties": {
        "minLength": {
          "type": "string",
          "format": "uint64",
          "example": "8",
          "description": "Defines the minimum length of a password."
        },
        "requiresUppercase": {
          "type": "boolean",
          "description": "defines if the password MUST contain an upper case letter"
        },
        "requiresLowercase": {
          "type": "boolean",
          "description": "defines if the password MUST contain a lowercase letter"
        },
        "requiresNumber": {
          "type": "boolean",
          "description": "defines if the password MUST contain a number"
        },
        "requiresSymbol": {
          "type": "boolean",
          "description": "defines if the password MUST contain a symbol. E.g. \"$\""
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2betaResourceOwnerType",
          "description": "resource_owner_type returns if the settings is managed on the organization or on the instance",
          "title": "resource_owner_type returns if the settings is managed on the organization or on the instance"
        }
      }
    },
    "settingsv2betaPasswordExpirySettings": {
      "type": "object",
      "properties": {
        "maxAgeDays": {
          "type": "string",
          "format": "uint64",
          "example": "365",
          "description": "Amount of days after which a password will expire. The user will be forced to change the password on the following authentication."
        },
        "expireWarnDays": {
          "type": "string",
          "format": "uint64",
          "example": "10",
          "description": "Amount of days after which the user should be notified of the upcoming expiry. ZITADEL will not notify the user."
        },
        "resourceOwnerType": {
          "$ref": "#/definitions/settingsv2betaResourceOwnerType",
          "title": "resource_owner_type returns if the settings is managed on the organization or on the instance"
        }
      }
    },
    "settingsv2betaResourceOwnerType": {
      "type": "string",
      "enum": [
        "RESOURCE_OWNER_TYPE_UNSPECIFIED",
        "RESOURCE_OWNER_TYPE_INSTANCE",
        "RESOURCE_OWNER_TYPE_ORG"
      ],
      "default": "RESOURCE_OWNER_TYPE_UNSPECIFIED"
    },
    "settingsv2betaSecondFactorType": {
      "type": "string",
      "enum": [
        "SECOND_FACTOR_TYPE_UNSPECIFIED",
        "SECOND_FACTOR_TYPE_OTP",
        "SECOND_FACTOR_TYPE_U2F",
        "SECOND_FACTOR_TYPE_OTP_EMAIL",
        "SECOND_FACTOR_TYPE_OTP_SMS"
      ],
      "default": "SECOND_FACTOR_TYPE_UNSPECIFIED",
      "title": "- SECOND_FACTOR_TYPE_OTP: This is the type for TOTP"
    },
    "settingsv2betaSecuritySettings": {
      "type": "object",
      "properties": {
        "embeddedIframe": {
          "$ref": "#/definitions/settingsv2betaEmbeddedIframeSettings"
        },
        "enableImpersonation": {
          "type": "boolean",
          "example": "en",
          "description": "default language for the current context"
        }
      }
    },
    "settingsv2betaSetSecuritySettingsRequest": {
      "type": "object",
      "properties": {
        "embeddedIframe": {
          "$ref": "#/definitions/settingsv2betaEmbeddedIframeSettings"
        },
        "enableImpersonation": {
          "type": "boolean",
          "description": "allows users to impersonate other users. The impersonator needs the appropriate `*_IMPERSONATOR` roles assigned as well"
        }
      }
    },
    "settingsv2betaSetSecuritySettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "settingsv2betaTheme": {
      "type": "object",
      "properties": {
        "primaryColor": {
          "type": "string",
          "example": "#5469d4",
          "description": "hex value for primary color",
          "title": "hex value for primary color"
        },
        "backgroundColor": {
          "type": "string",
          "example": "#FAFAFA",
          "description": "hex value for background color",
          "title": "hex value for background color"
        },
        "warnColor": {
          "type": "string",
          "example": "#CD3D56",
          "description": "hex value for warn color",
          "title": "hex value for warning color"
        },
        "fontColor": {
          "type": "string",
          "example": "#000000",
          "description": "hex value for font color",
          "title": "hex value for font color"
        },
        "logoUrl": {
          "type": "string",
          "example": "https://acme.com/assets/v1/165617850692654601/policy/label/logo-180950416321494657",
          "description": "url to the logo",
          "title": "url where the logo is served"
        },
        "iconUrl": {
          "type": "string",
          "example": "https://acme.com/assets/v1/165617850692654601/policy/label/icon-180950498874178817",
          "description": "url to the icon",
          "title": "url where the icon is served"
        }
      }
    },
    "settingsv2betaThemeMode": {
      "type": "string",
      "enum": [
        "THEME_MODE_UNSPECIFIED",
        "THEME_MODE_AUTO",
        "THEME_MODE_LIGHT",
        "THEME_MODE_DARK"
      ],
      "default": "THEME_MODE_UNSPECIFIED"
    },
    "userschemav3alphaGetUserSchema": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails",
          "description": "Details provide some base information (such as the last change date) of the schema."
        },
        "config": {
          "$ref": "#/definitions/v3alphaUserSchema"
        },
        "state": {
          "$ref": "#/definitions/resourcesuserschemav3alphaState",
          "example": "STATE_ACTIVE",
          "description": "Current state of the schema."
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "example": "2",
          "description": "Revision is a read only version of the schema, each update of the `schema`-field increases the revision."
        }
      }
    },
    "userschemav3alphaPatchUserSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "employees",
          "description": "Type is a human readable word describing the schema.",
          "maxLength": 200,
          "minLength": 1
        },
        "schema": {
          "type": "object",
          "example": {
            "$schema": "https://example.com/user/employees",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "required": true
              },
              "description": {
                "type": "string"
              }
            }
          },
          "description": "JSON schema representation defining the user."
        },
        "possibleAuthenticators": {
          "type": "array",
          "example": [
            "AUTHENTICATOR_TYPE_USERNAME",
            "AUTHENTICATOR_TYPE_PASSWORD",
            "AUTHENTICATOR_TYPE_WEBAUTHN"
          ],
          "items": {
            "$ref": "#/definitions/v3alphaAuthenticatorType"
          },
          "description": "Defines the possible types of authenticators.\n\nRemoval of an authenticator does not remove the authenticator on a user."
        }
      },
      "required": [
        "type",
        "schema"
      ]
    },
    "userv1AccessTokenType": {
      "type": "string",
      "enum": [
        "ACCESS_TOKEN_TYPE_BEARER",
        "ACCESS_TOKEN_TYPE_JWT"
      ],
      "default": "ACCESS_TOKEN_TYPE_BEARER"
    },
    "userv1AndQuery": {
      "type": "object",
      "properties": {
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeluserv1SearchQuery"
          },
          "description": "the sub queries to 'AND'"
        }
      }
    },
    "userv1AuthFactor": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/userv1AuthFactorState",
          "description": "current state of the auth factor"
        },
        "otp": {
          "$ref": "#/definitions/userv1AuthFactorOTP",
          "description": "one type use OTP, OTPSMS, OTPEmail or U2F"
        },
        "u2f": {
          "$ref": "#/definitions/userv1AuthFactorU2F",
          "description": "one type use OTP, OTPSMS, OTPEmail or U2F"
        },
        "otpSms": {
          "$ref": "#/definitions/userv1AuthFactorOTPSMS",
          "description": "one type use OTP, OTPSMS, OTPEmail or U2F"
        },
        "otpEmail": {
          "$ref": "#/definitions/userv1AuthFactorOTPEmail",
          "description": "one type use OTP, OTPSMS, OTPEmail or U2F"
        }
      }
    },
    "userv1AuthFactorOTP": {
      "type": "object"
    },
    "userv1AuthFactorOTPEmail": {
      "type": "object"
    },
    "userv1AuthFactorOTPSMS": {
      "type": "object"
    },
    "userv1AuthFactorState": {
      "type": "string",
      "enum": [
        "AUTH_FACTOR_STATE_UNSPECIFIED",
        "AUTH_FACTOR_STATE_NOT_READY",
        "AUTH_FACTOR_STATE_READY",
        "AUTH_FACTOR_STATE_REMOVED"
      ],
      "default": "AUTH_FACTOR_STATE_UNSPECIFIED"
    },
    "userv1AuthFactorU2F": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "name": {
          "type": "string",
          "example": "fido key"
        }
      }
    },
    "userv1DisplayNameQuery": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "example": "Gigi Giraffe",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "userv1Email": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "email address of the user. (spec: https://tools.ietf.org/html/rfc2822#section-3.4.1)"
        },
        "isEmailVerified": {
          "type": "boolean",
          "description": "Is true if the user verified the email or if the email is managed outside ZITADEL"
        }
      }
    },
    "userv1Gender": {
      "type": "string",
      "enum": [
        "GENDER_UNSPECIFIED",
        "GENDER_FEMALE",
        "GENDER_MALE",
        "GENDER_DIVERSE"
      ],
      "default": "GENDER_UNSPECIFIED"
    },
    "userv1Human": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/userv1Profile"
        },
        "email": {
          "$ref": "#/definitions/userv1Email"
        },
        "phone": {
          "$ref": "#/definitions/userv1Phone"
        },
        "passwordChanged": {
          "type": "string",
          "format": "date-time",
          "description": "The time the user last changed their password."
        }
      }
    },
    "userv1InUserEmailsQuery": {
      "type": "object",
      "properties": {
        "userEmails": {
          "type": "array",
          "example": [
            "test@example.com",
            "test@example.org"
          ],
          "items": {
            "type": "string"
          },
          "description": "the emails of the users to include"
        }
      }
    },
    "userv1InUserIDQuery": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "example": [
            "69629023906488334",
            "69622366012355662"
          ],
          "items": {
            "type": "string"
          },
          "description": "the ids of the users to include"
        }
      }
    },
    "userv1LoginNameQuery": {
      "type": "object",
      "properties": {
        "loginName": {
          "type": "string",
          "example": "gigi@zitadel.cloud",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "userv1Machine": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "zitadel"
        },
        "description": {
          "type": "string",
          "example": "The one and only IAM"
        },
        "hasSecret": {
          "type": "boolean",
          "example": "true"
        },
        "accessTokenType": {
          "$ref": "#/definitions/userv1AccessTokenType",
          "description": "Type of access token to receive"
        }
      }
    },
    "userv1NickNameQuery": {
      "type": "object",
      "properties": {
        "nickName": {
          "type": "string"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "userv1NotQuery": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadeluserv1SearchQuery",
          "description": "the sub query to negate (NOT)"
        }
      }
    },
    "userv1OrQuery": {
      "type": "object",
      "properties": {
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeluserv1SearchQuery"
          },
          "description": "the sub queries to 'OR'"
        }
      }
    },
    "userv1PersonalAccessToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "example": "3019-04-01T08:45:00.000000Z",
          "description": "the date the token will expire"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid"
          ],
          "items": {
            "type": "string"
          },
          "description": "scopes granted to the token"
        }
      }
    },
    "userv1Phone": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41 71 000 00 00",
          "description": "mobile phone number of the user. (use global pattern of spec https://tools.ietf.org/html/rfc3966)"
        },
        "isPhoneVerified": {
          "type": "boolean",
          "description": "Is true if the user verified the phone or if the phone is managed outside ZITADEL"
        }
      }
    },
    "userv1Profile": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Gigi"
        },
        "lastName": {
          "type": "string",
          "example": "Giraffe"
        },
        "nickName": {
          "type": "string",
          "example": "gigi-giraffe"
        },
        "displayName": {
          "type": "string",
          "example": "Gigi Giraffe",
          "description": "a user can set the display name, if nothing is set ZITADEL computes \"first_name last_name\""
        },
        "preferredLanguage": {
          "type": "string",
          "example": "en",
          "description": "language tag analog https://tools.ietf.org/html/rfc3066"
        },
        "gender": {
          "$ref": "#/definitions/userv1Gender",
          "description": "the gender of the human"
        },
        "avatarUrl": {
          "type": "string",
          "example": "https://api.zitadel.ch/assets/v1/avatar-32432jkh4kj32",
          "description": "avatar URL of the user"
        }
      }
    },
    "userv1Session": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "agentId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "authState": {
          "$ref": "#/definitions/v1SessionState",
          "description": "current state of the session"
        },
        "userId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "userName": {
          "type": "string",
          "example": "gigi-giraffe"
        },
        "loginName": {
          "type": "string",
          "example": "gigi@zitadel.com"
        },
        "displayName": {
          "type": "string",
          "example": "Gigi Giraffe",
          "description": "the display name of the user"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "avatarUrl": {
          "type": "string",
          "example": "https://api.zitadel.ch/assets/v1/avatar-32432jkh4kj32",
          "description": "avatar URL of the user"
        }
      }
    },
    "userv1StateQuery": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/userv1UserState",
          "description": "current state of the user"
        }
      },
      "title": "UserStateQuery always equals"
    },
    "userv1Type": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_HUMAN",
        "TYPE_MACHINE"
      ],
      "default": "TYPE_UNSPECIFIED"
    },
    "userv1TypeQuery": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/userv1Type",
          "description": "the type of the user"
        }
      },
      "title": "UserTypeQuery always equals"
    },
    "userv1User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "state": {
          "$ref": "#/definitions/userv1UserState",
          "description": "current state of the user"
        },
        "userName": {
          "type": "string",
          "example": "gigi-giraffe"
        },
        "loginNames": {
          "type": "array",
          "example": [
            "gigi@zitadel.com",
            "gigi@zitadel.zitadel.ch"
          ],
          "items": {
            "type": "string"
          }
        },
        "preferredLoginName": {
          "type": "string",
          "example": "gigi@zitadel.com"
        },
        "human": {
          "$ref": "#/definitions/userv1Human",
          "description": "one of type use human or machine"
        },
        "machine": {
          "$ref": "#/definitions/userv1Machine",
          "description": "one of type use human or machine"
        }
      }
    },
    "userv1UserFieldName": {
      "type": "string",
      "enum": [
        "USER_FIELD_NAME_UNSPECIFIED",
        "USER_FIELD_NAME_USER_NAME",
        "USER_FIELD_NAME_FIRST_NAME",
        "USER_FIELD_NAME_LAST_NAME",
        "USER_FIELD_NAME_NICK_NAME",
        "USER_FIELD_NAME_DISPLAY_NAME",
        "USER_FIELD_NAME_EMAIL",
        "USER_FIELD_NAME_STATE",
        "USER_FIELD_NAME_TYPE",
        "USER_FIELD_NAME_CREATION_DATE"
      ],
      "default": "USER_FIELD_NAME_UNSPECIFIED"
    },
    "userv1UserNameQuery": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "example": "gigi-giraffe",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "userv1UserState": {
      "type": "string",
      "enum": [
        "USER_STATE_UNSPECIFIED",
        "USER_STATE_ACTIVE",
        "USER_STATE_INACTIVE",
        "USER_STATE_DELETED",
        "USER_STATE_LOCKED",
        "USER_STATE_SUSPEND",
        "USER_STATE_INITIAL"
      ],
      "default": "USER_STATE_UNSPECIFIED"
    },
    "userv2AccessTokenType": {
      "type": "string",
      "enum": [
        "ACCESS_TOKEN_TYPE_BEARER",
        "ACCESS_TOKEN_TYPE_JWT"
      ],
      "default": "ACCESS_TOKEN_TYPE_BEARER"
    },
    "userv2AddHumanUserRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "optionally set your own id unique for the user.",
          "maxLength": 200,
          "minLength": 1
        },
        "username": {
          "type": "string",
          "example": "minnie-mouse",
          "description": "optionally set a unique username, if none is provided the email will be used.",
          "maxLength": 200,
          "minLength": 1
        },
        "organization": {
          "$ref": "#/definitions/zitadelobjectv2Organization"
        },
        "profile": {
          "$ref": "#/definitions/userv2SetHumanProfile"
        },
        "email": {
          "$ref": "#/definitions/userv2SetHumanEmail"
        },
        "phone": {
          "$ref": "#/definitions/userv2SetHumanPhone"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv2SetMetadataEntry"
          }
        },
        "password": {
          "$ref": "#/definitions/userv2Password"
        },
        "hashedPassword": {
          "$ref": "#/definitions/userv2HashedPassword"
        },
        "idpLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv2IDPLink"
          }
        },
        "totpSecret": {
          "type": "string",
          "example": "TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK",
          "description": "An Implementation of RFC 6238 is used, with HMAC-SHA-1 and time-step of 30 seconds.\nCurrently no other options are supported, and if anything different is used the validation will fail.",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "profile",
        "email"
      ]
    },
    "userv2AddHumanUserResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "emailCode": {
          "type": "string"
        },
        "phoneCode": {
          "type": "string"
        }
      }
    },
    "userv2AddIDPLinkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2AddOTPEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2AddOTPSMSResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2AndQuery": {
      "type": "object",
      "properties": {
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeluserv2SearchQuery"
          },
          "description": "the sub queries to 'AND'"
        }
      },
      "description": "Connect multiple sub-condition with and AND operator."
    },
    "userv2AuthFactor": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/userv2AuthFactorState",
          "description": "current state of the auth factor"
        },
        "otp": {
          "$ref": "#/definitions/userv2AuthFactorOTP",
          "description": "TOTP second factor"
        },
        "u2f": {
          "$ref": "#/definitions/userv2AuthFactorU2F",
          "description": "U2F second factor"
        },
        "otpSms": {
          "$ref": "#/definitions/userv2AuthFactorOTPSMS",
          "description": "SMS second factor"
        },
        "otpEmail": {
          "$ref": "#/definitions/userv2AuthFactorOTPEmail",
          "description": "Email second factor"
        }
      }
    },
    "userv2AuthFactorOTP": {
      "type": "object"
    },
    "userv2AuthFactorOTPEmail": {
      "type": "object"
    },
    "userv2AuthFactorOTPSMS": {
      "type": "object"
    },
    "userv2AuthFactorState": {
      "type": "string",
      "enum": [
        "AUTH_FACTOR_STATE_UNSPECIFIED",
        "AUTH_FACTOR_STATE_NOT_READY",
        "AUTH_FACTOR_STATE_READY",
        "AUTH_FACTOR_STATE_REMOVED"
      ],
      "default": "AUTH_FACTOR_STATE_UNSPECIFIED"
    },
    "userv2AuthFactorU2F": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "name": {
          "type": "string",
          "example": "fido key"
        }
      }
    },
    "userv2AuthenticationMethodType": {
      "type": "string",
      "enum": [
        "AUTHENTICATION_METHOD_TYPE_UNSPECIFIED",
        "AUTHENTICATION_METHOD_TYPE_PASSWORD",
        "AUTHENTICATION_METHOD_TYPE_PASSKEY",
        "AUTHENTICATION_METHOD_TYPE_IDP",
        "AUTHENTICATION_METHOD_TYPE_TOTP",
        "AUTHENTICATION_METHOD_TYPE_U2F",
        "AUTHENTICATION_METHOD_TYPE_OTP_SMS",
        "AUTHENTICATION_METHOD_TYPE_OTP_EMAIL"
      ],
      "default": "AUTHENTICATION_METHOD_TYPE_UNSPECIFIED"
    },
    "userv2CreatePasskeyRegistrationLinkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "code": {
          "$ref": "#/definitions/userv2PasskeyRegistrationCode",
          "description": "\"one time code generated by ZITADEL; required to start the passkey registration without user authentication\"",
          "title": "in case the medium was set to return_code, the code will be returned"
        }
      }
    },
    "userv2DeactivateUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2DeleteUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2DisplayNameQuery": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "example": "Gigi Giraffe",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific display name.",
      "required": [
        "displayName"
      ]
    },
    "userv2DomainQuery": {
      "type": "object",
      "properties": {
        "includeWithoutDomain": {
          "type": "boolean",
          "description": "List also auth method types without domain information like passkey and U2F added through V1 APIs / Login UI."
        },
        "domain": {
          "type": "string",
          "example": "example.com",
          "description": "List only auth methods with specific domain.",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv2EmailQuery": {
      "type": "object",
      "properties": {
        "emailAddress": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "email address of the user",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/objectv2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific email.",
      "required": [
        "emailAddress"
      ]
    },
    "userv2FirstNameQuery": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Gigi",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific first name.",
      "required": [
        "firstName"
      ]
    },
    "userv2Gender": {
      "type": "string",
      "enum": [
        "GENDER_UNSPECIFIED",
        "GENDER_FEMALE",
        "GENDER_MALE",
        "GENDER_DIVERSE"
      ],
      "default": "GENDER_UNSPECIFIED"
    },
    "userv2GetUserByIDResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details",
          "title": "deprecated: details is moved into user"
        },
        "user": {
          "$ref": "#/definitions/userv2User"
        }
      }
    },
    "userv2HashedPassword": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "example": "$2a$12$lJ08fqVr8bFJilRVnDT9QeULI7YW.nT3iwUv6dyg0aCrfm3UY8XR2",
          "description": "\"Encoded hash of a password in Modular Crypt Format: https://zitadel.com/docs/concepts/architecture/secrets#hashed-secrets\"",
          "maxLength": 200,
          "minLength": 1
        },
        "changeRequired": {
          "type": "boolean"
        }
      },
      "required": [
        "hash"
      ]
    },
    "userv2HumanEmail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "mini@mouse.com",
          "maxLength": 200,
          "minLength": 1
        },
        "isVerified": {
          "type": "boolean"
        }
      }
    },
    "userv2HumanPhone": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41791234567",
          "maxLength": 200
        },
        "isVerified": {
          "type": "boolean"
        }
      }
    },
    "userv2HumanProfile": {
      "type": "object",
      "properties": {
        "givenName": {
          "type": "string",
          "example": "Minnie",
          "maxLength": 200,
          "minLength": 1
        },
        "familyName": {
          "type": "string",
          "example": "Mouse",
          "maxLength": 200,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "example": "Mini",
          "maxLength": 200
        },
        "displayName": {
          "type": "string",
          "example": "Minnie Mouse",
          "maxLength": 200
        },
        "preferredLanguage": {
          "type": "string",
          "example": "en",
          "maxLength": 10
        },
        "gender": {
          "$ref": "#/definitions/userv2Gender",
          "example": "GENDER_FEMALE"
        },
        "avatarUrl": {
          "type": "string",
          "example": "https://api.zitadel.ch/assets/v1/avatar-32432jkh4kj32",
          "description": "avatar URL of the user"
        }
      }
    },
    "userv2HumanUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "Unique identifier of the user."
        },
        "state": {
          "$ref": "#/definitions/userv2UserState",
          "description": "current state of the user"
        },
        "username": {
          "type": "string",
          "example": "minnie-mouse",
          "description": "Username of the user, which can be globally unique or unique on organization level."
        },
        "loginNames": {
          "type": "array",
          "example": [
            "gigi@zitadel.com",
            "gigi@zitadel.zitadel.ch"
          ],
          "items": {
            "type": "string"
          },
          "description": "Possible usable login names for the user."
        },
        "preferredLoginName": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "Preferred login name of the user."
        },
        "profile": {
          "$ref": "#/definitions/userv2HumanProfile",
          "description": "Profile information of the user."
        },
        "email": {
          "$ref": "#/definitions/userv2HumanEmail",
          "description": "Email of the user, if defined."
        },
        "phone": {
          "$ref": "#/definitions/userv2HumanPhone",
          "description": "Phone of the user, if defined."
        },
        "passwordChangeRequired": {
          "type": "boolean",
          "description": "User is required to change the used password on the next login."
        },
        "passwordChanged": {
          "type": "string",
          "format": "date-time",
          "description": "The time the user last changed their password."
        }
      }
    },
    "userv2IDPInformation": {
      "type": "object",
      "properties": {
        "oauth": {
          "$ref": "#/definitions/userv2IDPOAuthAccessInformation",
          "description": "OAuth/OIDC access (and id_token) returned by the identity provider"
        },
        "ldap": {
          "$ref": "#/definitions/userv2IDPLDAPAccessInformation",
          "description": "LDAP entity attributes returned by the identity provider"
        },
        "saml": {
          "$ref": "#/definitions/userv2IDPSAMLAccessInformation",
          "description": "SAMLResponse returned by the identity provider"
        },
        "idpId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "ID of the identity provider"
        },
        "userId": {
          "type": "string",
          "example": "6516849804890468048461403518",
          "description": "ID of the user of the identity provider"
        },
        "userName": {
          "type": "string",
          "example": "user@external.com",
          "description": "username of the user of the identity provider"
        },
        "rawInformation": {
          "type": "object",
          "description": "complete information returned by the identity provider"
        }
      }
    },
    "userv2IDPIntent": {
      "type": "object",
      "properties": {
        "idpIntentId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "ID of the IDP intent",
          "maxLength": 200,
          "minLength": 1
        },
        "idpIntentToken": {
          "type": "string",
          "example": "SJKL3ioIDpo342ioqw98fjp3sdf32wahb=",
          "description": "token of the IDP intent",
          "maxLength": 200,
          "minLength": 1
        },
        "userId": {
          "type": "string",
          "example": "163840776835432345",
          "description": "ID of the ZITADEL user if external user already linked",
          "maxLength": 200
        }
      }
    },
    "userv2IDPLDAPAccessInformation": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object"
        }
      }
    },
    "userv2IDPLink": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "ID of the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "userId": {
          "type": "string",
          "example": "6516849804890468048461403518",
          "description": "ID of the user of the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "userName": {
          "type": "string",
          "example": "user@external.com",
          "description": "username of the user of the identity provider",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv2IDPOAuthAccessInformation": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        }
      }
    },
    "userv2IDPSAMLAccessInformation": {
      "type": "object",
      "properties": {
        "assertion": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "userv2InUserEmailsQuery": {
      "type": "object",
      "properties": {
        "userEmails": {
          "type": "array",
          "example": [
            "test@example.com",
            "test@example.org"
          ],
          "items": {
            "type": "string"
          },
          "description": "the emails of the users to include"
        }
      },
      "description": "Query for users with email in list of emails."
    },
    "userv2InUserIDQuery": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "example": [
            "69629023906488334",
            "69622366012355662"
          ],
          "items": {
            "type": "string"
          },
          "description": "the ids of the users to include"
        }
      },
      "description": "Query for users with ID in list of IDs."
    },
    "userv2LDAPCredentials": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "username",
          "description": "Username used to login through LDAP",
          "maxLength": 200,
          "minLength": 1
        },
        "password": {
          "type": "string",
          "example": "Password1!",
          "description": "Password used to login through LDAP",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv2LastNameQuery": {
      "type": "object",
      "properties": {
        "lastName": {
          "type": "string",
          "example": "Giraffe",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific last name.",
      "required": [
        "lastName"
      ]
    },
    "userv2ListAuthenticationMethodTypesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2ListDetails"
        },
        "authMethodTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userv2AuthenticationMethodType"
          }
        }
      }
    },
    "userv2ListUsersRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/objectv2ListQuery",
          "title": "list limitations and ordering"
        },
        "sortingColumn": {
          "$ref": "#/definitions/userv2UserFieldName",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeluserv2SearchQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "userv2ListUsersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2ListDetails"
        },
        "sortingColumn": {
          "$ref": "#/definitions/userv2UserFieldName"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv2User"
          }
        }
      }
    },
    "userv2LockUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2LoginNameQuery": {
      "type": "object",
      "properties": {
        "loginName": {
          "type": "string",
          "example": "gigi@zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific state.",
      "required": [
        "loginName"
      ]
    },
    "userv2MachineUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "zitadel"
        },
        "description": {
          "type": "string",
          "example": "The one and only IAM"
        },
        "hasSecret": {
          "type": "boolean",
          "example": "true"
        },
        "accessTokenType": {
          "$ref": "#/definitions/userv2AccessTokenType",
          "description": "Type of access token to receive"
        }
      }
    },
    "userv2NickNameQuery": {
      "type": "object",
      "properties": {
        "nickName": {
          "type": "string",
          "example": "Gigi",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific nickname.",
      "required": [
        "nickName"
      ]
    },
    "userv2NotQuery": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadeluserv2SearchQuery",
          "description": "the sub query to negate (NOT)"
        }
      },
      "description": "Negate the sub-condition."
    },
    "userv2NotificationType": {
      "type": "string",
      "enum": [
        "NOTIFICATION_TYPE_Unspecified",
        "NOTIFICATION_TYPE_Email",
        "NOTIFICATION_TYPE_SMS"
      ],
      "default": "NOTIFICATION_TYPE_Unspecified"
    },
    "userv2OrQuery": {
      "type": "object",
      "properties": {
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeluserv2SearchQuery"
          },
          "description": "the sub queries to 'OR'"
        }
      },
      "description": "Connect multiple sub-condition with and OR operator."
    },
    "userv2OrganizationIdQuery": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "example": "69629023906488334",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "description": "Query for users under a specific organization as resource owner.",
      "required": [
        "organizationId"
      ]
    },
    "userv2PasskeyAuthenticator": {
      "type": "string",
      "enum": [
        "PASSKEY_AUTHENTICATOR_UNSPECIFIED",
        "PASSKEY_AUTHENTICATOR_PLATFORM",
        "PASSKEY_AUTHENTICATOR_CROSS_PLATFORM"
      ],
      "default": "PASSKEY_AUTHENTICATOR_UNSPECIFIED"
    },
    "userv2PasskeyRegistrationCode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "e2a48d6a-362b-4db6-a1fb-34feab84dc62",
          "description": "\"id to the one time code generated by ZITADEL\"",
          "maxLength": 200
        },
        "code": {
          "type": "string",
          "example": "SomeSpecialCode",
          "description": "\"one time code generated by ZITADEL\"",
          "maxLength": 200
        }
      },
      "required": [
        "id",
        "code"
      ]
    },
    "userv2Password": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "example": "Secr3tP4ssw0rd!",
          "maxLength": 200,
          "minLength": 1
        },
        "changeRequired": {
          "type": "boolean"
        }
      },
      "required": [
        "password"
      ]
    },
    "userv2PasswordResetResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the medium was set to return_code, the code will be returned"
        }
      }
    },
    "userv2PhoneQuery": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "example": "+41791234567",
          "description": "Phone number of the user",
          "maxLength": 20,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific phone.",
      "required": [
        "number"
      ]
    },
    "userv2ReactivateUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2RedirectURLs": {
      "type": "object",
      "properties": {
        "successUrl": {
          "type": "string",
          "example": "https://custom.com/login/idp/success",
          "description": "URL on which the user will be redirected after a successful login",
          "maxLength": 2048,
          "minLength": 1
        },
        "failureUrl": {
          "type": "string",
          "example": "https://custom.com/login/idp/fail",
          "description": "URL on which the user will be redirected after a failed login",
          "maxLength": 2048,
          "minLength": 1
        }
      }
    },
    "userv2RegisterPasskeyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "passkeyId": {
          "type": "string",
          "example": "163840776835432705"
        },
        "publicKeyCredentialCreationOptions": {
          "type": "object",
          "example": {
            "publicKey": {
              "attestation": "none",
              "authenticatorSelection": {
                "userVerification": "required"
              },
              "challenge": "XaMYwWOZ5hj6pwtwJJlpcI-ExkO5TxevBMG4R8DoKQQ",
              "excludeCredentials": [
                {
                  "id": "tVp1QfYhT8DkyEHVrv7blnpAo2YJzbZgZNBf7zPs6CI",
                  "type": "public-key"
                }
              ],
              "pubKeyCredParams": [
                {
                  "alg": -7,
                  "type": "public-key"
                }
              ],
              "rp": {
                "id": "localhost",
                "name": "ZITADEL"
              },
              "timeout": 300000,
              "user": {
                "displayName": "Tim Mohlmann",
                "id": "MjE1NTk4MDAwNDY0OTk4OTQw",
                "name": "tim"
              }
            }
          },
          "description": "Options for Credential Creation (dictionary PublicKeyCredentialCreationOptions). Generated helper methods transform the field to JSON, for use in a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialcreationoptions"
        }
      }
    },
    "userv2RegisterTOTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "uri": {
          "type": "string",
          "example": "otpauth://totp/ZITADEL:gigi@acme.zitadel.cloud?algorithm=SHA1\u0026digits=6\u0026issuer=ZITADEL\u0026period=30\u0026secret=TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK"
        },
        "secret": {
          "type": "string",
          "example": "TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK"
        }
      }
    },
    "userv2RegisterU2FResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "u2fId": {
          "type": "string",
          "example": "163840776835432705"
        },
        "publicKeyCredentialCreationOptions": {
          "type": "object",
          "example": {
            "publicKey": {
              "attestation": "none",
              "authenticatorSelection": {
                "userVerification": "required"
              },
              "challenge": "XaMYwWOZ5hj6pwtwJJlpcI-ExkO5TxevBMG4R8DoKQQ",
              "excludeCredentials": [
                {
                  "id": "tVp1QfYhT8DkyEHVrv7blnpAo2YJzbZgZNBf7zPs6CI",
                  "type": "public-key"
                }
              ],
              "pubKeyCredParams": [
                {
                  "alg": -7,
                  "type": "public-key"
                }
              ],
              "rp": {
                "id": "localhost",
                "name": "ZITADEL"
              },
              "timeout": 300000,
              "user": {
                "displayName": "Tim Mohlmann",
                "id": "MjE1NTk4MDAwNDY0OTk4OTQw",
                "name": "tim"
              }
            }
          },
          "description": "Options for Credential Creation (dictionary PublicKeyCredentialCreationOptions). Generated helper methods transform the field to JSON, for use in a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialcreationoptions"
        }
      }
    },
    "userv2RemoveOTPEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2RemoveOTPSMSResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2RemovePhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2RemoveTOTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2ResendEmailCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the verification was set to return_code, the code will be returned"
        }
      }
    },
    "userv2ResendPhoneCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the verification was set to return_code, the code will be returned"
        }
      }
    },
    "userv2RetrieveIdentityProviderIntentResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "idpInformation": {
          "$ref": "#/definitions/userv2IDPInformation"
        },
        "userId": {
          "type": "string",
          "example": "163840776835432345",
          "description": "ID of the user in ZITADEL if external user is linked"
        }
      }
    },
    "userv2ReturnEmailVerificationCode": {
      "type": "object"
    },
    "userv2ReturnPasskeyRegistrationCode": {
      "type": "object"
    },
    "userv2ReturnPasswordResetCode": {
      "type": "object"
    },
    "userv2ReturnPhoneVerificationCode": {
      "type": "object"
    },
    "userv2SendEmailVerificationCode": {
      "type": "object",
      "properties": {
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/email/verify?userID={{.UserID}}\u0026code={{.Code}}\u0026orgID={{.OrgID}}",
          "description": "Optionally set a url_template, which will be used in the verification mail sent by ZITADEL to guide the user to your verification page.\nIf no template is set, the default ZITADEL url will be used.\n\nThe following placeholders can be used: UserID, OrgID, Code",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv2SendPasskeyRegistrationLink": {
      "type": "object",
      "properties": {
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/passkey/register?userID={{.UserID}}\u0026orgID={{.OrgID}}\u0026codeID={{.CodeID}}\u0026code={{.Code}}",
          "description": "Optionally set a url_template, which will be used in the mail sent by ZITADEL to guide the user to your passkey registration page.\nIf no template is set, the default ZITADEL url will be used.\n\nThe following placeholders can be used: UserID, OrgID, CodeID, Code",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv2SendPasswordResetLink": {
      "type": "object",
      "properties": {
        "notificationType": {
          "$ref": "#/definitions/userv2NotificationType"
        },
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/password/changey?userID={{.UserID}}\u0026code={{.Code}}\u0026orgID={{.OrgID}}",
          "description": "Optionally set a url_template, which will be used in the password reset mail sent by ZITADEL to guide the user to your password change page.\nIf no template is set, the default ZITADEL url will be used.\n\nThe following placeholders can be used: UserID, OrgID, Code",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv2SendPhoneVerificationCode": {
      "type": "object"
    },
    "userv2SetEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the verification was set to return_code, the code will be returned"
        }
      }
    },
    "userv2SetHumanEmail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "mini@mouse.com",
          "maxLength": 200,
          "minLength": 1
        },
        "sendCode": {
          "$ref": "#/definitions/userv2SendEmailVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2ReturnEmailVerificationCode"
        },
        "isVerified": {
          "type": "boolean"
        }
      },
      "required": [
        "email"
      ]
    },
    "userv2SetHumanPhone": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41791234567",
          "maxLength": 200
        },
        "sendCode": {
          "$ref": "#/definitions/userv2SendPhoneVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2ReturnPhoneVerificationCode"
        },
        "isVerified": {
          "type": "boolean"
        }
      }
    },
    "userv2SetHumanProfile": {
      "type": "object",
      "properties": {
        "givenName": {
          "type": "string",
          "example": "Minnie",
          "maxLength": 200,
          "minLength": 1
        },
        "familyName": {
          "type": "string",
          "example": "Mouse",
          "maxLength": 200,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "example": "Mini",
          "maxLength": 200
        },
        "displayName": {
          "type": "string",
          "example": "Minnie Mouse",
          "maxLength": 200
        },
        "preferredLanguage": {
          "type": "string",
          "example": "en",
          "maxLength": 10
        },
        "gender": {
          "$ref": "#/definitions/userv2Gender",
          "example": "GENDER_FEMALE"
        }
      },
      "required": [
        "givenName",
        "familyName"
      ]
    },
    "userv2SetMetadataEntry": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "my-key",
          "maxLength": 200,
          "minLength": 1
        },
        "value": {
          "type": "string",
          "format": "byte",
          "example": "VGhpcyBpcyBteSB0ZXN0IHZhbHVl",
          "description": "The value has to be base64 encoded.",
          "maxLength": 500000,
          "minLength": 1
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "userv2SetPassword": {
      "type": "object",
      "properties": {
        "password": {
          "$ref": "#/definitions/userv2Password"
        },
        "hashedPassword": {
          "$ref": "#/definitions/userv2HashedPassword"
        },
        "currentPassword": {
          "type": "string",
          "example": "Secr3tP4ssw0rd!",
          "maxLength": 200,
          "minLength": 1
        },
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "\"the verification code generated during password reset request\"",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "currentPassword",
        "verificationCode"
      ]
    },
    "userv2SetPasswordResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2SetPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the verification was set to return_code, the code will be returned"
        }
      }
    },
    "userv2StartIdentityProviderIntentRequest": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "ID for existing identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "urls": {
          "$ref": "#/definitions/userv2RedirectURLs"
        },
        "ldap": {
          "$ref": "#/definitions/userv2LDAPCredentials"
        }
      }
    },
    "userv2StartIdentityProviderIntentResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "authUrl": {
          "type": "string",
          "example": "https://accounts.google.com/o/oauth2/v2/auth?client_id=clientID\u0026callback=https%3A%2F%2Fzitadel.cloud%2Fidps%2Fcallback",
          "description": "URL to which the client should redirect"
        },
        "idpIntent": {
          "$ref": "#/definitions/userv2IDPIntent",
          "description": "IDP Intent information"
        },
        "postForm": {
          "type": "string",
          "format": "byte",
          "description": "POST call information"
        }
      }
    },
    "userv2StateQuery": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/userv2UserState",
          "description": "current state of the user"
        }
      },
      "description": "Query for users with a specific state.",
      "required": [
        "state"
      ]
    },
    "userv2Type": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_HUMAN",
        "TYPE_MACHINE"
      ],
      "default": "TYPE_UNSPECIFIED"
    },
    "userv2TypeQuery": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/userv2Type",
          "description": "the type of the user"
        }
      },
      "description": "Query for users with a specific type.",
      "required": [
        "type"
      ]
    },
    "userv2UnlockUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2UpdateHumanUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "emailCode": {
          "type": "string"
        },
        "phoneCode": {
          "type": "string"
        }
      }
    },
    "userv2User": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a"
        },
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "state": {
          "$ref": "#/definitions/userv2UserState",
          "description": "current state of the user"
        },
        "username": {
          "type": "string",
          "example": "minnie-mouse"
        },
        "loginNames": {
          "type": "array",
          "example": [
            "gigi@zitadel.com",
            "gigi@zitadel.zitadel.ch"
          ],
          "items": {
            "type": "string"
          }
        },
        "preferredLoginName": {
          "type": "string",
          "example": "gigi@zitadel.com"
        },
        "human": {
          "$ref": "#/definitions/userv2HumanUser",
          "description": "one of type use human or machine"
        },
        "machine": {
          "$ref": "#/definitions/userv2MachineUser",
          "description": "one of type use human or machine"
        }
      }
    },
    "userv2UserFieldName": {
      "type": "string",
      "enum": [
        "USER_FIELD_NAME_UNSPECIFIED",
        "USER_FIELD_NAME_USER_NAME",
        "USER_FIELD_NAME_FIRST_NAME",
        "USER_FIELD_NAME_LAST_NAME",
        "USER_FIELD_NAME_NICK_NAME",
        "USER_FIELD_NAME_DISPLAY_NAME",
        "USER_FIELD_NAME_EMAIL",
        "USER_FIELD_NAME_STATE",
        "USER_FIELD_NAME_TYPE",
        "USER_FIELD_NAME_CREATION_DATE"
      ],
      "default": "USER_FIELD_NAME_UNSPECIFIED"
    },
    "userv2UserNameQuery": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "example": "gigi-giraffe",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific user name.",
      "required": [
        "userName"
      ]
    },
    "userv2UserServiceAddIDPLinkBody": {
      "type": "object",
      "properties": {
        "idpLink": {
          "$ref": "#/definitions/userv2IDPLink"
        }
      }
    },
    "userv2UserServiceAddOTPEmailBody": {
      "type": "object"
    },
    "userv2UserServiceAddOTPSMSBody": {
      "type": "object"
    },
    "userv2UserServiceCreatePasskeyRegistrationLinkBody": {
      "type": "object",
      "properties": {
        "sendLink": {
          "$ref": "#/definitions/userv2SendPasskeyRegistrationLink"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2ReturnPasskeyRegistrationCode"
        }
      }
    },
    "userv2UserServiceDeactivateUserBody": {
      "type": "object"
    },
    "userv2UserServiceLockUserBody": {
      "type": "object"
    },
    "userv2UserServicePasswordResetBody": {
      "type": "object",
      "properties": {
        "sendLink": {
          "$ref": "#/definitions/userv2SendPasswordResetLink"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2ReturnPasswordResetCode"
        }
      }
    },
    "userv2UserServiceReactivateUserBody": {
      "type": "object"
    },
    "userv2UserServiceRegisterPasskeyBody": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/userv2PasskeyRegistrationCode",
          "description": "\"one time code generated by ZITADEL; required to start the passkey registration without user authentication\""
        },
        "authenticator": {
          "$ref": "#/definitions/userv2PasskeyAuthenticator",
          "description": "\"Optionally specify the authenticator type of the passkey device (platform or cross-platform). If none is provided, both values are allowed.\""
        },
        "domain": {
          "type": "string",
          "description": "\"Domain on which the user is authenticated.\""
        }
      }
    },
    "userv2UserServiceRegisterTOTPBody": {
      "type": "object"
    },
    "userv2UserServiceRegisterU2FBody": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "description": "\"Domain on which the user is authenticated.\""
        }
      }
    },
    "userv2UserServiceRemovePhoneBody": {
      "type": "object"
    },
    "userv2UserServiceResendEmailCodeBody": {
      "type": "object",
      "properties": {
        "sendCode": {
          "$ref": "#/definitions/userv2SendEmailVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2ReturnEmailVerificationCode"
        }
      }
    },
    "userv2UserServiceResendPhoneCodeBody": {
      "type": "object",
      "properties": {
        "sendCode": {
          "$ref": "#/definitions/userv2SendPhoneVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2ReturnPhoneVerificationCode"
        }
      }
    },
    "userv2UserServiceRetrieveIdentityProviderIntentBody": {
      "type": "object",
      "properties": {
        "idpIntentToken": {
          "type": "string",
          "example": "SJKL3ioIDpo342ioqw98fjp3sdf32wahb=",
          "description": "token of the idp intent, previously returned on the success response of the IDP callback",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv2UserServiceSetEmailBody": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "mini@mouse.com",
          "maxLength": 200,
          "minLength": 1
        },
        "sendCode": {
          "$ref": "#/definitions/userv2SendEmailVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2ReturnEmailVerificationCode"
        },
        "isVerified": {
          "type": "boolean"
        }
      },
      "required": [
        "email"
      ]
    },
    "userv2UserServiceSetPasswordBody": {
      "type": "object",
      "properties": {
        "newPassword": {
          "$ref": "#/definitions/userv2Password"
        },
        "currentPassword": {
          "type": "string",
          "example": "Secr3tP4ssw0rd!",
          "maxLength": 200,
          "minLength": 1
        },
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "\"the verification code generated during password reset request\"",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "currentPassword",
        "verificationCode"
      ]
    },
    "userv2UserServiceSetPhoneBody": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41791234567",
          "maxLength": 200,
          "minLength": 1
        },
        "sendCode": {
          "$ref": "#/definitions/userv2SendPhoneVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2ReturnPhoneVerificationCode"
        },
        "isVerified": {
          "type": "boolean"
        }
      },
      "required": [
        "phone"
      ]
    },
    "userv2UserServiceUnlockUserBody": {
      "type": "object"
    },
    "userv2UserServiceUpdateHumanUserBody": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "minnie-mouse",
          "maxLength": 200,
          "minLength": 1
        },
        "profile": {
          "$ref": "#/definitions/userv2SetHumanProfile"
        },
        "email": {
          "$ref": "#/definitions/userv2SetHumanEmail"
        },
        "phone": {
          "$ref": "#/definitions/userv2SetHumanPhone"
        },
        "password": {
          "$ref": "#/definitions/userv2SetPassword"
        }
      }
    },
    "userv2UserServiceVerifyEmailBody": {
      "type": "object",
      "properties": {
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "\"the verification code generated during the set email request\"",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "verificationCode"
      ]
    },
    "userv2UserServiceVerifyPasskeyRegistrationBody": {
      "type": "object",
      "properties": {
        "publicKeyCredential": {
          "type": "object",
          "example": {
            "type": "public-key",
            "id": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "rawId": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "response": {
              "attestationObject": "o2NmbXRmcGFja2VkZ2F0dFN0bXSiY2FsZyZjc2lnWEcwRQIgRKS3VpeE9tfExXRzkoUKnG4rQWPvtSSt4YtDGgTx32oCIQDPey-2YJ4uIg-QCM4jj6aE2U3tgMFM_RP7Efx6xRu3JGhhdXRoRGF0YVikSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAADju76085Yhmlt1CEOHkwLQAIKWsFWqxeMT8SxZnwp0ZMF1nk6yhs2m3AIvdixCNVgtNpQECAyYgASFYIMGUDSP2FAQn2MIfPMy7cyB_Y30VqixVgGULTBtFjfRiIlggjUGfQo3_-CrMmH3S-ZQkFKWKnNBQEAMkFtG-9A4zqW0",
              "clientDataJSON": "eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiQlhXdHh0WGxJeFZZa0pHT1dVaUVmM25zby02aXZKdWw2YmNmWHdMVlFIayIsIm9yaWdpbiI6Imh0dHBzOi8vbG9jYWxob3N0OjgwODAifQ"
            }
          },
          "description": "PublicKeyCredential Interface. Generated helper methods populate the field from JSON created by a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#publickeycredential",
          "maxLength": 1048576,
          "minLength": 55
        },
        "passkeyName": {
          "type": "string",
          "example": "fido key",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "publicKeyCredential",
        "passkeyName"
      ]
    },
    "userv2UserServiceVerifyPhoneBody": {
      "type": "object",
      "properties": {
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "\"the verification code generated during the set phone request\"",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "verificationCode"
      ]
    },
    "userv2UserServiceVerifyTOTPRegistrationBody": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "123456",
          "description": "Code generated by TOTP app or device"
        }
      },
      "required": [
        "code"
      ]
    },
    "userv2UserServiceVerifyU2FRegistrationBody": {
      "type": "object",
      "properties": {
        "publicKeyCredential": {
          "type": "object",
          "example": {
            "type": "public-key",
            "id": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "rawId": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "response": {
              "attestationObject": "o2NmbXRmcGFja2VkZ2F0dFN0bXSiY2FsZyZjc2lnWEcwRQIgRKS3VpeE9tfExXRzkoUKnG4rQWPvtSSt4YtDGgTx32oCIQDPey-2YJ4uIg-QCM4jj6aE2U3tgMFM_RP7Efx6xRu3JGhhdXRoRGF0YVikSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAADju76085Yhmlt1CEOHkwLQAIKWsFWqxeMT8SxZnwp0ZMF1nk6yhs2m3AIvdixCNVgtNpQECAyYgASFYIMGUDSP2FAQn2MIfPMy7cyB_Y30VqixVgGULTBtFjfRiIlggjUGfQo3_-CrMmH3S-ZQkFKWKnNBQEAMkFtG-9A4zqW0",
              "clientDataJSON": "eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiQlhXdHh0WGxJeFZZa0pHT1dVaUVmM25zby02aXZKdWw2YmNmWHdMVlFIayIsIm9yaWdpbiI6Imh0dHBzOi8vbG9jYWxob3N0OjgwODAifQ"
            }
          },
          "description": "PublicKeyCredential Interface. Generated helper methods populate the field from JSON created by a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#publickeycredential",
          "maxLength": 1048576,
          "minLength": 55
        },
        "tokenName": {
          "type": "string",
          "example": "fido key",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "publicKeyCredential",
        "tokenName"
      ]
    },
    "userv2UserState": {
      "type": "string",
      "enum": [
        "USER_STATE_UNSPECIFIED",
        "USER_STATE_ACTIVE",
        "USER_STATE_INACTIVE",
        "USER_STATE_DELETED",
        "USER_STATE_LOCKED",
        "USER_STATE_INITIAL"
      ],
      "default": "USER_STATE_UNSPECIFIED"
    },
    "userv2VerifyEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2VerifyPasskeyRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2VerifyPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2VerifyTOTPRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2VerifyU2FRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "userv2betaAccessTokenType": {
      "type": "string",
      "enum": [
        "ACCESS_TOKEN_TYPE_BEARER",
        "ACCESS_TOKEN_TYPE_JWT"
      ],
      "default": "ACCESS_TOKEN_TYPE_BEARER"
    },
    "userv2betaAddHumanUserRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "optionally set your own id unique for the user.",
          "maxLength": 200,
          "minLength": 1
        },
        "username": {
          "type": "string",
          "example": "minnie-mouse",
          "description": "optionally set a unique username, if none is provided the email will be used.",
          "maxLength": 200,
          "minLength": 1
        },
        "organization": {
          "$ref": "#/definitions/objectv2betaOrganization"
        },
        "profile": {
          "$ref": "#/definitions/userv2betaSetHumanProfile"
        },
        "email": {
          "$ref": "#/definitions/userv2betaSetHumanEmail"
        },
        "phone": {
          "$ref": "#/definitions/userv2betaSetHumanPhone"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv2betaSetMetadataEntry"
          }
        },
        "password": {
          "$ref": "#/definitions/userv2betaPassword"
        },
        "hashedPassword": {
          "$ref": "#/definitions/userv2betaHashedPassword"
        },
        "idpLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv2betaIDPLink"
          }
        },
        "totpSecret": {
          "type": "string",
          "example": "TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK",
          "description": "An Implementation of RFC 6238 is used, with HMAC-SHA-1 and time-step of 30 seconds.\nCurrently no other options are supported, and if anything different is used the validation will fail.",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "profile",
        "email"
      ]
    },
    "userv2betaAddHumanUserResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "emailCode": {
          "type": "string"
        },
        "phoneCode": {
          "type": "string"
        }
      }
    },
    "userv2betaAddIDPLinkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaAddOTPEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaAddOTPSMSResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaAndQuery": {
      "type": "object",
      "properties": {
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeluserv2betaSearchQuery"
          },
          "description": "the sub queries to 'AND'"
        }
      },
      "description": "Connect multiple sub-condition with and AND operator."
    },
    "userv2betaAuthenticationMethodType": {
      "type": "string",
      "enum": [
        "AUTHENTICATION_METHOD_TYPE_UNSPECIFIED",
        "AUTHENTICATION_METHOD_TYPE_PASSWORD",
        "AUTHENTICATION_METHOD_TYPE_PASSKEY",
        "AUTHENTICATION_METHOD_TYPE_IDP",
        "AUTHENTICATION_METHOD_TYPE_TOTP",
        "AUTHENTICATION_METHOD_TYPE_U2F",
        "AUTHENTICATION_METHOD_TYPE_OTP_SMS",
        "AUTHENTICATION_METHOD_TYPE_OTP_EMAIL"
      ],
      "default": "AUTHENTICATION_METHOD_TYPE_UNSPECIFIED"
    },
    "userv2betaCreatePasskeyRegistrationLinkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "code": {
          "$ref": "#/definitions/userv2betaPasskeyRegistrationCode",
          "description": "\"one time code generated by ZITADEL; required to start the passkey registration without user authentication\"",
          "title": "in case the medium was set to return_code, the code will be returned"
        }
      }
    },
    "userv2betaDeactivateUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaDeleteUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaDisplayNameQuery": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "example": "Gigi Giraffe",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2betaTextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific display name.",
      "required": [
        "displayName"
      ]
    },
    "userv2betaEmailQuery": {
      "type": "object",
      "properties": {
        "emailAddress": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "email address of the user",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/objectv2betaTextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific email.",
      "required": [
        "emailAddress"
      ]
    },
    "userv2betaFirstNameQuery": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Gigi",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2betaTextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific first name.",
      "required": [
        "firstName"
      ]
    },
    "userv2betaGender": {
      "type": "string",
      "enum": [
        "GENDER_UNSPECIFIED",
        "GENDER_FEMALE",
        "GENDER_MALE",
        "GENDER_DIVERSE"
      ],
      "default": "GENDER_UNSPECIFIED"
    },
    "userv2betaGetUserByIDResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails",
          "title": "deprecated: details is moved into user"
        },
        "user": {
          "$ref": "#/definitions/userv2betaUser"
        }
      }
    },
    "userv2betaHashedPassword": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "example": "$2a$12$lJ08fqVr8bFJilRVnDT9QeULI7YW.nT3iwUv6dyg0aCrfm3UY8XR2",
          "description": "\"Encoded hash of a password in Modular Crypt Format: https://zitadel.com/docs/concepts/architecture/secrets#hashed-secrets\"",
          "maxLength": 200,
          "minLength": 1
        },
        "changeRequired": {
          "type": "boolean"
        }
      },
      "required": [
        "hash"
      ]
    },
    "userv2betaHumanEmail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "mini@mouse.com",
          "maxLength": 200,
          "minLength": 1
        },
        "isVerified": {
          "type": "boolean"
        }
      }
    },
    "userv2betaHumanPhone": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41791234567",
          "maxLength": 200
        },
        "isVerified": {
          "type": "boolean"
        }
      }
    },
    "userv2betaHumanProfile": {
      "type": "object",
      "properties": {
        "givenName": {
          "type": "string",
          "example": "Minnie",
          "maxLength": 200,
          "minLength": 1
        },
        "familyName": {
          "type": "string",
          "example": "Mouse",
          "maxLength": 200,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "example": "Mini",
          "maxLength": 200
        },
        "displayName": {
          "type": "string",
          "example": "Minnie Mouse",
          "maxLength": 200
        },
        "preferredLanguage": {
          "type": "string",
          "example": "en",
          "maxLength": 10
        },
        "gender": {
          "$ref": "#/definitions/userv2betaGender",
          "example": "GENDER_FEMALE"
        },
        "avatarUrl": {
          "type": "string",
          "example": "https://api.zitadel.ch/assets/v1/avatar-32432jkh4kj32",
          "description": "avatar URL of the user"
        }
      }
    },
    "userv2betaHumanUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "Unique identifier of the user."
        },
        "state": {
          "$ref": "#/definitions/userv2betaUserState",
          "description": "current state of the user"
        },
        "username": {
          "type": "string",
          "example": "minnie-mouse",
          "description": "Username of the user, which can be globally unique or unique on organization level."
        },
        "loginNames": {
          "type": "array",
          "example": [
            "gigi@zitadel.com",
            "gigi@zitadel.zitadel.ch"
          ],
          "items": {
            "type": "string"
          },
          "description": "Possible usable login names for the user."
        },
        "preferredLoginName": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "Preferred login name of the user."
        },
        "profile": {
          "$ref": "#/definitions/userv2betaHumanProfile",
          "description": "Profile information of the user."
        },
        "email": {
          "$ref": "#/definitions/userv2betaHumanEmail",
          "description": "Email of the user, if defined."
        },
        "phone": {
          "$ref": "#/definitions/userv2betaHumanPhone",
          "description": "Phone of the user, if defined."
        },
        "passwordChangeRequired": {
          "type": "boolean",
          "description": "User is required to change the used password on the next login."
        },
        "passwordChanged": {
          "type": "string",
          "format": "date-time",
          "description": "The time the user last changed their password."
        }
      }
    },
    "userv2betaIDPInformation": {
      "type": "object",
      "properties": {
        "oauth": {
          "$ref": "#/definitions/userv2betaIDPOAuthAccessInformation",
          "description": "OAuth/OIDC access (and id_token) returned by the identity provider"
        },
        "ldap": {
          "$ref": "#/definitions/userv2betaIDPLDAPAccessInformation",
          "description": "LDAP entity attributes returned by the identity provider"
        },
        "saml": {
          "$ref": "#/definitions/userv2betaIDPSAMLAccessInformation",
          "description": "SAMLResponse returned by the identity provider"
        },
        "idpId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "ID of the identity provider"
        },
        "userId": {
          "type": "string",
          "example": "6516849804890468048461403518",
          "description": "ID of the user of the identity provider"
        },
        "userName": {
          "type": "string",
          "example": "user@external.com",
          "description": "username of the user of the identity provider"
        },
        "rawInformation": {
          "type": "object",
          "description": "complete information returned by the identity provider"
        }
      }
    },
    "userv2betaIDPIntent": {
      "type": "object",
      "properties": {
        "idpIntentId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "ID of the IDP intent",
          "maxLength": 200,
          "minLength": 1
        },
        "idpIntentToken": {
          "type": "string",
          "example": "SJKL3ioIDpo342ioqw98fjp3sdf32wahb=",
          "description": "token of the IDP intent",
          "maxLength": 200,
          "minLength": 1
        },
        "userId": {
          "type": "string",
          "example": "163840776835432345",
          "description": "ID of the ZITADEL user if external user already linked",
          "maxLength": 200
        }
      }
    },
    "userv2betaIDPLDAPAccessInformation": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object"
        }
      }
    },
    "userv2betaIDPLink": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "ID of the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "userId": {
          "type": "string",
          "example": "6516849804890468048461403518",
          "description": "ID of the user of the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "userName": {
          "type": "string",
          "example": "user@external.com",
          "description": "username of the user of the identity provider",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv2betaIDPOAuthAccessInformation": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        }
      }
    },
    "userv2betaIDPSAMLAccessInformation": {
      "type": "object",
      "properties": {
        "assertion": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "userv2betaInUserEmailsQuery": {
      "type": "object",
      "properties": {
        "userEmails": {
          "type": "array",
          "example": [
            "test@example.com",
            "test@example.org"
          ],
          "items": {
            "type": "string"
          },
          "description": "the emails of the users to include"
        }
      },
      "description": "Query for users with email in list of emails."
    },
    "userv2betaInUserIDQuery": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "example": [
            "69629023906488334",
            "69622366012355662"
          ],
          "items": {
            "type": "string"
          },
          "description": "the ids of the users to include"
        }
      },
      "description": "Query for users with ID in list of IDs."
    },
    "userv2betaLDAPCredentials": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "username",
          "description": "Username used to login through LDAP",
          "maxLength": 200,
          "minLength": 1
        },
        "password": {
          "type": "string",
          "example": "Password1!",
          "description": "Password used to login through LDAP",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv2betaLastNameQuery": {
      "type": "object",
      "properties": {
        "lastName": {
          "type": "string",
          "example": "Giraffe",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2betaTextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific last name.",
      "required": [
        "lastName"
      ]
    },
    "userv2betaListAuthenticationMethodTypesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaListDetails"
        },
        "authMethodTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userv2betaAuthenticationMethodType"
          }
        }
      }
    },
    "userv2betaListUsersRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/objectv2betaListQuery",
          "title": "list limitations and ordering"
        },
        "sortingColumn": {
          "$ref": "#/definitions/userv2betaUserFieldName",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeluserv2betaSearchQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "userv2betaListUsersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaListDetails"
        },
        "sortingColumn": {
          "$ref": "#/definitions/userv2betaUserFieldName"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv2betaUser"
          }
        }
      }
    },
    "userv2betaLockUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaLoginNameQuery": {
      "type": "object",
      "properties": {
        "loginName": {
          "type": "string",
          "example": "gigi@zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2betaTextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific state.",
      "required": [
        "loginName"
      ]
    },
    "userv2betaMachineUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "zitadel"
        },
        "description": {
          "type": "string",
          "example": "The one and only IAM"
        },
        "hasSecret": {
          "type": "boolean",
          "example": "true"
        },
        "accessTokenType": {
          "$ref": "#/definitions/userv2betaAccessTokenType",
          "description": "Type of access token to receive"
        }
      }
    },
    "userv2betaNickNameQuery": {
      "type": "object",
      "properties": {
        "nickName": {
          "type": "string",
          "example": "Gigi",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2betaTextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific nickname.",
      "required": [
        "nickName"
      ]
    },
    "userv2betaNotQuery": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadeluserv2betaSearchQuery",
          "description": "the sub query to negate (NOT)"
        }
      },
      "description": "Negate the sub-condition."
    },
    "userv2betaNotificationType": {
      "type": "string",
      "enum": [
        "NOTIFICATION_TYPE_Unspecified",
        "NOTIFICATION_TYPE_Email",
        "NOTIFICATION_TYPE_SMS"
      ],
      "default": "NOTIFICATION_TYPE_Unspecified"
    },
    "userv2betaOrQuery": {
      "type": "object",
      "properties": {
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeluserv2betaSearchQuery"
          },
          "description": "the sub queries to 'OR'"
        }
      },
      "description": "Connect multiple sub-condition with and OR operator."
    },
    "userv2betaOrganizationIdQuery": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "example": "69629023906488334",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "description": "Query for users under a specific organization as resource owner.",
      "required": [
        "organizationId"
      ]
    },
    "userv2betaPasskeyAuthenticator": {
      "type": "string",
      "enum": [
        "PASSKEY_AUTHENTICATOR_UNSPECIFIED",
        "PASSKEY_AUTHENTICATOR_PLATFORM",
        "PASSKEY_AUTHENTICATOR_CROSS_PLATFORM"
      ],
      "default": "PASSKEY_AUTHENTICATOR_UNSPECIFIED"
    },
    "userv2betaPasskeyRegistrationCode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "e2a48d6a-362b-4db6-a1fb-34feab84dc62",
          "description": "\"id to the one time code generated by ZITADEL\"",
          "maxLength": 200
        },
        "code": {
          "type": "string",
          "example": "SomeSpecialCode",
          "description": "\"one time code generated by ZITADEL\"",
          "maxLength": 200
        }
      },
      "required": [
        "id",
        "code"
      ]
    },
    "userv2betaPassword": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "example": "Secr3tP4ssw0rd!",
          "maxLength": 200,
          "minLength": 1
        },
        "changeRequired": {
          "type": "boolean"
        }
      },
      "required": [
        "password"
      ]
    },
    "userv2betaPasswordResetResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the medium was set to return_code, the code will be returned"
        }
      }
    },
    "userv2betaPhoneQuery": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "example": "+41791234567",
          "description": "Phone number of the user",
          "maxLength": 20,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2betaTextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific phone.",
      "required": [
        "number"
      ]
    },
    "userv2betaReactivateUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaRedirectURLs": {
      "type": "object",
      "properties": {
        "successUrl": {
          "type": "string",
          "example": "https://custom.com/login/idp/success",
          "description": "URL on which the user will be redirected after a successful login",
          "maxLength": 2048,
          "minLength": 1
        },
        "failureUrl": {
          "type": "string",
          "example": "https://custom.com/login/idp/fail",
          "description": "URL on which the user will be redirected after a failed login",
          "maxLength": 2048,
          "minLength": 1
        }
      }
    },
    "userv2betaRegisterPasskeyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "passkeyId": {
          "type": "string",
          "example": "163840776835432705"
        },
        "publicKeyCredentialCreationOptions": {
          "type": "object",
          "example": {
            "publicKey": {
              "attestation": "none",
              "authenticatorSelection": {
                "userVerification": "required"
              },
              "challenge": "XaMYwWOZ5hj6pwtwJJlpcI-ExkO5TxevBMG4R8DoKQQ",
              "excludeCredentials": [
                {
                  "id": "tVp1QfYhT8DkyEHVrv7blnpAo2YJzbZgZNBf7zPs6CI",
                  "type": "public-key"
                }
              ],
              "pubKeyCredParams": [
                {
                  "alg": -7,
                  "type": "public-key"
                }
              ],
              "rp": {
                "id": "localhost",
                "name": "ZITADEL"
              },
              "timeout": 300000,
              "user": {
                "displayName": "Tim Mohlmann",
                "id": "MjE1NTk4MDAwNDY0OTk4OTQw",
                "name": "tim"
              }
            }
          },
          "description": "Options for Credential Creation (dictionary PublicKeyCredentialCreationOptions). Generated helper methods transform the field to JSON, for use in a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialcreationoptions"
        }
      }
    },
    "userv2betaRegisterTOTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "uri": {
          "type": "string",
          "example": "otpauth://totp/ZITADEL:gigi@acme.zitadel.cloud?algorithm=SHA1\u0026digits=6\u0026issuer=ZITADEL\u0026period=30\u0026secret=TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK"
        },
        "secret": {
          "type": "string",
          "example": "TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK"
        }
      }
    },
    "userv2betaRegisterU2FResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "u2fId": {
          "type": "string",
          "example": "163840776835432705"
        },
        "publicKeyCredentialCreationOptions": {
          "type": "object",
          "example": {
            "publicKey": {
              "attestation": "none",
              "authenticatorSelection": {
                "userVerification": "required"
              },
              "challenge": "XaMYwWOZ5hj6pwtwJJlpcI-ExkO5TxevBMG4R8DoKQQ",
              "excludeCredentials": [
                {
                  "id": "tVp1QfYhT8DkyEHVrv7blnpAo2YJzbZgZNBf7zPs6CI",
                  "type": "public-key"
                }
              ],
              "pubKeyCredParams": [
                {
                  "alg": -7,
                  "type": "public-key"
                }
              ],
              "rp": {
                "id": "localhost",
                "name": "ZITADEL"
              },
              "timeout": 300000,
              "user": {
                "displayName": "Tim Mohlmann",
                "id": "MjE1NTk4MDAwNDY0OTk4OTQw",
                "name": "tim"
              }
            }
          },
          "description": "Options for Credential Creation (dictionary PublicKeyCredentialCreationOptions). Generated helper methods transform the field to JSON, for use in a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialcreationoptions"
        }
      }
    },
    "userv2betaRemoveOTPEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaRemoveOTPSMSResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaRemovePhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaRemoveTOTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaResendEmailCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the verification was set to return_code, the code will be returned"
        }
      }
    },
    "userv2betaResendPhoneCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the verification was set to return_code, the code will be returned"
        }
      }
    },
    "userv2betaRetrieveIdentityProviderIntentResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "idpInformation": {
          "$ref": "#/definitions/userv2betaIDPInformation"
        },
        "userId": {
          "type": "string",
          "example": "163840776835432345",
          "description": "ID of the user in ZITADEL if external user is linked"
        }
      }
    },
    "userv2betaReturnEmailVerificationCode": {
      "type": "object"
    },
    "userv2betaReturnPasskeyRegistrationCode": {
      "type": "object"
    },
    "userv2betaReturnPasswordResetCode": {
      "type": "object"
    },
    "userv2betaReturnPhoneVerificationCode": {
      "type": "object"
    },
    "userv2betaSendEmailVerificationCode": {
      "type": "object",
      "properties": {
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/email/verify?userID={{.UserID}}\u0026code={{.Code}}\u0026orgID={{.OrgID}}",
          "description": "\"Optionally set a url_template, which will be used in the verification mail sent by ZITADEL to guide the user to your verification page. If no template is set, the default ZITADEL url will be used.\"",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv2betaSendPasskeyRegistrationLink": {
      "type": "object",
      "properties": {
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/passkey/register?userID={{.UserID}}\u0026orgID={{.OrgID}}\u0026codeID={{.CodeID}}\u0026code={{.Code}}",
          "description": "\"Optionally set a url_template, which will be used in the mail sent by ZITADEL to guide the user to your passkey registration page. If no template is set, the default ZITADEL url will be used.\"",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv2betaSendPasswordResetLink": {
      "type": "object",
      "properties": {
        "notificationType": {
          "$ref": "#/definitions/userv2betaNotificationType"
        },
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/password/changey?userID={{.UserID}}\u0026code={{.Code}}\u0026orgID={{.OrgID}}",
          "description": "\"Optionally set a url_template, which will be used in the password reset mail sent by ZITADEL to guide the user to your password change page. If no template is set, the default ZITADEL url will be used.\"",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv2betaSendPhoneVerificationCode": {
      "type": "object"
    },
    "userv2betaSetEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the verification was set to return_code, the code will be returned"
        }
      }
    },
    "userv2betaSetHumanEmail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "mini@mouse.com",
          "maxLength": 200,
          "minLength": 1
        },
        "sendCode": {
          "$ref": "#/definitions/userv2betaSendEmailVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2betaReturnEmailVerificationCode"
        },
        "isVerified": {
          "type": "boolean"
        }
      },
      "required": [
        "email"
      ]
    },
    "userv2betaSetHumanPhone": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41791234567",
          "maxLength": 200
        },
        "sendCode": {
          "$ref": "#/definitions/userv2betaSendPhoneVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2betaReturnPhoneVerificationCode"
        },
        "isVerified": {
          "type": "boolean"
        }
      }
    },
    "userv2betaSetHumanProfile": {
      "type": "object",
      "properties": {
        "givenName": {
          "type": "string",
          "example": "Minnie",
          "maxLength": 200,
          "minLength": 1
        },
        "familyName": {
          "type": "string",
          "example": "Mouse",
          "maxLength": 200,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "example": "Mini",
          "maxLength": 200
        },
        "displayName": {
          "type": "string",
          "example": "Minnie Mouse",
          "maxLength": 200
        },
        "preferredLanguage": {
          "type": "string",
          "example": "en",
          "maxLength": 10
        },
        "gender": {
          "$ref": "#/definitions/userv2betaGender",
          "example": "GENDER_FEMALE"
        }
      },
      "required": [
        "givenName",
        "familyName"
      ]
    },
    "userv2betaSetMetadataEntry": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "my-key",
          "maxLength": 200,
          "minLength": 1
        },
        "value": {
          "type": "string",
          "format": "byte",
          "example": "VGhpcyBpcyBteSB0ZXN0IHZhbHVl",
          "description": "The value has to be base64 encoded.",
          "maxLength": 500000,
          "minLength": 1
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "userv2betaSetPassword": {
      "type": "object",
      "properties": {
        "password": {
          "$ref": "#/definitions/userv2betaPassword"
        },
        "hashedPassword": {
          "$ref": "#/definitions/userv2betaHashedPassword"
        },
        "currentPassword": {
          "type": "string",
          "example": "Secr3tP4ssw0rd!",
          "maxLength": 200,
          "minLength": 1
        },
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "\"the verification code generated during password reset request\"",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "currentPassword",
        "verificationCode"
      ]
    },
    "userv2betaSetPasswordResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaSetPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the verification was set to return_code, the code will be returned"
        }
      }
    },
    "userv2betaStartIdentityProviderIntentRequest": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "ID for existing identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "urls": {
          "$ref": "#/definitions/userv2betaRedirectURLs"
        },
        "ldap": {
          "$ref": "#/definitions/userv2betaLDAPCredentials"
        }
      }
    },
    "userv2betaStartIdentityProviderIntentResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "authUrl": {
          "type": "string",
          "example": "https://accounts.google.com/o/oauth2/v2/auth?client_id=clientID\u0026callback=https%3A%2F%2Fzitadel.cloud%2Fidps%2Fcallback",
          "description": "URL to which the client should redirect"
        },
        "idpIntent": {
          "$ref": "#/definitions/userv2betaIDPIntent",
          "description": "IDP Intent information"
        },
        "postForm": {
          "type": "string",
          "format": "byte",
          "description": "POST call information"
        }
      }
    },
    "userv2betaStateQuery": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/userv2betaUserState",
          "description": "current state of the user"
        }
      },
      "description": "Query for users with a specific state.",
      "required": [
        "state"
      ]
    },
    "userv2betaType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_HUMAN",
        "TYPE_MACHINE"
      ],
      "default": "TYPE_UNSPECIFIED"
    },
    "userv2betaTypeQuery": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/userv2betaType",
          "description": "the type of the user"
        }
      },
      "description": "Query for users with a specific type.",
      "required": [
        "type"
      ]
    },
    "userv2betaUnlockUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaUpdateHumanUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "emailCode": {
          "type": "string"
        },
        "phoneCode": {
          "type": "string"
        }
      }
    },
    "userv2betaUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a"
        },
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        },
        "state": {
          "$ref": "#/definitions/userv2betaUserState",
          "description": "current state of the user"
        },
        "username": {
          "type": "string",
          "example": "minnie-mouse"
        },
        "loginNames": {
          "type": "array",
          "example": [
            "gigi@zitadel.com",
            "gigi@zitadel.zitadel.ch"
          ],
          "items": {
            "type": "string"
          }
        },
        "preferredLoginName": {
          "type": "string",
          "example": "gigi@zitadel.com"
        },
        "human": {
          "$ref": "#/definitions/userv2betaHumanUser",
          "description": "one of type use human or machine"
        },
        "machine": {
          "$ref": "#/definitions/userv2betaMachineUser",
          "description": "one of type use human or machine"
        }
      }
    },
    "userv2betaUserFieldName": {
      "type": "string",
      "enum": [
        "USER_FIELD_NAME_UNSPECIFIED",
        "USER_FIELD_NAME_USER_NAME",
        "USER_FIELD_NAME_FIRST_NAME",
        "USER_FIELD_NAME_LAST_NAME",
        "USER_FIELD_NAME_NICK_NAME",
        "USER_FIELD_NAME_DISPLAY_NAME",
        "USER_FIELD_NAME_EMAIL",
        "USER_FIELD_NAME_STATE",
        "USER_FIELD_NAME_TYPE",
        "USER_FIELD_NAME_CREATION_DATE"
      ],
      "default": "USER_FIELD_NAME_UNSPECIFIED"
    },
    "userv2betaUserNameQuery": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "example": "gigi-giraffe",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2betaTextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific user name.",
      "required": [
        "userName"
      ]
    },
    "userv2betaUserServiceAddIDPLinkBody": {
      "type": "object",
      "properties": {
        "idpLink": {
          "$ref": "#/definitions/userv2betaIDPLink"
        }
      }
    },
    "userv2betaUserServiceAddOTPEmailBody": {
      "type": "object"
    },
    "userv2betaUserServiceAddOTPSMSBody": {
      "type": "object"
    },
    "userv2betaUserServiceCreatePasskeyRegistrationLinkBody": {
      "type": "object",
      "properties": {
        "sendLink": {
          "$ref": "#/definitions/userv2betaSendPasskeyRegistrationLink"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2betaReturnPasskeyRegistrationCode"
        }
      }
    },
    "userv2betaUserServiceDeactivateUserBody": {
      "type": "object"
    },
    "userv2betaUserServiceLockUserBody": {
      "type": "object"
    },
    "userv2betaUserServicePasswordResetBody": {
      "type": "object",
      "properties": {
        "sendLink": {
          "$ref": "#/definitions/userv2betaSendPasswordResetLink"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2betaReturnPasswordResetCode"
        }
      }
    },
    "userv2betaUserServiceReactivateUserBody": {
      "type": "object"
    },
    "userv2betaUserServiceRegisterPasskeyBody": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/userv2betaPasskeyRegistrationCode",
          "description": "\"one time code generated by ZITADEL; required to start the passkey registration without user authentication\""
        },
        "authenticator": {
          "$ref": "#/definitions/userv2betaPasskeyAuthenticator",
          "description": "\"Optionally specify the authenticator type of the passkey device (platform or cross-platform). If none is provided, both values are allowed.\""
        },
        "domain": {
          "type": "string",
          "description": "\"Domain on which the user is authenticated.\""
        }
      }
    },
    "userv2betaUserServiceRegisterTOTPBody": {
      "type": "object"
    },
    "userv2betaUserServiceRegisterU2FBody": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "description": "\"Domain on which the user is authenticated.\""
        }
      }
    },
    "userv2betaUserServiceRemovePhoneBody": {
      "type": "object"
    },
    "userv2betaUserServiceResendEmailCodeBody": {
      "type": "object",
      "properties": {
        "sendCode": {
          "$ref": "#/definitions/userv2betaSendEmailVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2betaReturnEmailVerificationCode"
        }
      }
    },
    "userv2betaUserServiceResendPhoneCodeBody": {
      "type": "object",
      "properties": {
        "sendCode": {
          "$ref": "#/definitions/userv2betaSendPhoneVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2betaReturnPhoneVerificationCode"
        }
      }
    },
    "userv2betaUserServiceRetrieveIdentityProviderIntentBody": {
      "type": "object",
      "properties": {
        "idpIntentToken": {
          "type": "string",
          "example": "SJKL3ioIDpo342ioqw98fjp3sdf32wahb=",
          "description": "token of the idp intent, previously returned on the success response of the IDP callback",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv2betaUserServiceSetEmailBody": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "mini@mouse.com",
          "maxLength": 200,
          "minLength": 1
        },
        "sendCode": {
          "$ref": "#/definitions/userv2betaSendEmailVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2betaReturnEmailVerificationCode"
        },
        "isVerified": {
          "type": "boolean"
        }
      },
      "required": [
        "email"
      ]
    },
    "userv2betaUserServiceSetPasswordBody": {
      "type": "object",
      "properties": {
        "newPassword": {
          "$ref": "#/definitions/userv2betaPassword"
        },
        "currentPassword": {
          "type": "string",
          "example": "Secr3tP4ssw0rd!",
          "maxLength": 200,
          "minLength": 1
        },
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "\"the verification code generated during password reset request\"",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "currentPassword",
        "verificationCode"
      ]
    },
    "userv2betaUserServiceSetPhoneBody": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41791234567",
          "maxLength": 200,
          "minLength": 1
        },
        "sendCode": {
          "$ref": "#/definitions/userv2betaSendPhoneVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/userv2betaReturnPhoneVerificationCode"
        },
        "isVerified": {
          "type": "boolean"
        }
      },
      "required": [
        "phone"
      ]
    },
    "userv2betaUserServiceUnlockUserBody": {
      "type": "object"
    },
    "userv2betaUserServiceVerifyEmailBody": {
      "type": "object",
      "properties": {
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "\"the verification code generated during the set email request\"",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "verificationCode"
      ]
    },
    "userv2betaUserServiceVerifyPasskeyRegistrationBody": {
      "type": "object",
      "properties": {
        "publicKeyCredential": {
          "type": "object",
          "example": {
            "type": "public-key",
            "id": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "rawId": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "response": {
              "attestationObject": "o2NmbXRmcGFja2VkZ2F0dFN0bXSiY2FsZyZjc2lnWEcwRQIgRKS3VpeE9tfExXRzkoUKnG4rQWPvtSSt4YtDGgTx32oCIQDPey-2YJ4uIg-QCM4jj6aE2U3tgMFM_RP7Efx6xRu3JGhhdXRoRGF0YVikSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAADju76085Yhmlt1CEOHkwLQAIKWsFWqxeMT8SxZnwp0ZMF1nk6yhs2m3AIvdixCNVgtNpQECAyYgASFYIMGUDSP2FAQn2MIfPMy7cyB_Y30VqixVgGULTBtFjfRiIlggjUGfQo3_-CrMmH3S-ZQkFKWKnNBQEAMkFtG-9A4zqW0",
              "clientDataJSON": "eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiQlhXdHh0WGxJeFZZa0pHT1dVaUVmM25zby02aXZKdWw2YmNmWHdMVlFIayIsIm9yaWdpbiI6Imh0dHBzOi8vbG9jYWxob3N0OjgwODAifQ"
            }
          },
          "description": "PublicKeyCredential Interface. Generated helper methods populate the field from JSON created by a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#publickeycredential",
          "maxLength": 1048576,
          "minLength": 55
        },
        "passkeyName": {
          "type": "string",
          "example": "fido key",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "publicKeyCredential",
        "passkeyName"
      ]
    },
    "userv2betaUserServiceVerifyPhoneBody": {
      "type": "object",
      "properties": {
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "\"the verification code generated during the set phone request\"",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "verificationCode"
      ]
    },
    "userv2betaUserServiceVerifyTOTPRegistrationBody": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "123456",
          "description": "Code generated by TOTP app or device"
        }
      },
      "required": [
        "code"
      ]
    },
    "userv2betaUserServiceVerifyU2FRegistrationBody": {
      "type": "object",
      "properties": {
        "publicKeyCredential": {
          "type": "object",
          "example": {
            "type": "public-key",
            "id": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "rawId": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "response": {
              "attestationObject": "o2NmbXRmcGFja2VkZ2F0dFN0bXSiY2FsZyZjc2lnWEcwRQIgRKS3VpeE9tfExXRzkoUKnG4rQWPvtSSt4YtDGgTx32oCIQDPey-2YJ4uIg-QCM4jj6aE2U3tgMFM_RP7Efx6xRu3JGhhdXRoRGF0YVikSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAADju76085Yhmlt1CEOHkwLQAIKWsFWqxeMT8SxZnwp0ZMF1nk6yhs2m3AIvdixCNVgtNpQECAyYgASFYIMGUDSP2FAQn2MIfPMy7cyB_Y30VqixVgGULTBtFjfRiIlggjUGfQo3_-CrMmH3S-ZQkFKWKnNBQEAMkFtG-9A4zqW0",
              "clientDataJSON": "eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiQlhXdHh0WGxJeFZZa0pHT1dVaUVmM25zby02aXZKdWw2YmNmWHdMVlFIayIsIm9yaWdpbiI6Imh0dHBzOi8vbG9jYWxob3N0OjgwODAifQ"
            }
          },
          "description": "PublicKeyCredential Interface. Generated helper methods populate the field from JSON created by a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#publickeycredential",
          "maxLength": 1048576,
          "minLength": 55
        },
        "tokenName": {
          "type": "string",
          "example": "fido key",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "publicKeyCredential",
        "tokenName"
      ]
    },
    "userv2betaUserState": {
      "type": "string",
      "enum": [
        "USER_STATE_UNSPECIFIED",
        "USER_STATE_ACTIVE",
        "USER_STATE_INACTIVE",
        "USER_STATE_DELETED",
        "USER_STATE_LOCKED",
        "USER_STATE_INITIAL"
      ],
      "default": "USER_STATE_UNSPECIFIED"
    },
    "userv2betaVerifyEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaVerifyPasskeyRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaVerifyPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaVerifyTOTPRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv2betaVerifyU2FRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2betaDetails"
        }
      }
    },
    "userv3alphaContact": {
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/userv3alphaEmail",
          "description": "Email contact information of the user."
        },
        "phone": {
          "$ref": "#/definitions/userv3alphaPhone",
          "description": "Phone contact information of the user."
        }
      }
    },
    "userv3alphaCreateUser": {
      "type": "object",
      "properties": {
        "schemaId": {
          "type": "string",
          "example": "69629026806489455",
          "description": "Define the schema the user's data schema by providing it's ID.",
          "maxLength": 200,
          "minLength": 1
        },
        "data": {
          "type": "object",
          "example": {
            "name": "Gigi",
            "description": "the giraffe"
          }
        },
        "contact": {
          "$ref": "#/definitions/v3alphaSetContact",
          "description": "Set the contact information (email, phone) for the user."
        },
        "authenticators": {
          "$ref": "#/definitions/v3alphaSetAuthenticators",
          "description": "Set the initial authenticators of the user."
        },
        "userId": {
          "type": "string",
          "example": "69629026806489455",
          "description": "Optionally set a unique identifier of the user. If unset, ZITADEL will take care of it.",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "schemaId"
      ]
    },
    "userv3alphaDeactivateUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "userv3alphaDeleteUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "userv3alphaEmail": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "example": "mini@mouse.com",
          "description": "Email address of the user."
        },
        "isVerified": {
          "type": "boolean",
          "description": "IsVerified states if the email address has been verified to belong to the user."
        }
      }
    },
    "userv3alphaGetUser": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails",
          "description": "Details provide some base information (such as the last change date) of the user."
        },
        "schema": {
          "$ref": "#/definitions/v3alphaGetSchema",
          "description": "The schema the user and it's data is based on."
        },
        "data": {
          "type": "object",
          "example": {
            "name": "Gigi",
            "description": "the giraffe"
          }
        },
        "contact": {
          "$ref": "#/definitions/userv3alphaContact",
          "description": "Contact information for the user. ZITADEL will use this in case of internal notifications."
        },
        "authenticators": {
          "$ref": "#/definitions/v3alphaAuthenticators",
          "description": "The user's authenticators. They are used to identify and authenticate the user\nduring the authentication process."
        },
        "state": {
          "$ref": "#/definitions/resourcesuserv3alphaState",
          "description": "State of the user."
        }
      }
    },
    "userv3alphaIDPInformation": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string",
          "example": "69629026806489455",
          "description": "ID of the identity provider."
        },
        "userId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "ID of the user provided by the identity provider."
        },
        "userName": {
          "type": "string",
          "example": "user@external.com",
          "description": "Username of the user provided by the identity provider."
        },
        "rawInformation": {
          "type": "object",
          "description": "Complete information returned by the identity provider."
        },
        "oauth": {
          "$ref": "#/definitions/userv3alphaIDPOAuthAccessInformation",
          "description": "OAuth/OIDC access (and id_token) returned by the identity provider."
        },
        "ldap": {
          "$ref": "#/definitions/userv3alphaIDPLDAPAccessInformation",
          "title": "LDAP entity attributes returned by the identity provider"
        },
        "saml": {
          "$ref": "#/definitions/userv3alphaIDPSAMLAccessInformation",
          "title": "SAMLResponse returned by the identity provider"
        }
      }
    },
    "userv3alphaIDPLDAPAccessInformation": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "description": "The attributes of the user returned by the identity provider."
        }
      }
    },
    "userv3alphaIDPOAuthAccessInformation": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "example": "JWLKFSJlijorifjOJOIehjt8jOIEWJGh3tgiEN3WIUGH8Ehgiewhg",
          "description": "The access_token returned by the identity provider."
        },
        "idToken": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
          "description": "In case the provider returned an id_token."
        }
      }
    },
    "userv3alphaIDPSAMLAccessInformation": {
      "type": "object",
      "properties": {
        "assertion": {
          "type": "string",
          "format": "byte",
          "example": "PEFzc2VydGlvbiB4bWxucz11cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIElEPV9mNjc5NDE5MjliZGY5MTcyOTMyMyBJc3N1ZUluc3RhbnQ9MjAyNC0wMi0wOFQxMzo1MTozNy45NDdaIFZlcnNpb249Mi4wPjxJc3N1ZXIgeG1sbnM9dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiBOYW1lUXVhbGlmaWVyPSBTUE5hbWVRdWFsaWZpZXI9IEZvcm1hdD11cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDplbnRpdHkgU1BQcm92aWRlZElEPT5odHRwczovL3NhbWwuZXhhbXBsZS5jb20vZW50aXR5aWRcPC9Jc3N1ZXJcPlw8U2lnbmF0dXJlXD5cPFNwYWNlXD5cPC9TcGFjZVw+XDxUYWdcPlw8L1RhZ1w+XDwvU2lnbmF0dXJlXD5cPFN1YmplY3QgeG1sbnM9dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbj48TmFtZUlEIE5hbWVRdWFsaWZpZXI9IFNQTmFtZVF1YWxpZmllcj0gRm9ybWF0PXVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OmVtYWlsQWRkcmVzcyBTUFByb3ZpZGVkSUQ9PmphY2tzb25AZXhhbXBsZS5jb208L05hbWVJRD48U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlcj48U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgTm90T25PckFmdGVyPTIwMjQtMDItMDhUMTM6NTY6MzcuOTQ3WiBOb3RCZWZvcmU9MDAwMS0wMS0wMVQwMDowMDowMFogUmVjaXBpZW50PWh0dHBzOi8vZGVtby56aXRhZGVsLmNsb3VkL2lkcHMvMjUyODM0OTQ3NjU4NzA5NzYyL3NhbWwvYWNzIEluUmVzcG9uc2VUbz1pZC0yMGIxZGEyNWUzNzVhYWQyYmZmNjIxOGY2ZmUzMWRmMzYzNTRjMmI2IEFkZHJlc3M9PjwvU3ViamVjdENvbmZpcm1hdGlvbkRhdGE+PC9TdWJqZWN0Q29uZmlybWF0aW9uPjwvU3ViamVjdD48Q29uZGl0aW9ucyBOb3RCZWZvcmU9MjAyNC0wMi0wOFQxMzo0NjozNy45NDdaIE5vdE9uT3JBZnRlcj0yMDI0LTAyLTA4VDEzOjU2OjM3Ljk0N1o+PEF1ZGllbmNlUmVzdHJpY3Rpb24+PEF1ZGllbmNlPmh0dHBzOi8vZGVtby56aXRhZGVsLmNsb3VkL2lkcHMvMjUyODM0OTQ3NjU4NzA5NzYyL3NhbWwvbWV0YWRhdGFcPC9BdWRpZW5jZVw+XDwvQXVkaWVuY2VSZXN0cmljdGlvblw+XDwvQ29uZGl0aW9uc1w+XDxBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9MjAyNC0wMi0wOFQxMzo1MTozNy45NDdaIFNlc3Npb25JbmRleD1pZC0yMGIxZGEyNWUzNzVhYWQyYmZmNjIxOGY2ZmUzMWRmMzYzNTRjMmI2PjxBdXRobkNvbnRleHQ+PEF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkUHJvdGVjdGVkVHJhbnNwb3J0PC9BdXRobkNvbnRleHRDbGFzc1JlZj48L0F1dGhuQ29udGV4dD48L0F1dGhuU3RhdGVtZW50PjxBdHRyaWJ1dGVTdGF0ZW1lbnQ+PEF0dHJpYnV0ZSBGcmllbmRseU5hbWU9IE5hbWU9aWQgTmFtZUZvcm1hdD11cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OnVuc3BlY2lmaWVkPjxBdHRyaWJ1dGVWYWx1ZSB4bWxuczpfWE1MU2NoZW1hLWluc3RhbmNlPWh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIF9YTUxTY2hlbWEtaW5zdGFuY2U6dHlwZT14czpzdHJpbmc+MWRkYTlmYjQ5MWRjMDFiZDI0ZDI0MjNiYTJmMjJhZTU2MWY1NmRkZjIzNzZiMjlhMTFjODAyODFkMjEyMDFmOTwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBGcmllbmRseU5hbWU9IE5hbWU9ZW1haWwgTmFtZUZvcm1hdD11cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OnVuc3BlY2lmaWVkPjxBdHRyaWJ1dGVWYWx1ZSB4bWxuczpfWE1MU2NoZW1hLWluc3RhbmNlPWh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIF9YTUxTY2hlbWEtaW5zdGFuY2U6dHlwZT14czpzdHJpbmc+amFja3NvbkBleGFtcGxlLmNvbTwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBGcmllbmRseU5hbWU9IE5hbWU9Zmlyc3ROYW1lIE5hbWVGb3JtYXQ9dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDp1bnNwZWNpZmllZD48QXR0cmlidXRlVmFsdWUgeG1sbnM6X1hNTFNjaGVtYS1pbnN0YW5jZT1odHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSBfWE1MU2NoZW1hLWluc3RhbmNlOnR5cGU9eHM6c3RyaW5nPmphY2tzb248L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgRnJpZW5kbHlOYW1lPSBOYW1lPWxhc3ROYW1lIE5hbWVGb3JtYXQ9dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDp1bnNwZWNpZmllZD48QXR0cmlidXRlVmFsdWUgeG1sbnM6X1hNTFNjaGVtYS1pbnN0YW5jZT1odHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSBfWE1MU2NoZW1hLWluc3RhbmNlOnR5cGU9eHM6c3RyaW5nPmphY2tzb248L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjwvQXR0cmlidXRlU3RhdGVtZW50PjwvQXNzZXJ0aW9uPg==",
          "description": "The SAML assertion returned by the identity provider."
        }
      }
    },
    "userv3alphaIdentityProvider": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "IDP ID is the read-only unique identifier of the identity provider in ZITADEL."
        },
        "idpName": {
          "type": "string",
          "example": "google",
          "description": "IDP name is the name of the identity provider in ZITADEL."
        },
        "userId": {
          "type": "string",
          "example": "as-12-df-89",
          "description": "The user ID represents the ID provided by the identity provider.\nThis ID is used to link the user in ZITADEL with the identity provider."
        },
        "username": {
          "type": "string",
          "example": "gigi.long-neck@gmail.com",
          "description": "The username represents the username provided by the identity provider."
        }
      }
    },
    "userv3alphaLDAPCredentials": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "username",
          "description": "Username used to login through LDAP.",
          "maxLength": 200,
          "minLength": 1
        },
        "password": {
          "type": "string",
          "example": "Password1!",
          "description": "Password used to login through LDAP.",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "username",
        "password"
      ]
    },
    "userv3alphaLockUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "userv3alphaOTPEmail": {
      "type": "object",
      "properties": {
        "otpEmailId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "unique identifier of the one-time password (OTP) Email authenticator."
        },
        "address": {
          "type": "string",
          "example": "mini@mouse.com",
          "description": "The email address used for the OTP Email authenticator."
        },
        "isVerified": {
          "type": "boolean",
          "description": "State whether the OTP Email registration has been completed."
        }
      }
    },
    "userv3alphaOTPSMS": {
      "type": "object",
      "properties": {
        "otpSmsId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "unique identifier of the one-time password (OTP) SMS authenticator."
        },
        "phone": {
          "type": "string",
          "example": "+41791234567",
          "description": "The phone number used for the OTP SMS authenticator."
        },
        "isVerified": {
          "type": "boolean",
          "description": "State whether the OTP SMS registration has been completed."
        }
      }
    },
    "userv3alphaPassword": {
      "type": "object",
      "properties": {
        "lastChanged": {
          "type": "string",
          "format": "date-time",
          "example": "2019-04-01T08:45:00.000000Z",
          "description": "States the time the password was last changed."
        }
      }
    },
    "userv3alphaPatchUser": {
      "type": "object",
      "properties": {
        "schemaId": {
          "type": "string",
          "example": "69629026806489455",
          "maxLength": 200,
          "minLength": 1
        },
        "data": {
          "type": "object",
          "example": {
            "name": "Gigi",
            "description": "the giraffe"
          }
        },
        "contact": {
          "$ref": "#/definitions/v3alphaSetContact",
          "description": "Set the contact information (email, phone) for the user.\n\nTODO: No SetAuthenticators?"
        }
      }
    },
    "userv3alphaPhone": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "example": "+41791234567",
          "description": "Phone number of the user."
        },
        "isVerified": {
          "type": "boolean",
          "description": "IsVerified states if the phone number has been verified to belong to the user."
        }
      }
    },
    "userv3alphaRedirectURLs": {
      "type": "object",
      "properties": {
        "successUrl": {
          "type": "string",
          "example": "https://custom.com/login/idp/success",
          "description": "URL to which the user will be redirected after a successful login.",
          "maxLength": 2048,
          "minLength": 1
        },
        "failureUrl": {
          "type": "string",
          "example": "https://custom.com/login/idp/fail",
          "description": "URL to which the user will be redirected after a failed login.",
          "maxLength": 2048,
          "minLength": 1
        }
      },
      "required": [
        "successUrl",
        "failureUrl"
      ]
    },
    "userv3alphaReturnEmailVerificationCode": {
      "type": "object"
    },
    "userv3alphaReturnPasswordResetCode": {
      "type": "object"
    },
    "userv3alphaReturnPhoneVerificationCode": {
      "type": "object"
    },
    "userv3alphaSendEmailVerificationCode": {
      "type": "object",
      "properties": {
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/email/verify?userID={{.UserID}}\u0026code={{.Code}}\u0026orgID={{.OrgID}}",
          "description": "Optionally set a url_template, which will be used in the verification mail sent by ZITADEL\nto guide the user to your verification page.\nIf no template is set, the default ZITADEL url will be used.",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "userv3alphaSendPhoneVerificationCode": {
      "type": "object"
    },
    "userv3alphaSetEmail": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "example": "mini@mouse.com",
          "description": "Set the email address.",
          "maxLength": 200,
          "minLength": 1
        },
        "sendCode": {
          "$ref": "#/definitions/userv3alphaSendEmailVerificationCode",
          "description": "Let ZITADEL send the link to the user via email."
        },
        "returnCode": {
          "$ref": "#/definitions/userv3alphaReturnEmailVerificationCode",
          "description": "Get the code back to provide it to the user in your preferred mechanism."
        },
        "isVerified": {
          "type": "boolean",
          "description": "Set the email as already verified."
        }
      },
      "required": [
        "address"
      ]
    },
    "userv3alphaSetPassword": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "example": "Secr3tP4ssw0rd!",
          "description": "Provide the plain text password. ZITADEL will take care to store it in a secure way (hash).",
          "maxLength": 200,
          "minLength": 1
        },
        "hash": {
          "type": "string",
          "example": "$2a$12$lJ08fqVr8bFJilRVnDT9QeULI7YW.nT3iwUv6dyg0aCrfm3UY8XR2",
          "description": "Encoded hash of a password in Modular Crypt Format:\nhttps://zitadel.com/docs/concepts/architecture/secrets#hashed-secrets.",
          "maxLength": 200,
          "minLength": 1
        },
        "changeRequired": {
          "type": "boolean",
          "description": "Provide if the user needs to change the password on the next use."
        },
        "currentPassword": {
          "type": "string",
          "example": "Secr3tP4ssw0rd!",
          "description": "Provide the current password to verify you're allowed to change the password.",
          "maxLength": 200,
          "minLength": 1
        },
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "Or provider the verification code generated during password reset request.",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "password",
        "hash",
        "currentPassword",
        "verificationCode"
      ]
    },
    "userv3alphaSetPasswordResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "userv3alphaSetPhone": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "example": "+41791234567",
          "description": "Set the user's phone number.",
          "maxLength": 20,
          "minLength": 1
        },
        "sendCode": {
          "$ref": "#/definitions/userv3alphaSendPhoneVerificationCode",
          "description": "Let ZITADEL send the link to the user via SMS."
        },
        "returnCode": {
          "$ref": "#/definitions/userv3alphaReturnPhoneVerificationCode",
          "description": "Get the code back to provide it to the user in your preferred mechanism."
        },
        "isVerified": {
          "type": "boolean",
          "description": "Set the phone as already verified."
        }
      },
      "required": [
        "number"
      ]
    },
    "userv3alphaStartIdentityProviderIntentRequest": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/objectv3alphaInstance",
          "default": "\"domain from HOST or :authority header\""
        },
        "organization": {
          "$ref": "#/definitions/objectv3alphaOrganization",
          "description": "Optionally expect the user to be in this organization."
        },
        "idpId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "ID of an existing identity provider (IDP).",
          "maxLength": 200,
          "minLength": 1
        },
        "urls": {
          "$ref": "#/definitions/userv3alphaRedirectURLs"
        },
        "ldap": {
          "$ref": "#/definitions/userv3alphaLDAPCredentials"
        }
      },
      "required": [
        "idpId"
      ]
    },
    "userv3alphaStartIdentityProviderIntentResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "authUrl": {
          "type": "string",
          "example": "https://accounts.google.com/o/oauth2/v2/auth?client_id=clientID\u0026callback=https%3A%2F%2Fzitadel.cloud%2Fidps%2Fcallback",
          "description": "The authentication URL to which the client should redirect."
        },
        "idpIntent": {
          "$ref": "#/definitions/v3alphaIdentityProviderIntent",
          "description": "The Start Intent directly succeeded and returned the IDP Intent.\nFurther information can be retrieved by using the retrieve identity provider intent request."
        },
        "postForm": {
          "type": "string",
          "format": "byte",
          "description": "The HTML form with the embedded POST call information to render and execute."
        }
      }
    },
    "userv3alphaStartWebAuthNRegistration": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "example": "my-domain.zitadel.cloud",
          "description": "Domain on which the user currently is or will be authenticated.",
          "maxLength": 200,
          "minLength": 1
        },
        "authenticatorType": {
          "$ref": "#/definitions/v3alphaWebAuthNAuthenticatorType",
          "description": "Optionally specify the authenticator type of the passkey device (platform or cross-platform).\nIf none is provided, both values are allowed."
        },
        "code": {
          "$ref": "#/definitions/v3alphaAuthenticatorRegistrationCode",
          "description": "Optionally provide a one time code generated by ZITADEL.\nThis is required to start the passkey registration without user authentication."
        }
      },
      "required": [
        "domain"
      ]
    },
    "userv3alphaUnlockUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "userv3alphaVerifyTOTPRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "userv3alphaVerifyWebAuthNRegistration": {
      "type": "object",
      "properties": {
        "publicKeyCredential": {
          "type": "object",
          "example": {
            "type": "public-key",
            "id": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "rawId": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "response": {
              "attestationObject": "o2NmbXRmcGFja2VkZ2F0dFN0bXSiY2FsZyZjc2lnWEcwRQIgRKS3VpeE9tfExXRzkoUKnG4rQWPvtSSt4YtDGgTx32oCIQDPey-2YJ4uIg-QCM4jj6aE2U3tgMFM_RP7Efx6xRu3JGhhdXRoRGF0YVikSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAADju76085Yhmlt1CEOHkwLQAIKWsFWqxeMT8SxZnwp0ZMF1nk6yhs2m3AIvdixCNVgtNpQECAyYgASFYIMGUDSP2FAQn2MIfPMy7cyB_Y30VqixVgGULTBtFjfRiIlggjUGfQo3_-CrMmH3S-ZQkFKWKnNBQEAMkFtG-9A4zqW0",
              "clientDataJSON": "eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiQlhXdHh0WGxJeFZZa0pHT1dVaUVmM25zby02aXZKdWw2YmNmWHdMVlFIayIsIm9yaWdpbiI6Imh0dHBzOi8vbG9jYWxob3N0OjgwODAifQ"
            }
          },
          "title": "PublicKeyCredential Interface.\nGenerated helper methods populate the field from JSON created by a WebAuthN client.\nSee also:  https://www.w3.org/TR/webauthn/#publickeycredential",
          "maxLength": 1048576,
          "minLength": 55
        },
        "webAuthNName": {
          "type": "string",
          "example": "fido key",
          "description": "Provide a name for the WebAuthN device. This will help identify it in the future.",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "publicKeyCredential",
        "webAuthNName"
      ]
    },
    "userv3alphaWebAuthN": {
      "type": "object",
      "properties": {
        "webAuthNId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "unique identifier of the WebAuthN authenticator."
        },
        "name": {
          "type": "string",
          "example": "fido key",
          "description": "Name of the WebAuthN authenticator. This is used for easier identification."
        },
        "isVerified": {
          "type": "boolean",
          "description": "State whether the WebAuthN registration has been completed."
        },
        "userVerified": {
          "type": "boolean",
          "description": "States if the user has been verified during the registration. Authentication with this device\nwill be considered as multi-factor authentication (MFA) without the need to check a password\n(typically known as Passkeys).\nWithout user verification it will be a second factor authentication (2FA), typically done\nafter a password check.\n\nMore on WebAuthN User Verification: https://www.w3.org/TR/webauthn/#user-verification"
        }
      }
    },
    "v1APIAuthMethodType": {
      "type": "string",
      "enum": [
        "API_AUTH_METHOD_TYPE_BASIC",
        "API_AUTH_METHOD_TYPE_PRIVATE_KEY_JWT"
      ],
      "default": "API_AUTH_METHOD_TYPE_BASIC"
    },
    "v1APIConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "69629023906488334@ZITADEL",
          "description": "generated oauth2/oidc client_id"
        },
        "authMethodType": {
          "$ref": "#/definitions/v1APIAuthMethodType",
          "description": "defines how the API passes the login credentials"
        }
      }
    },
    "v1Action": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "state": {
          "$ref": "#/definitions/v1ActionState",
          "description": "the state of the action"
        },
        "name": {
          "type": "string",
          "example": "log context"
        },
        "script": {
          "type": "string",
          "example": "function log(context, calls){console.log(context)}"
        },
        "timeout": {
          "type": "string",
          "description": "after which time the action will be terminated if not finished"
        },
        "allowedToFail": {
          "type": "boolean",
          "description": "when true, the next action will be called even if this action fails"
        }
      }
    },
    "v1ActionFieldName": {
      "type": "string",
      "enum": [
        "ACTION_FIELD_NAME_UNSPECIFIED",
        "ACTION_FIELD_NAME_NAME",
        "ACTION_FIELD_NAME_ID",
        "ACTION_FIELD_NAME_STATE"
      ],
      "default": "ACTION_FIELD_NAME_UNSPECIFIED"
    },
    "v1ActionIDQuery": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        }
      }
    },
    "v1ActionNameQuery": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "log"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1ActionQuery": {
      "type": "object",
      "properties": {
        "actionIdQuery": {
          "$ref": "#/definitions/v1ActionIDQuery"
        },
        "actionNameQuery": {
          "$ref": "#/definitions/v1ActionNameQuery"
        },
        "actionStateQuery": {
          "$ref": "#/definitions/v1ActionStateQuery"
        }
      }
    },
    "v1ActionState": {
      "type": "string",
      "enum": [
        "ACTION_STATE_UNSPECIFIED",
        "ACTION_STATE_INACTIVE",
        "ACTION_STATE_ACTIVE"
      ],
      "default": "ACTION_STATE_UNSPECIFIED"
    },
    "v1ActionStateQuery": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/v1ActionState",
          "description": "current state of the action"
        }
      },
      "title": "ActionStateQuery always equals"
    },
    "v1ActivateCustomLabelPolicyRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1ActivateCustomLabelPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ActivateEmailProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ActivateFeatureLoginDefaultOrgResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ActivateLabelPolicyRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1ActivateLabelPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ActivateSMSProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ActivateSMTPConfigResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddAPIAppRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "example": "MyAPIApp",
          "maxLength": 200,
          "minLength": 1
        },
        "authMethodType": {
          "$ref": "#/definitions/v1APIAuthMethodType"
        }
      },
      "required": [
        "name"
      ]
    },
    "v1AddAPIAppResponse": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "clientId": {
          "type": "string",
          "example": "3950723409029374",
          "description": "generated secret for this config"
        },
        "clientSecret": {
          "type": "string",
          "example": "gjoq34589uasgh",
          "description": "generated secret for this config"
        }
      }
    },
    "v1AddAppKeyResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "28746028909593987"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "keyDetails": {
          "type": "string",
          "format": "byte",
          "example": "eyJ0eXBlIjoiYXBwbGljYXRpb24iLCJrZXlJZCI6IjIwMjcxMDE4NjYyMjcxNDExMyIsImtleSI6Ii0tLS0tQkVHSU4gUlNBIFBSSVZBVEUgS0VZLS0tLS1cbk1JSUVvd0lCQUFLQ0FRRUFuMUxyNStTV0pGRllURU1kaXQ2U0dNY0E2Yks5dG0xMmhlcm55V0wrZm9PWnA3eEVcbk9wcmsvWE81QVplSU5NY0x0ZVhxckJlK1NPdVVNMFpLU2xCMHFTNzNjVStDVTVMTGoycVB0UzhNOFI0N3BGdFhcbjJXRTFJNjNhZHB1N01TejA2SXduQ2lyNnJYOTVPQ2ZneHA3VU1Dd0pSTUZmYXJqdjVBRXY3NXpsSS9lYUV6bUJcbkxKWU1xanZFRmZoN2x3M2lPT3VsWW9kNjNpN3RDNWl5czNlYjNLZW4yWU0rN1FSbXB2dE5qcTJMVmlIMnkrUGJcbk9ESlI3MU9ib05TYVJDNTZDUFpWVytoWDByYXI3VzMwUjI2eGtIQ09oSytQbUpSeGtOY0g1VTdja0xXMEw0WEVcbnNNZkVUSmszeDR3Q0psbisxbElXUzkrNmw0R1E2TWRzWURyOU5RSURBUUFCQW9JQkFCSkx6WGQxMHFBZEQwekNcbnNGUFFOMnJNLzVmV3hONThONDR0YWF6QXg0VHp5K050UlZDTmxScGQvYkxuR2VjbHJIeVpDSmYycWcxcHNEMHJcbkowRGRlR2d0VXBFYWxsYk9scjNEZVBsUGkrYnNsK0RKOUk2c0VSUWwxTjZtQjVzZ0ZJZllBR3UwZjlFSXdIem9cblozR25yNnBRaEVmM0JPUVdsTVhVTlJNSksyOHp3M2E1L01nRmtKVUZUSTUzeXFwbGRtZ2hLajRZR1hLRk1LUGhcbkV3RkxrRncwK2s3K0xuSjFQNGp1ZVd1RXo3WlAyaFpvUWxCcXdSajVyTG9QZ05RbUU4UytFVDRuczlUYzByOFFcbnFyaHlacDZBczJrTDhGTytCZnF3SVpDZnpnWHN2cC9PLzRaSHIzVTB2Ymp3UW1sSzdVSm42U0J6T2hpWFpNU0lcbk5Wc0V5VUVDZ1lFQTFEaktkRGo3NTM1MWQzdlRNQlRFd2JSQ3hoUVZOdENFMnMwVUw4ckJQZ1I0K1dlblNUWmFcbnprWUprcEV0bE54VGxzYnN1Y0RTUXZqeWRYYk5nSHFBeDYzMm1vdTVkak9lR0VTUDFWVGtUdElsZFZQZWszQWxcbjVYbkpQa1dqWGVyVVJZNm5KeUQ5UWhlREx3MVp4NEFYVzNHWURiTFkrT05XV0VKUlJaQUloNjBDZ1lFQXdEQ2xcbnc1MHc4dkcvbEJ4RzNSYW9FaHdLOWNna1VXOHk2T25DekNwcEtjOEZUUmY1VE5iWjl5TzNXUmdYajhkeHRCakFcbkl5VGlzYk9NQk1VaFZKUUtGZHRQaDhoVDBwRkRjeE9ndzY0aHBtYzhyY2RTbXVKNzlYSVRTaHUySjA0N0UvNFZcbnJOTThpWVk5ZGR3VGdGUUlsdFNZL0l0RnFxWERmdjhqK1dVY25La0NnWUVBaENOUU80bDNuNjRucWR2WnBTaHBcblVrclJBTkJrWFJyOGZkZ1BaNnFSSS9KWStNSEhjVmg4dGM3NkN0NkdTUmZlbkJVRU5LeVF2czZPK1FDZCtBOU9cbnZBWGZkRjduZldlcVdtWG1RT2g0dDNNMWk1WkxFZlpVUWt2UU9BdllLcFFhMDZ4OCsyb1pCdHZvL0pVTmY2Q0xcbjZvNFNKUVZrLzZOZGtkckpDODBnNG9rQ2dZQkZsNWYrbkVYa1F0dWZVeG5wNXRGWE5XWldsM0ZuTjMvVXpRaW5cbmkxZm5OcnB4cnhPcjJrUzA4KzdwU1FzSEdpNDNDNXRQWG9UajJlTUN1eXNWaUVHYXBuNUc2YWhJb0NjdlhWVWlcblprUnpFQUR0NERZdU5ZS3pYdXBUTkhPaUNmYmtoMlhyM2RXVzZ0QUloSGRmU1k2T3AwNzZhNmYvWWVUSGNMWGpcbkVkVHBlUUtCZ0FPdnBqcDQ4TzRUWEZkU0JLSnYya005OHVhUjlSQURtdGxTWHd2cTlyQkhTV084NFk4bzE0L1Bcbkl1UmxUOHhROGRYKzhMR21UUCtjcUtiOFFRQ1grQk1YUWxMSEVtWnpnb0xFa0pGMUVIMm4vZEZ5bngxS3prdFNcbm9UZUdsRzZhbXhVOVh4eW9RVFlEVGJCbERwc2FZUlFBZ2FUQzM3UVZRUjhmK1ZoRzFHSFFcbi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tXG4iLCJhcHBJZCI6IjIwMjcwNjM5ODgxMzg4MDU3NyIsImNsaWVudElkIjoiMjAyNzA2Mzk4ODEzOTQ2MTEzQG15dGVzdHByb2plY3QifQ=="
        }
      }
    },
    "v1AddCustomDomainPolicyRequest": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string",
          "example": "#69629023906488334",
          "maxLength": 200,
          "minLength": 1
        },
        "userLoginMustBeDomain": {
          "type": "boolean",
          "description": "the username has to end with the domain of its organization",
          "title": "the username has to end with the domain of its organization (uniqueness is organization based)"
        },
        "validateOrgDomains": {
          "type": "boolean",
          "description": "defines if organization domains should be validated org count as validated automatically"
        },
        "smtpSenderAddressMatchesInstanceDomain": {
          "type": "boolean",
          "description": "defines if the SMTP sender address domain should match an existing domain on the instance"
        }
      },
      "required": [
        "orgId"
      ]
    },
    "v1AddCustomDomainPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddCustomLabelPolicyRequest": {
      "type": "object",
      "properties": {
        "primaryColor": {
          "type": "string",
          "example": "#353535",
          "description": "Represents a color scheme",
          "maxLength": 50
        },
        "hideLoginNameSuffix": {
          "type": "boolean",
          "description": "hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set",
          "title": "hides the org suffix on the login form if the scope \\\"urn:zitadel:iam:org:domain:primary:{domainname}\\\" is set"
        },
        "warnColor": {
          "type": "string",
          "example": "#CD3D56",
          "description": "hex value for warn color",
          "maxLength": 50
        },
        "backgroundColor": {
          "type": "string",
          "example": "#FAFAFA",
          "description": "hex value for background color",
          "maxLength": 50
        },
        "fontColor": {
          "type": "string",
          "example": "#000000",
          "description": "hex value for font color",
          "maxLength": 50
        },
        "primaryColorDark": {
          "type": "string",
          "example": "#BBBAFA",
          "description": "hex value for the primary color dark theme",
          "maxLength": 50
        },
        "backgroundColorDark": {
          "type": "string",
          "example": "#111827",
          "description": "hex value for background color dark theme",
          "maxLength": 50
        },
        "warnColorDark": {
          "type": "string",
          "example": "#FF3B5B",
          "description": "hex value for warning color dark theme",
          "maxLength": 50
        },
        "fontColorDark": {
          "type": "string",
          "example": "#FFFFFF",
          "description": "hex value for font color dark theme",
          "maxLength": 50
        },
        "disableWatermark": {
          "type": "boolean"
        },
        "themeMode": {
          "$ref": "#/definitions/policyv1ThemeMode",
          "description": "setting if there should be a restriction on which themes are available"
        }
      }
    },
    "v1AddCustomLabelPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddCustomLockoutPolicyRequest": {
      "type": "object",
      "properties": {
        "maxPasswordAttempts": {
          "type": "integer",
          "format": "int64",
          "description": "When the user has reached the maximum password attempts the account will be locked, If this is set to 0 the lockout will not trigger."
        },
        "maxOtpAttempts": {
          "type": "integer",
          "format": "int64",
          "example": "10",
          "description": "Maximum failed attempts for a single OTP type (TOTP, SMS, Email) before the account gets locked. Attempts are reset as soon as the OTP is entered correctly. If set to 0 the account will never be locked."
        }
      }
    },
    "v1AddCustomLockoutPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddCustomLoginPolicyRequest": {
      "type": "object",
      "properties": {
        "allowUsernamePassword": {
          "type": "boolean"
        },
        "allowRegister": {
          "type": "boolean"
        },
        "allowExternalIdp": {
          "type": "boolean"
        },
        "forceMfa": {
          "type": "boolean"
        },
        "passwordlessType": {
          "$ref": "#/definitions/v1PasswordlessType"
        },
        "hidePasswordReset": {
          "type": "boolean"
        },
        "ignoreUnknownUsernames": {
          "type": "boolean",
          "description": "defines if unknown username on login screen directly returns an error or always displays the password screen"
        },
        "defaultRedirectUri": {
          "type": "string",
          "description": "defines where the user will be redirected to if the login is started without app context (e.g. from mail)"
        },
        "passwordCheckLifetime": {
          "type": "string"
        },
        "externalLoginCheckLifetime": {
          "type": "string"
        },
        "mfaInitSkipLifetime": {
          "type": "string"
        },
        "secondFactorCheckLifetime": {
          "type": "string"
        },
        "multiFactorCheckLifetime": {
          "type": "string"
        },
        "secondFactors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/policyv1SecondFactorType"
          }
        },
        "multiFactors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/policyv1MultiFactorType"
          }
        },
        "idps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AddCustomLoginPolicyRequestIDP"
          }
        },
        "allowDomainDiscovery": {
          "type": "boolean",
          "description": "If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success."
        },
        "disableLoginWithEmail": {
          "type": "boolean",
          "description": "defines if the user can additionally (to the login name) be identified by their verified email address"
        },
        "disableLoginWithPhone": {
          "type": "boolean",
          "description": "defines if the user can additionally (to the login name) be identified by their verified phone number"
        },
        "forceMfaLocalOnly": {
          "type": "boolean",
          "description": "if activated, only local authenticated users are forced to use MFA. Authentication through IDPs won't prompt a MFA step in the login."
        }
      }
    },
    "v1AddCustomLoginPolicyRequestIDP": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string"
        },
        "ownerType": {
          "$ref": "#/definitions/v1IDPOwnerType"
        }
      }
    },
    "v1AddCustomLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddCustomNotificationPolicyRequest": {
      "type": "object",
      "properties": {
        "passwordChange": {
          "type": "boolean",
          "description": "If set to true the users will get a notification whenever their password has been changed."
        }
      }
    },
    "v1AddCustomNotificationPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddCustomOrgIAMPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddCustomPasswordAgePolicyRequest": {
      "type": "object",
      "properties": {
        "maxAgeDays": {
          "type": "integer",
          "format": "int64",
          "description": "Amount of days after which a password will expire. The user will be forced to change the password on the following authentication."
        },
        "expireWarnDays": {
          "type": "integer",
          "format": "int64",
          "description": "Amount of days after which the user should be notified of the upcoming expiry. ZITADEL will not notify the user."
        }
      }
    },
    "v1AddCustomPasswordAgePolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddCustomPasswordComplexityPolicyRequest": {
      "type": "object",
      "properties": {
        "minLength": {
          "type": "string",
          "format": "uint64",
          "example": "8"
        },
        "hasUppercase": {
          "type": "boolean",
          "description": "Defines if the password MUST contain an upper case letter"
        },
        "hasLowercase": {
          "type": "boolean",
          "description": "Defines if the password MUST contain a lowercase letter"
        },
        "hasNumber": {
          "type": "boolean",
          "description": "Defines if the password MUST contain a number"
        },
        "hasSymbol": {
          "type": "boolean",
          "description": "Defines if the password MUST contain a symbol. E.g. \"$\""
        }
      }
    },
    "v1AddCustomPasswordComplexityPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddCustomPrivacyPolicyRequest": {
      "type": "object",
      "properties": {
        "tosLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/legal/terms-of-service",
          "description": "If registration is enabled, the user has to accept the TOS. Variable {{.Lang}} can be set to have different links based on the language."
        },
        "privacyLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/legal/privacy-policy",
          "description": "If registration is enabled, the user has to accept the privacy terms. Variable {{.Lang}} can be set to have different links based on the language."
        },
        "helpLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/manuals/introduction",
          "description": "Variable {{.Lang}} can be set to have different links based on the language."
        },
        "supportEmail": {
          "type": "string",
          "example": "support-email@test.com",
          "description": "help / support email address."
        },
        "docsLink": {
          "type": "string",
          "example": "https://zitadel.com/docs",
          "description": "Link to documentation to be shown in the console."
        },
        "customLink": {
          "type": "string",
          "example": "https://external.link",
          "description": "Link to an external resource that will be available to users in the console."
        },
        "customLinkText": {
          "type": "string",
          "example": "External",
          "description": "The button text that would be shown in console pointing to custom link."
        }
      }
    },
    "v1AddCustomPrivacyPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddDomainResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddEmailProviderHTTPRequest": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "example": "http://relay.example.com/provider",
          "maxLength": 2048,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "example": "provider description",
          "maxLength": 200
        }
      },
      "required": [
        "endpoint"
      ]
    },
    "v1AddEmailProviderHTTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1AddEmailProviderSMTPRequest": {
      "type": "object",
      "properties": {
        "senderAddress": {
          "type": "string",
          "example": "noreply@m.zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        },
        "senderName": {
          "type": "string",
          "example": "ZITADEL",
          "maxLength": 200,
          "minLength": 1
        },
        "tls": {
          "type": "boolean"
        },
        "host": {
          "type": "string",
          "example": "smtp.postmarkapp.com:587",
          "description": "Make sure to include the port.",
          "maxLength": 500,
          "minLength": 1
        },
        "user": {
          "type": "string",
          "example": "197f0117-529e-443d-bf6c-0292dd9a02b7"
        },
        "password": {
          "type": "string",
          "example": "this-is-my-password"
        },
        "replyToAddress": {
          "type": "string",
          "example": "replyto@m.zitadel.cloud",
          "maxLength": 200
        },
        "description": {
          "type": "string",
          "example": "provider description",
          "maxLength": 200
        }
      },
      "required": [
        "senderAddress",
        "senderName",
        "host"
      ]
    },
    "v1AddEmailProviderSMTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1AddHumanUserRequestEmail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "isEmailVerified": {
          "type": "boolean"
        }
      }
    },
    "v1AddHumanUserRequestPhone": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "title": "has to be a global number"
        },
        "isPhoneVerified": {
          "type": "boolean"
        }
      }
    },
    "v1AddHumanUserRequestProfile": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "preferredLanguage": {
          "type": "string"
        },
        "gender": {
          "$ref": "#/definitions/userv1Gender"
        }
      }
    },
    "v1AddIAMMemberRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "69629023906488334",
          "maxLength": 200,
          "minLength": 1
        },
        "roles": {
          "type": "array",
          "example": [
            "IAM_OWNER"
          ],
          "items": {
            "type": "string"
          },
          "description": "If no roles are provided the user won't have any rights"
        }
      },
      "required": [
        "userId"
      ]
    },
    "v1AddIAMMemberResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddInstanceRequest": {
      "type": "object",
      "properties": {
        "instanceName": {
          "type": "string"
        },
        "firstOrgName": {
          "type": "string"
        },
        "customDomain": {
          "type": "string"
        },
        "ownerUserName": {
          "type": "string"
        },
        "ownerEmail": {
          "$ref": "#/definitions/v1AddInstanceRequestEmail"
        },
        "ownerProfile": {
          "$ref": "#/definitions/v1AddInstanceRequestProfile"
        },
        "ownerPassword": {
          "$ref": "#/definitions/v1AddInstanceRequestPassword"
        },
        "defaultLanguage": {
          "type": "string"
        }
      }
    },
    "v1AddInstanceRequestEmail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "isEmailVerified": {
          "type": "boolean"
        }
      }
    },
    "v1AddInstanceRequestPassword": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "passwordChangeRequired": {
          "type": "boolean"
        }
      }
    },
    "v1AddInstanceRequestProfile": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "preferredLanguage": {
          "type": "string"
        }
      }
    },
    "v1AddInstanceResponse": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddInstanceTrustedDomainRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "example": "login.example.com",
          "maxLength": 253,
          "minLength": 1
        }
      },
      "required": [
        "domain"
      ]
    },
    "v1AddInstanceTrustedDomainResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddJWTIDPRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "google",
          "maxLength": 200,
          "minLength": 1
        },
        "stylingType": {
          "$ref": "#/definitions/v1IDPStylingType",
          "description": "some identity providers specify the styling of the button to their login"
        },
        "jwtEndpoint": {
          "type": "string",
          "example": "https://custom.com/auth/jwt",
          "description": "the endpoint where the jwt can be extracted",
          "maxLength": 200,
          "minLength": 1
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.custom.com",
          "description": "the issuer of the jwt (for validation)",
          "maxLength": 200,
          "minLength": 1
        },
        "keysEndpoint": {
          "type": "string",
          "example": "https://accounts.custom.com/keys",
          "description": "the endpoint to the key (JWK) which is used to sign the JWT with",
          "maxLength": 200,
          "minLength": 1
        },
        "headerName": {
          "type": "string",
          "example": "x-auth-token",
          "description": "the name of the header where the JWT is sent in, default is authorization",
          "maxLength": 200,
          "minLength": 1
        },
        "autoRegister": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "jwtEndpoint",
        "issuer",
        "keysEndpoint",
        "headerName"
      ]
    },
    "v1AddJWTIDPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "idpId": {
          "type": "string",
          "example": "69234230193872955"
        }
      }
    },
    "v1AddMachineKeyResponse": {
      "type": "object",
      "properties": {
        "keyId": {
          "type": "string"
        },
        "keyDetails": {
          "type": "string",
          "format": "byte"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddMachineUserRequest": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "example": "robot",
          "maxLength": 200,
          "minLength": 1
        },
        "name": {
          "type": "string",
          "example": "My Machine Account",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "example": "First machine account used for API XY.",
          "maxLength": 500
        },
        "accessTokenType": {
          "$ref": "#/definitions/userv1AccessTokenType"
        },
        "userId": {
          "type": "string",
          "example": "316b7fa5-0535-4adb-9e93-963a91b1010c",
          "description": "optionally set your own id unique for the user.",
          "maxLength": 200
        }
      },
      "required": [
        "userName",
        "name"
      ]
    },
    "v1AddMachineUserResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddMyAuthFactorOTPEmailRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1AddMyAuthFactorOTPEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddMyAuthFactorOTPRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1AddMyAuthFactorOTPResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "example": "otpauth://totp/ZITADEL:gigi@acme.zitadel.cloud?algorithm=SHA1\u0026digits=6\u0026issuer=ZITADEL\u0026period=30\u0026secret=TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK"
        },
        "secret": {
          "type": "string",
          "example": "TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddMyAuthFactorOTPSMSRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1AddMyAuthFactorOTPSMSResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddMyAuthFactorU2FRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1AddMyAuthFactorU2FResponse": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/v1WebAuthNKey"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddMyPasswordlessLinkRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1AddMyPasswordlessLinkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "link": {
          "type": "string",
          "example": "https://acme.com/ui/login/login/passwordless/init?userID=182156264229306625\u0026orgID=165947650742997249\u0026codeID=200949504189388947\u0026code=kFfsO8OizZPS"
        },
        "expiration": {
          "type": "string",
          "example": "3600s"
        }
      }
    },
    "v1AddMyPasswordlessRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1AddMyPasswordlessResponse": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/v1WebAuthNKey"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddNotificationPolicyRequest": {
      "type": "object",
      "properties": {
        "passwordChange": {
          "type": "boolean",
          "description": "If set to true the users will get a notification whenever their password has been changed."
        }
      }
    },
    "v1AddNotificationPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddOIDCAppRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "example": "MyOIDCApp",
          "maxLength": 200,
          "minLength": 1
        },
        "redirectUris": {
          "type": "array",
          "example": [
            "http://localhost:4200/auth/callback"
          ],
          "items": {
            "type": "string"
          },
          "description": "Callback URI of the authorization request where the code or tokens will be sent to"
        },
        "responseTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OIDCResponseType"
          },
          "description": "Determines whether a code, id_token token or just id_token will be returned"
        },
        "grantTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OIDCGrantType"
          },
          "description": "The flow type the application uses to gain access"
        },
        "appType": {
          "$ref": "#/definitions/v1OIDCAppType",
          "description": "Determines the paradigm of the application"
        },
        "authMethodType": {
          "$ref": "#/definitions/v1OIDCAuthMethodType",
          "description": "Defines how the application passes login credentials"
        },
        "postLogoutRedirectUris": {
          "type": "array",
          "example": [
            "http://localhost:4200/signedout"
          ],
          "items": {
            "type": "string"
          },
          "description": "ZITADEL will redirect to this link after a successful logout"
        },
        "version": {
          "$ref": "#/definitions/v1OIDCVersion"
        },
        "devMode": {
          "type": "boolean",
          "description": "Used for development, some checks of the OIDC specification will not be checked."
        },
        "accessTokenType": {
          "$ref": "#/definitions/v1OIDCTokenType",
          "description": "Type of the access token returned from ZITADEL"
        },
        "accessTokenRoleAssertion": {
          "type": "boolean",
          "description": "Adds roles to the claims of the access token (only if type == JWT) even if they are not requested by scopes"
        },
        "idTokenRoleAssertion": {
          "type": "boolean",
          "description": "Adds roles to the claims of the id token even if they are not requested by scopes"
        },
        "idTokenUserinfoAssertion": {
          "type": "boolean",
          "description": "Claims of profile, email, address and phone scopes are added to the id token even if an access token is issued. Attention this violates the OIDC specification"
        },
        "clockSkew": {
          "type": "string",
          "example": "1s",
          "description": "Used to compensate time difference of servers. Duration added to the \"exp\" claim and subtracted from \"iat\", \"auth_time\" and \"nbf\" claims"
        },
        "additionalOrigins": {
          "type": "array",
          "example": [
            "scheme://localhost:8080"
          ],
          "items": {
            "type": "string"
          },
          "description": "Additional origins (other than the redirect_uris) from where the API can be used, provided string has to be an origin (scheme://hostname[:port]) without path, query or fragment"
        },
        "skipNativeAppSuccessPage": {
          "type": "boolean",
          "description": "Skip the successful login page on native apps and directly redirect the user to the callback."
        },
        "backChannelLogoutUri": {
          "type": "string",
          "example": [
            "https://example.com/auth/backchannel"
          ],
          "description": "ZITADEL will use this URI to notify the application about terminated session according to the OIDC Back-Channel Logout (https://openid.net/specs/openid-connect-backchannel-1_0.html)"
        },
        "loginVersion": {
          "$ref": "#/definitions/v1LoginVersion",
          "description": "Specify the preferred login UI, where the user is redirected to for authentication. If unset, the login UI is chosen by the instance default."
        }
      },
      "required": [
        "name"
      ]
    },
    "v1AddOIDCAppResponse": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "clientId": {
          "type": "string",
          "example": "1035496534033449",
          "description": "generated client id for this config"
        },
        "clientSecret": {
          "type": "string",
          "example": "gjoq34589uasgh",
          "description": "generated secret for this config"
        },
        "noneCompliant": {
          "type": "boolean"
        },
        "complianceProblems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LocalizedMessage"
          }
        }
      }
    },
    "v1AddOIDCIDPRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "google",
          "maxLength": 200,
          "minLength": 1
        },
        "stylingType": {
          "$ref": "#/definitions/v1IDPStylingType",
          "description": "some identity providers specify the styling of the button to their login"
        },
        "clientId": {
          "type": "string",
          "description": "client id generated by the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "clientSecret": {
          "type": "string",
          "description": "client secret generated by the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com",
          "description": "the oidc issuer of the identity provider",
          "maxLength": 200
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request on the identity provider"
        },
        "displayNameMapping": {
          "$ref": "#/definitions/v1OIDCMappingField",
          "description": "definition which field is mapped to the display name of the user"
        },
        "usernameMapping": {
          "$ref": "#/definitions/v1OIDCMappingField",
          "description": "definition which field is mapped to the email of the user"
        },
        "autoRegister": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "clientId",
        "clientSecret",
        "issuer"
      ]
    },
    "v1AddOIDCIDPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "idpId": {
          "type": "string",
          "example": "53829026806489455"
        }
      }
    },
    "v1AddOIDCSettingsRequest": {
      "type": "object",
      "properties": {
        "accessTokenLifetime": {
          "type": "string"
        },
        "idTokenLifetime": {
          "type": "string"
        },
        "refreshTokenIdleExpiration": {
          "type": "string"
        },
        "refreshTokenExpiration": {
          "type": "string"
        }
      }
    },
    "v1AddOIDCSettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddOrgDomainRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "example": "testdomain.com",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "domain"
      ]
    },
    "v1AddOrgDomainResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddOrgJWTIDPRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "google",
          "maxLength": 200,
          "minLength": 1
        },
        "stylingType": {
          "$ref": "#/definitions/v1IDPStylingType",
          "description": "some identity providers specify the styling of the button to their login"
        },
        "jwtEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com",
          "description": "the endpoint where the JWT can be extracted",
          "maxLength": 200,
          "minLength": 1
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com",
          "description": "the issuer of the JWT (for validation)",
          "maxLength": 200,
          "minLength": 1
        },
        "keysEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com/keys",
          "description": "the endpoint to the key (JWK) which is used to sign the JWT with",
          "maxLength": 200,
          "minLength": 1
        },
        "headerName": {
          "type": "string",
          "example": "x-auth-token",
          "description": "the name of the header where the JWT is sent in, default is authorization",
          "maxLength": 200,
          "minLength": 1
        },
        "autoRegister": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "jwtEndpoint",
        "issuer",
        "keysEndpoint",
        "headerName"
      ]
    },
    "v1AddOrgJWTIDPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "idpId": {
          "type": "string",
          "example": "69234230193872955"
        }
      }
    },
    "v1AddOrgMemberRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "example": [
            "ORG_OWNER"
          ],
          "items": {
            "type": "string"
          },
          "description": "If no roles are provided the user won't have any rights"
        }
      }
    },
    "v1AddOrgMemberResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddOrgOIDCIDPRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "google",
          "maxLength": 200,
          "minLength": 1
        },
        "stylingType": {
          "$ref": "#/definitions/v1IDPStylingType",
          "description": "some identity providers specify the styling of the button to their login"
        },
        "clientId": {
          "type": "string",
          "description": "client id generated by the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "clientSecret": {
          "type": "string",
          "description": "client secret generated by the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com",
          "description": "the OIDC issuer of the identity provider"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request on the identity provider"
        },
        "displayNameMapping": {
          "$ref": "#/definitions/v1OIDCMappingField",
          "description": "definition which field is mapped to the display name of the user"
        },
        "usernameMapping": {
          "$ref": "#/definitions/v1OIDCMappingField",
          "description": "definition which field is mapped to the email of the user"
        },
        "autoRegister": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "clientId",
        "clientSecret",
        "issuer"
      ]
    },
    "v1AddOrgOIDCIDPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "idpId": {
          "type": "string",
          "example": "69234230193872955"
        }
      }
    },
    "v1AddOrgRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Customer A",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "name"
      ]
    },
    "v1AddOrgResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629026806489455"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddPasswordlessRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "link": {
          "type": "string"
        },
        "expiration": {
          "type": "string"
        }
      }
    },
    "v1AddPersonalAccessTokenResponse": {
      "type": "object",
      "properties": {
        "tokenId": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddProjectGrantMemberRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "grantId": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "example": "69629012906488334",
          "maxLength": 200,
          "minLength": 1
        },
        "roles": {
          "type": "array",
          "example": [
            "PROJECT_GRANT_OWNER"
          ],
          "items": {
            "type": "string"
          },
          "description": "If no roles are provided the user won't have any rights"
        }
      },
      "required": [
        "userId"
      ]
    },
    "v1AddProjectGrantMemberResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddProjectGrantRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "grantedOrgId": {
          "type": "string",
          "example": "28746028909593987"
        },
        "roleKeys": {
          "type": "array",
          "example": [
            "RoleKey1",
            "RoleKey2"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AddProjectGrantResponse": {
      "type": "object",
      "properties": {
        "grantId": {
          "type": "string",
          "example": "28746028909593987"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddProjectMemberRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "example": [
            "PROJECT_OWNER"
          ],
          "items": {
            "type": "string"
          },
          "description": "If no roles are provided the user won't have any rights"
        }
      }
    },
    "v1AddProjectMemberResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddProjectRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "MyProject",
          "maxLength": 200,
          "minLength": 1
        },
        "projectRoleAssertion": {
          "type": "boolean",
          "description": "Enable this setting to have role information included in the user info endpoint. It is also dependent on your application settings to include it in tokens and other types."
        },
        "projectRoleCheck": {
          "type": "boolean",
          "description": "When enabled ZITADEL will check if a user has a role of this project assigned when login into an application of this project."
        },
        "hasProjectCheck": {
          "type": "boolean",
          "description": "When enabled ZITADEL will check if the organization of the user, that is trying to log in, has a grant to this project."
        },
        "privateLabelingSetting": {
          "$ref": "#/definitions/v1PrivateLabelingSetting",
          "description": "Define which private labeling/branding should trigger when getting to a login of this project."
        }
      },
      "required": [
        "name"
      ]
    },
    "v1AddProjectResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "98729028932384528"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddProjectRoleRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "roleKey": {
          "type": "string",
          "example": "ADMIN",
          "description": "The key is the only relevant attribute for ZITADEL regarding the authorization checks.",
          "maxLength": 200,
          "minLength": 1
        },
        "displayName": {
          "type": "string",
          "example": "Administrator",
          "maxLength": 200,
          "minLength": 1
        },
        "group": {
          "type": "string",
          "example": "Admins",
          "description": "The group is only used for display purposes. That you have better handling, like giving all the roles from a group to a user.",
          "maxLength": 200
        }
      },
      "required": [
        "roleKey",
        "displayName"
      ]
    },
    "v1AddProjectRoleResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddQuotaResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddSAMLAppResponse": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AddSMSProviderHTTPRequest": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "example": "http://relay.example.com/provider",
          "maxLength": 2048,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "example": "provider description",
          "maxLength": 200
        }
      },
      "required": [
        "endpoint"
      ]
    },
    "v1AddSMSProviderHTTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1AddSMSProviderTwilioRequest": {
      "type": "object",
      "properties": {
        "sid": {
          "type": "string",
          "example": "AB123b9e61d238abae7d3be7b65ecbc987",
          "maxLength": 200,
          "minLength": 1
        },
        "token": {
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "senderNumber": {
          "type": "string",
          "example": "AB123b9e61d238abae7d3be7b65ecbc987",
          "maxLength": 200
        },
        "description": {
          "type": "string",
          "example": "provider description",
          "maxLength": 200
        },
        "verifyServiceSid": {
          "type": "string",
          "example": "AB123b9e61d238abae7d3be7b65ecbc987",
          "maxLength": 200
        }
      },
      "required": [
        "sid",
        "token"
      ]
    },
    "v1AddSMSProviderTwilioResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1AddSMTPConfigRequest": {
      "type": "object",
      "properties": {
        "senderAddress": {
          "type": "string",
          "example": "noreply@m.zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        },
        "senderName": {
          "type": "string",
          "example": "ZITADEL",
          "maxLength": 200,
          "minLength": 1
        },
        "tls": {
          "type": "boolean"
        },
        "host": {
          "type": "string",
          "example": "smtp.postmarkapp.com:587",
          "description": "Make sure to include the port.",
          "maxLength": 500,
          "minLength": 1
        },
        "user": {
          "type": "string",
          "example": "197f0117-529e-443d-bf6c-0292dd9a02b7"
        },
        "password": {
          "type": "string",
          "example": "this-is-my-password"
        },
        "replyToAddress": {
          "type": "string",
          "example": "replyto@m.zitadel.cloud",
          "maxLength": 200
        },
        "description": {
          "type": "string",
          "example": "provider description",
          "maxLength": 200
        }
      },
      "required": [
        "senderAddress",
        "senderName",
        "host"
      ]
    },
    "v1AddSMTPConfigResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1AddUserGrantRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "69629026806489455",
          "minLength": 1
        },
        "projectId": {
          "type": "string",
          "example": "58949026806489455",
          "maxLength": 200,
          "minLength": 1
        },
        "projectGrantId": {
          "type": "string",
          "example": "9847026806489455",
          "description": "Make sure to fill in the project grant id if the user grant is for a granted project and the organization is not the owner of the project.",
          "maxLength": 200
        },
        "roleKeys": {
          "type": "array",
          "example": [
            "RoleKey1",
            "RoleKey2"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "userId",
        "projectId"
      ]
    },
    "v1AddUserGrantResponse": {
      "type": "object",
      "properties": {
        "userGrantId": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1AdminServiceMigrateGenericOIDCProviderBody": {
      "type": "object",
      "properties": {
        "azure": {
          "$ref": "#/definitions/zitadeladminv1AddAzureADProviderRequest"
        },
        "google": {
          "$ref": "#/definitions/zitadeladminv1AddGoogleProviderRequest"
        }
      }
    },
    "v1AdminServiceRegenerateSAMLProviderCertificateBody": {
      "type": "object"
    },
    "v1AdminServiceSetCustomLoginTextBody": {
      "type": "object",
      "properties": {
        "selectAccountText": {
          "$ref": "#/definitions/v1SelectAccountScreenText"
        },
        "loginText": {
          "$ref": "#/definitions/v1LoginScreenText"
        },
        "passwordText": {
          "$ref": "#/definitions/v1PasswordScreenText"
        },
        "usernameChangeText": {
          "$ref": "#/definitions/v1UsernameChangeScreenText"
        },
        "usernameChangeDoneText": {
          "$ref": "#/definitions/v1UsernameChangeDoneScreenText"
        },
        "initPasswordText": {
          "$ref": "#/definitions/v1InitPasswordScreenText"
        },
        "initPasswordDoneText": {
          "$ref": "#/definitions/v1InitPasswordDoneScreenText"
        },
        "emailVerificationText": {
          "$ref": "#/definitions/v1EmailVerificationScreenText"
        },
        "emailVerificationDoneText": {
          "$ref": "#/definitions/v1EmailVerificationDoneScreenText"
        },
        "initializeUserText": {
          "$ref": "#/definitions/v1InitializeUserScreenText"
        },
        "initializeDoneText": {
          "$ref": "#/definitions/v1InitializeUserDoneScreenText"
        },
        "initMfaPromptText": {
          "$ref": "#/definitions/v1InitMFAPromptScreenText"
        },
        "initMfaOtpText": {
          "$ref": "#/definitions/v1InitMFAOTPScreenText"
        },
        "initMfaU2fText": {
          "$ref": "#/definitions/v1InitMFAU2FScreenText"
        },
        "initMfaDoneText": {
          "$ref": "#/definitions/v1InitMFADoneScreenText"
        },
        "mfaProvidersText": {
          "$ref": "#/definitions/v1MFAProvidersText"
        },
        "verifyMfaOtpText": {
          "$ref": "#/definitions/v1VerifyMFAOTPScreenText"
        },
        "verifyMfaU2fText": {
          "$ref": "#/definitions/v1VerifyMFAU2FScreenText"
        },
        "passwordlessText": {
          "$ref": "#/definitions/v1PasswordlessScreenText"
        },
        "passwordChangeText": {
          "$ref": "#/definitions/v1PasswordChangeScreenText"
        },
        "passwordChangeDoneText": {
          "$ref": "#/definitions/v1PasswordChangeDoneScreenText"
        },
        "passwordResetDoneText": {
          "$ref": "#/definitions/v1PasswordResetDoneScreenText"
        },
        "registrationOptionText": {
          "$ref": "#/definitions/v1RegistrationOptionScreenText"
        },
        "registrationUserText": {
          "$ref": "#/definitions/v1RegistrationUserScreenText"
        },
        "registrationOrgText": {
          "$ref": "#/definitions/v1RegistrationOrgScreenText"
        },
        "linkingUserDoneText": {
          "$ref": "#/definitions/v1LinkingUserDoneScreenText"
        },
        "externalUserNotFoundText": {
          "$ref": "#/definitions/v1ExternalUserNotFoundScreenText"
        },
        "successLoginText": {
          "$ref": "#/definitions/v1SuccessLoginScreenText"
        },
        "logoutText": {
          "$ref": "#/definitions/v1LogoutDoneScreenText"
        },
        "footerText": {
          "$ref": "#/definitions/v1FooterText"
        },
        "passwordlessPromptText": {
          "$ref": "#/definitions/v1PasswordlessPromptScreenText"
        },
        "passwordlessRegistrationText": {
          "$ref": "#/definitions/v1PasswordlessRegistrationScreenText"
        },
        "passwordlessRegistrationDoneText": {
          "$ref": "#/definitions/v1PasswordlessRegistrationDoneScreenText"
        },
        "externalRegistrationUserOverviewText": {
          "$ref": "#/definitions/v1ExternalRegistrationUserOverviewScreenText"
        },
        "linkingUserPromptText": {
          "$ref": "#/definitions/v1LinkingUserPromptScreenText",
          "title": "Deprecated: the linking user prompt screen no longer exists"
        }
      }
    },
    "v1AdminServiceUpdateAppleProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Apple",
          "maxLength": 200
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id (App ID or Service ID) provided by Apple",
          "maxLength": 200,
          "minLength": 1
        },
        "teamId": {
          "type": "string",
          "example": "ALT03JV3OS",
          "description": "(10-character) Team ID provided by Apple",
          "maxLength": 10,
          "minLength": 10
        },
        "keyId": {
          "type": "string",
          "example": "OGKDK25KD",
          "description": "(10-character) ID of the private key generated by Apple",
          "maxLength": 10,
          "minLength": 10
        },
        "privateKey": {
          "type": "string",
          "format": "byte",
          "example": "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1...",
          "description": "Private Key generated by Apple",
          "maxLength": 5000
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to Apple",
          "maxItems": 20
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      },
      "required": [
        "clientId",
        "teamId",
        "keyId"
      ]
    },
    "v1AdminServiceUpdateAzureADProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Azure AD"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by the Azure AD"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client_secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "tenant": {
          "$ref": "#/definitions/idpv1AzureADTenant",
          "description": "Defines what kind of accounts are allowed to authenticate (Personal, Organizational, All). If not provided the `common` tenant will be used (All accounts)",
          "title": "if not provided the `common` tenant will be used"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Azure AD doesn't send if the email has been verified. Enable this if the user email should always be added verified in ZITADEL (no verification emails will be sent)"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email",
            "User.Read"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request to Azure AD"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1AdminServiceUpdateGenericOAuthProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "My Provider"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by the identity provider"
        },
        "clientSecret": {
          "type": "string",
          "example": "client-secret",
          "description": "Client secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "authorizationEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com/o/oauth2/v2/auth",
          "description": "The endpoint where ZITADEL send the user to authenticate"
        },
        "tokenEndpoint": {
          "type": "string",
          "example": "https://oauth2.googleapis.com/token",
          "description": "The endpoint where ZITADEL can get the token"
        },
        "userEndpoint": {
          "type": "string",
          "example": "https://openidconnect.googleapis.com/v1/userinfo",
          "description": "The endpoint where ZITADEL can get the user information"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request on the identity provider"
        },
        "idAttribute": {
          "type": "string",
          "example": "user_id",
          "description": "Identifying attribute of the user in the response of the user_endpoint",
          "title": "identifying attribute of the user in the response of the user_endpoint"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1AdminServiceUpdateGenericOIDCProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Google"
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com/",
          "description": "the OIDC issuer of the identity provider"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "client id generated by the identity provider"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "client secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request on the identity provider"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        },
        "isIdTokenMapping": {
          "type": "boolean"
        }
      }
    },
    "v1AdminServiceUpdateGitHubEnterpriseServerProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "GitHub"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitHub"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "authorizationEndpoint": {
          "type": "string"
        },
        "tokenEndpoint": {
          "type": "string"
        },
        "userEndpoint": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitHub"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1AdminServiceUpdateGitHubProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "GitHub"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitHub"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client_secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitHub"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1AdminServiceUpdateGitLabProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "GitLab",
          "description": "GitLab will be used as default, if no name is provided"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitLab"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitLab"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1AdminServiceUpdateGitLabSelfHostedProviderBody": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "example": "GitLab"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitLab"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitLab"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1AdminServiceUpdateGoogleProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Google"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by Google"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to Google"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1AdminServiceUpdateJWTProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "My Provider"
        },
        "issuer": {
          "type": "string"
        },
        "jwtEndpoint": {
          "type": "string"
        },
        "keysEndpoint": {
          "type": "string"
        },
        "headerName": {
          "type": "string"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1AdminServiceUpdateLDAPProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "servers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startTls": {
          "type": "boolean"
        },
        "baseDn": {
          "type": "string"
        },
        "bindDn": {
          "type": "string"
        },
        "bindPassword": {
          "type": "string"
        },
        "userBase": {
          "type": "string"
        },
        "userObjectClasses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeout": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/idpv1LDAPAttributes"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1AdminServiceUpdateSAMLProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "metadataXml": {
          "type": "string",
          "format": "byte"
        },
        "metadataUrl": {
          "type": "string",
          "example": "https://test.com/saml/metadata",
          "title": "Url to the metadata of the SAML identity provider"
        },
        "binding": {
          "$ref": "#/definitions/idpv1SAMLBinding",
          "description": "Binding which defines the type of communication with the identity provider."
        },
        "withSignedRequest": {
          "type": "boolean",
          "title": "Boolean which defines if the authentication requests are signed"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        },
        "nameIdFormat": {
          "$ref": "#/definitions/idpv1SAMLNameIDFormat",
          "description": "Optionally specify the `nameid-format` requested."
        },
        "transientMappingAttributeName": {
          "type": "string",
          "description": "Optionally specify the name of the attribute, which will be used to map the user\nin case the nameid-format returned is `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`."
        }
      }
    },
    "v1Aggregate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "165617850743094785"
        },
        "type": {
          "$ref": "#/definitions/v1AggregateType"
        },
        "resourceOwner": {
          "type": "string",
          "example": "165617850930497249"
        }
      }
    },
    "v1AggregateType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "user"
        },
        "localized": {
          "$ref": "#/definitions/v1LocalizedMessage"
        }
      }
    },
    "v1AllProjectGrantQuery": {
      "type": "object",
      "properties": {
        "projectNameQuery": {
          "$ref": "#/definitions/v1GrantProjectNameQuery"
        },
        "roleKeyQuery": {
          "$ref": "#/definitions/v1GrantRoleKeyQuery"
        },
        "projectIdQuery": {
          "$ref": "#/definitions/v1ProjectIDQuery"
        },
        "grantedOrgIdQuery": {
          "$ref": "#/definitions/v1GrantedOrgIDQuery"
        }
      }
    },
    "v1App": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "state": {
          "$ref": "#/definitions/v1AppState",
          "description": "current state of the application"
        },
        "name": {
          "type": "string",
          "example": "Console"
        },
        "oidcConfig": {
          "$ref": "#/definitions/zitadelappv1OIDCConfig"
        },
        "apiConfig": {
          "$ref": "#/definitions/v1APIConfig"
        },
        "samlConfig": {
          "$ref": "#/definitions/zitadelappv1SAMLConfig"
        }
      }
    },
    "v1AppNameQuery": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Conso"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1AppQuery": {
      "type": "object",
      "properties": {
        "nameQuery": {
          "$ref": "#/definitions/v1AppNameQuery"
        }
      }
    },
    "v1AppState": {
      "type": "string",
      "enum": [
        "APP_STATE_UNSPECIFIED",
        "APP_STATE_ACTIVE",
        "APP_STATE_INACTIVE"
      ],
      "default": "APP_STATE_UNSPECIFIED"
    },
    "v1BulkAddProjectRolesRequestRole": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "group": {
          "type": "string"
        }
      }
    },
    "v1BulkAddProjectRolesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1BulkRemoveOrgMetadataRequest": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BulkRemoveOrgMetadataResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1BulkRemoveUserGrantRequest": {
      "type": "object",
      "properties": {
        "grantId": {
          "type": "array",
          "example": [
            "9384786806489455",
            "2984754806489455"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BulkRemoveUserGrantResponse": {
      "type": "object"
    },
    "v1BulkRemoveUserMetadataResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1BulkSetLimitsRequest": {
      "type": "object",
      "properties": {
        "limits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetLimitsRequest"
          }
        }
      }
    },
    "v1BulkSetLimitsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "targetDetails": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ObjectDetails"
          }
        }
      }
    },
    "v1BulkSetOrgMetadataRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "array",
          "example": [
            {
              "key": "test1",
              "value": "VGhpcyBpcyBteSBmaXJzdCB2YWx1ZQ=="
            },
            {
              "key": "test2",
              "value": "VGhpcyBpcyBteSBzZWNvbmQgdmFsdWU="
            }
          ],
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BulkSetOrgMetadataRequestMetadata"
          },
          "description": "The values have to be base64 encoded.",
          "title": "Medata (Key/Value)"
        }
      }
    },
    "v1BulkSetOrgMetadataRequestMetadata": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1BulkSetOrgMetadataResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1BulkSetUserMetadataRequestMetadata": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1BulkSetUserMetadataResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1Change": {
      "type": "object",
      "properties": {
        "changeDate": {
          "type": "string",
          "format": "date-time",
          "example": "2019-04-01T08:45:00.000000Z",
          "description": "the creation date of an event"
        },
        "eventType": {
          "$ref": "#/definitions/v1LocalizedMessage"
        },
        "sequence": {
          "type": "string",
          "format": "uint64",
          "example": "2"
        },
        "editorId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "the id of the user who created the event"
        },
        "editorDisplayName": {
          "type": "string",
          "example": "Gigi Giraffe",
          "description": "the display name of the editor"
        },
        "resourceOwnerId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "the organization the event belongs to"
        },
        "editorPreferredLoginName": {
          "type": "string",
          "example": "gigi@acme.zitadel.ch",
          "description": "the preferred login name of the editor"
        },
        "editorAvatarUrl": {
          "type": "string",
          "example": "https://api.zitadel.ch/assets/v1/avatar-32432jkh4kj32",
          "description": "avatar URL of the editor"
        }
      }
    },
    "v1ChangeQuery": {
      "type": "object",
      "properties": {
        "sequence": {
          "type": "string",
          "format": "uint64",
          "example": "2",
          "description": "sequence represents the order of events. It's always counting"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "example": 20,
          "description": "Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken."
        },
        "asc": {
          "type": "boolean",
          "description": "default is descending"
        }
      },
      "description": "Filter possibility for the changes/history of an Object.",
      "title": "Query for Changes of an Object"
    },
    "v1ClearFlowResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ClearViewResponse": {
      "type": "object",
      "title": "This is an empty response"
    },
    "v1CreateActionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "log context",
          "maxLength": 200,
          "minLength": 1
        },
        "script": {
          "type": "string",
          "example": "function log(context, calls){console.log(context)}",
          "description": "Javascript code that should be executed",
          "maxLength": 10000,
          "minLength": 1
        },
        "timeout": {
          "type": "string",
          "description": "after which time the action will be terminated if not finished"
        },
        "allowedToFail": {
          "type": "boolean",
          "description": "when true, the next action will be called even if this action fails"
        }
      },
      "required": [
        "name",
        "script"
      ]
    },
    "v1CreateActionResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1CreateInstanceRequest": {
      "type": "object",
      "properties": {
        "instanceName": {
          "type": "string"
        },
        "firstOrgName": {
          "type": "string"
        },
        "customDomain": {
          "type": "string"
        },
        "human": {
          "$ref": "#/definitions/v1CreateInstanceRequestHuman",
          "title": "oneof field for the user managing the instance"
        },
        "machine": {
          "$ref": "#/definitions/v1CreateInstanceRequestMachine"
        },
        "defaultLanguage": {
          "type": "string"
        }
      }
    },
    "v1CreateInstanceRequestEmail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "isEmailVerified": {
          "type": "boolean"
        }
      }
    },
    "v1CreateInstanceRequestHuman": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "email": {
          "$ref": "#/definitions/v1CreateInstanceRequestEmail"
        },
        "profile": {
          "$ref": "#/definitions/v1CreateInstanceRequestProfile"
        },
        "password": {
          "$ref": "#/definitions/v1CreateInstanceRequestPassword"
        }
      }
    },
    "v1CreateInstanceRequestMachine": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "personalAccessToken": {
          "$ref": "#/definitions/v1CreateInstanceRequestPersonalAccessToken"
        },
        "machineKey": {
          "$ref": "#/definitions/CreateInstanceRequestMachineKey"
        }
      }
    },
    "v1CreateInstanceRequestPassword": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "passwordChangeRequired": {
          "type": "boolean"
        }
      }
    },
    "v1CreateInstanceRequestPersonalAccessToken": {
      "type": "object",
      "properties": {
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "example": "2519-04-01T08:45:00.000000Z",
          "description": "The date the token will expire and no logins will be possible"
        }
      }
    },
    "v1CreateInstanceRequestProfile": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "preferredLanguage": {
          "type": "string"
        }
      }
    },
    "v1CreateInstanceResponse": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "pat": {
          "type": "string"
        },
        "machineKey": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1DataAPIApplication": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "app": {
          "$ref": "#/definitions/v1AddAPIAppRequest"
        }
      }
    },
    "v1DataAction": {
      "type": "object",
      "properties": {
        "actionId": {
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/v1CreateActionRequest"
        }
      }
    },
    "v1DataAppKey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1KeyType"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "publicKey": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1DataHumanUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/v1ImportHumanUserRequest"
        }
      }
    },
    "v1DataJWTIDP": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string"
        },
        "idp": {
          "$ref": "#/definitions/v1AddOrgJWTIDPRequest"
        }
      }
    },
    "v1DataMachineKey": {
      "type": "object",
      "properties": {
        "keyId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1KeyType"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "publicKey": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1DataMachineUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/v1AddMachineUserRequest"
        }
      }
    },
    "v1DataOIDCApplication": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "app": {
          "$ref": "#/definitions/v1AddOIDCAppRequest"
        }
      }
    },
    "v1DataOIDCIDP": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string"
        },
        "idp": {
          "$ref": "#/definitions/v1AddOrgOIDCIDPRequest"
        }
      }
    },
    "v1DataProject": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/v1AddProjectRequest"
        }
      }
    },
    "v1DataProjectGrant": {
      "type": "object",
      "properties": {
        "grantId": {
          "type": "string"
        },
        "projectGrant": {
          "$ref": "#/definitions/v1AddProjectGrantRequest"
        }
      }
    },
    "v1DeactivateActionResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1DeactivateAppResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1DeactivateEmailProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1DeactivateIDPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1DeactivateOrgIDPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1DeactivateOrgRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1DeactivateOrgResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1DeactivateProjectGrantResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1DeactivateProjectResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1DeactivateSMSProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1DeactivateSMTPConfigResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1DeactivateUserGrantResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1DebugNotificationProvider": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "compact": {
          "type": "boolean"
        }
      }
    },
    "v1DeleteActionResponse": {
      "type": "object"
    },
    "v1DomainFieldName": {
      "type": "string",
      "enum": [
        "DOMAIN_FIELD_NAME_UNSPECIFIED",
        "DOMAIN_FIELD_NAME_DOMAIN",
        "DOMAIN_FIELD_NAME_PRIMARY",
        "DOMAIN_FIELD_NAME_GENERATED",
        "DOMAIN_FIELD_NAME_CREATION_DATE"
      ],
      "default": "DOMAIN_FIELD_NAME_UNSPECIFIED"
    },
    "v1DomainGeneratedQuery": {
      "type": "object",
      "properties": {
        "generated": {
          "type": "boolean",
          "description": "generated domains"
        }
      },
      "title": "DomainGeneratedQuery is always equals"
    },
    "v1DomainNameQuery": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "zitadel.cloud"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1DomainPolicy": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "userLoginMustBeDomain": {
          "type": "boolean",
          "description": "the username has to end with the domain of its organization"
        },
        "isDefault": {
          "type": "boolean",
          "description": "defines if the organization's admin changed the policy"
        },
        "validateOrgDomains": {
          "type": "boolean",
          "description": "defines if organization domains should be validated org count as validated automatically"
        },
        "smtpSenderAddressMatchesInstanceDomain": {
          "type": "boolean",
          "description": "defines if the SMTP sender address domain should match an existing domain on the instance"
        }
      }
    },
    "v1DomainPrimaryQuery": {
      "type": "object",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "primary domains"
        }
      },
      "title": "DomainPrimaryQuery is always equals"
    },
    "v1DomainValidationType": {
      "type": "string",
      "enum": [
        "DOMAIN_VALIDATION_TYPE_UNSPECIFIED",
        "DOMAIN_VALIDATION_TYPE_HTTP",
        "DOMAIN_VALIDATION_TYPE_DNS"
      ],
      "default": "DOMAIN_VALIDATION_TYPE_UNSPECIFIED"
    },
    "v1DomainsQuery": {
      "type": "object",
      "properties": {
        "domains": {
          "type": "array",
          "example": [
            "my-instace.zitadel.cloud",
            "auth.custom.com"
          ],
          "items": {
            "type": "string"
          },
          "description": "Return the instances that have the requested domains",
          "maxItems": 20
        }
      }
    },
    "v1Editor": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "165617389845094785"
        },
        "displayName": {
          "type": "string",
          "example": "Minnie Mouse"
        },
        "service": {
          "type": "string",
          "example": "Management-API"
        }
      }
    },
    "v1EmailProvider": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/v1EmailProviderState"
        },
        "description": {
          "type": "string"
        },
        "smtp": {
          "$ref": "#/definitions/v1EmailProviderSMTP"
        },
        "http": {
          "$ref": "#/definitions/v1EmailProviderHTTP"
        }
      }
    },
    "v1EmailProviderHTTP": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        }
      }
    },
    "v1EmailProviderSMTP": {
      "type": "object",
      "properties": {
        "senderAddress": {
          "type": "string",
          "example": "noreply@m.zitadel.cloud"
        },
        "senderName": {
          "type": "string",
          "example": "ZITADEL"
        },
        "tls": {
          "type": "boolean"
        },
        "host": {
          "type": "string",
          "example": "smtp.postmarkapp.com:587"
        },
        "user": {
          "type": "string",
          "example": "197f0117-529e-443d-bf6c-0292dd9a02b7"
        },
        "replyToAddress": {
          "type": "string",
          "example": "replyto@m.zitadel.cloud"
        }
      }
    },
    "v1EmailProviderState": {
      "type": "string",
      "enum": [
        "EMAIL_PROVIDER_STATE_UNSPECIFIED",
        "EMAIL_PROVIDER_ACTIVE",
        "EMAIL_PROVIDER_INACTIVE"
      ],
      "default": "EMAIL_PROVIDER_STATE_UNSPECIFIED"
    },
    "v1EmailVerificationDoneScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        },
        "cancelButtonText": {
          "type": "string"
        },
        "loginButtonText": {
          "type": "string"
        }
      }
    },
    "v1EmailVerificationScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "codeLabel": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        },
        "resendButtonText": {
          "type": "string"
        }
      }
    },
    "v1EventType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "user.human.added"
        },
        "localized": {
          "$ref": "#/definitions/v1LocalizedMessage"
        }
      }
    },
    "v1ExistsDomainResponse": {
      "type": "object",
      "properties": {
        "exists": {
          "type": "boolean"
        }
      }
    },
    "v1ExportDataRequest": {
      "type": "object",
      "properties": {
        "orgIds": {
          "type": "array",
          "example": [
            "119345938451786790",
            "76693875574553926"
          ],
          "items": {
            "type": "string"
          }
        },
        "excludedOrgIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "withPasswords": {
          "type": "boolean"
        },
        "withOtp": {
          "type": "boolean"
        },
        "responseOutput": {
          "type": "boolean"
        },
        "localOutput": {
          "$ref": "#/definitions/ExportDataRequestLocalOutput"
        },
        "s3Output": {
          "$ref": "#/definitions/ExportDataRequestS3Output"
        },
        "gcsOutput": {
          "$ref": "#/definitions/ExportDataRequestGCSOutput"
        },
        "timeout": {
          "type": "string",
          "example": "30m"
        }
      }
    },
    "v1ExportDataResponse": {
      "type": "object",
      "properties": {
        "orgs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeladminv1DataOrg"
          }
        }
      }
    },
    "v1ExternalRegistrationUserOverviewScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "emailLabel": {
          "type": "string"
        },
        "usernameLabel": {
          "type": "string"
        },
        "firstnameLabel": {
          "type": "string"
        },
        "lastnameLabel": {
          "type": "string"
        },
        "nicknameLabel": {
          "type": "string"
        },
        "languageLabel": {
          "type": "string"
        },
        "phoneLabel": {
          "type": "string"
        },
        "tosAndPrivacyLabel": {
          "type": "string"
        },
        "tosConfirm": {
          "type": "string"
        },
        "tosLinkText": {
          "type": "string"
        },
        "privacyLinkText": {
          "type": "string"
        },
        "backButtonText": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        },
        "privacyConfirm": {
          "type": "string"
        }
      }
    },
    "v1ExternalUserNotFoundScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "linkButtonText": {
          "type": "string"
        },
        "autoRegisterButtonText": {
          "type": "string"
        },
        "tosAndPrivacyLabel": {
          "type": "string"
        },
        "tosConfirm": {
          "type": "string"
        },
        "tosLinkText": {
          "type": "string"
        },
        "privacyLinkText": {
          "type": "string"
        },
        "privacyConfirm": {
          "type": "string"
        }
      }
    },
    "v1FlowState": {
      "type": "string",
      "enum": [
        "FLOW_STATE_UNSPECIFIED",
        "FLOW_STATE_INACTIVE",
        "FLOW_STATE_ACTIVE"
      ],
      "default": "FLOW_STATE_UNSPECIFIED"
    },
    "v1FooterText": {
      "type": "object",
      "properties": {
        "tos": {
          "type": "string"
        },
        "privacyPolicy": {
          "type": "string"
        },
        "help": {
          "type": "string"
        },
        "supportEmail": {
          "type": "string"
        }
      }
    },
    "v1GenerateMachineSecretResponse": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1GenerateOrgDomainValidationResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "example": "ofSBHsSAVHAoTIE4Iv2gwhaYhTjcY5QX"
        },
        "url": {
          "type": "string",
          "example": "https://testdomain.com/.well-known/zitadel-challenge/ofSBHsSAVHAoTIE4Iv2gwhaYhTjcY5QX"
        }
      }
    },
    "v1GetActionResponse": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/v1Action"
        }
      }
    },
    "v1GetAllowedLanguagesResponse": {
      "type": "object",
      "properties": {
        "languages": {
          "type": "array",
          "example": [
            "en",
            "de",
            "it"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetAppByIDResponse": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/v1App"
        }
      }
    },
    "v1GetAppKeyResponse": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/v1Key"
        }
      }
    },
    "v1GetCustomDomainPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1DomainPolicy"
        },
        "isDefault": {
          "type": "boolean",
          "title": "deprecated: is_default is also defined in zitadel.policy.v1.DomainPolicy"
        }
      }
    },
    "v1GetCustomOrgIAMPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1OrgIAMPolicy"
        },
        "isDefault": {
          "type": "boolean",
          "title": "deprecated: is_default is also defined in zitadel.policy.v1.OrgIAMPolicy"
        }
      }
    },
    "v1GetDefaultLabelPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1LabelPolicy"
        }
      }
    },
    "v1GetDefaultLanguageResponse": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "example": "en"
        }
      }
    },
    "v1GetDefaultLockoutPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1LockoutPolicy"
        }
      }
    },
    "v1GetDefaultLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1LoginPolicy"
        }
      }
    },
    "v1GetDefaultNotificationPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1NotificationPolicy"
        }
      }
    },
    "v1GetDefaultOrgResponse": {
      "type": "object",
      "properties": {
        "org": {
          "$ref": "#/definitions/orgv1Org"
        }
      }
    },
    "v1GetDefaultPasswordAgePolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PasswordAgePolicy"
        }
      }
    },
    "v1GetDefaultPasswordComplexityPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PasswordComplexityPolicy"
        }
      }
    },
    "v1GetDefaultPrivacyPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PrivacyPolicy"
        }
      }
    },
    "v1GetEmailProviderByIdResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1EmailProvider"
        }
      }
    },
    "v1GetEmailProviderResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1EmailProvider"
        }
      }
    },
    "v1GetFileSystemNotificationProviderResponse": {
      "type": "object",
      "properties": {
        "provider": {
          "$ref": "#/definitions/v1DebugNotificationProvider"
        }
      }
    },
    "v1GetFlowResponse": {
      "type": "object",
      "properties": {
        "flow": {
          "$ref": "#/definitions/actionv1Flow"
        }
      }
    },
    "v1GetGrantedProjectByIDResponse": {
      "type": "object",
      "properties": {
        "grantedProject": {
          "$ref": "#/definitions/v1GrantedProject"
        }
      }
    },
    "v1GetHumanEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "email": {
          "$ref": "#/definitions/userv1Email"
        }
      }
    },
    "v1GetHumanPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "phone": {
          "$ref": "#/definitions/userv1Phone"
        }
      }
    },
    "v1GetHumanProfileResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "profile": {
          "$ref": "#/definitions/userv1Profile"
        }
      }
    },
    "v1GetIAMResponse": {
      "type": "object",
      "properties": {
        "globalOrgId": {
          "type": "string",
          "title": "deprecated: use default_org_id instead"
        },
        "iamProjectId": {
          "type": "string"
        },
        "defaultOrgId": {
          "type": "string"
        }
      }
    },
    "v1GetInstanceResponse": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/v1InstanceDetail"
        }
      }
    },
    "v1GetLogNotificationProviderResponse": {
      "type": "object",
      "properties": {
        "provider": {
          "$ref": "#/definitions/v1DebugNotificationProvider"
        }
      }
    },
    "v1GetMachineKeyByIDsResponse": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/v1Key"
        }
      }
    },
    "v1GetMyEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "email": {
          "$ref": "#/definitions/userv1Email"
        }
      }
    },
    "v1GetMyInstanceResponse": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/v1InstanceDetail"
        }
      }
    },
    "v1GetMyLabelPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1LabelPolicy"
        }
      }
    },
    "v1GetMyLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1LoginPolicy"
        }
      }
    },
    "v1GetMyMetadataResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/metadatav1Metadata"
        }
      }
    },
    "v1GetMyOrgResponse": {
      "type": "object",
      "properties": {
        "org": {
          "$ref": "#/definitions/orgv1Org"
        }
      }
    },
    "v1GetMyPasswordComplexityPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PasswordComplexityPolicy"
        }
      }
    },
    "v1GetMyPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "phone": {
          "$ref": "#/definitions/userv1Phone"
        }
      }
    },
    "v1GetMyPrivacyPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PrivacyPolicy"
        }
      }
    },
    "v1GetMyProfileResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "profile": {
          "$ref": "#/definitions/userv1Profile"
        }
      }
    },
    "v1GetMyUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/userv1User"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of the last successful login"
        }
      }
    },
    "v1GetOIDCInformationResponse": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "discoveryEndpoint": {
          "type": "string"
        }
      }
    },
    "v1GetOIDCSettingsResponse": {
      "type": "object",
      "properties": {
        "settings": {
          "$ref": "#/definitions/v1OIDCSettings"
        }
      }
    },
    "v1GetOrgByDomainGlobalResponse": {
      "type": "object",
      "properties": {
        "org": {
          "$ref": "#/definitions/orgv1Org"
        }
      }
    },
    "v1GetOrgByIDResponse": {
      "type": "object",
      "properties": {
        "org": {
          "$ref": "#/definitions/orgv1Org"
        }
      }
    },
    "v1GetOrgIDPByIDResponse": {
      "type": "object",
      "properties": {
        "idp": {
          "$ref": "#/definitions/idpv1IDP"
        }
      }
    },
    "v1GetOrgMetadataResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/metadatav1Metadata"
        }
      }
    },
    "v1GetPersonalAccessTokenByIDsResponse": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/userv1PersonalAccessToken"
        }
      }
    },
    "v1GetProjectByIDResponse": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/v1Project"
        }
      }
    },
    "v1GetProjectGrantByIDResponse": {
      "type": "object",
      "properties": {
        "projectGrant": {
          "$ref": "#/definitions/v1GrantedProject"
        }
      }
    },
    "v1GetRestrictionsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "disallowPublicOrgRegistration": {
          "type": "boolean",
          "description": "defines if ZITADEL should expose the endpoint /ui/login/register/org. If it is true, the org registration endpoint returns the HTTP status 404 on GET requests, and 409 on POST requests."
        },
        "allowedLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "defines the allowed languages. If allowed_languages has one or more entries, only these languages are allowed. If it has no entries, all supported languages are allowed"
        }
      }
    },
    "v1GetSMSProviderResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1SMSProvider"
        }
      }
    },
    "v1GetSMTPConfigByIdResponse": {
      "type": "object",
      "properties": {
        "smtpConfig": {
          "$ref": "#/definitions/v1SMTPConfig"
        }
      }
    },
    "v1GetSMTPConfigResponse": {
      "type": "object",
      "properties": {
        "smtpConfig": {
          "$ref": "#/definitions/v1SMTPConfig"
        }
      }
    },
    "v1GetSecretGeneratorResponse": {
      "type": "object",
      "properties": {
        "secretGenerator": {
          "$ref": "#/definitions/v1SecretGenerator"
        }
      }
    },
    "v1GetSecurityPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1SecurityPolicy"
        }
      }
    },
    "v1GetUserByLoginNameGlobalResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/userv1User"
        }
      }
    },
    "v1GetUserGrantByIDResponse": {
      "type": "object",
      "properties": {
        "userGrant": {
          "$ref": "#/definitions/zitadeluserv1UserGrant"
        }
      }
    },
    "v1GetUserMetadataResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/metadatav1Metadata"
        }
      }
    },
    "v1GrantProjectNameQuery": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ZITADEL"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1GrantRoleKeyQuery": {
      "type": "object",
      "properties": {
        "roleKey": {
          "type": "string",
          "example": "role.super.man"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1GrantedOrgIDQuery": {
      "type": "object",
      "properties": {
        "grantedOrgId": {
          "type": "string",
          "example": "69629023906488334"
        }
      }
    },
    "v1GrantedProject": {
      "type": "object",
      "properties": {
        "grantId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "grantedOrgId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "grantedOrgName": {
          "type": "string",
          "example": "Some Organization"
        },
        "grantedRoleKeys": {
          "type": "array",
          "example": [
            "role.super.man"
          ],
          "items": {
            "type": "string"
          }
        },
        "state": {
          "$ref": "#/definitions/v1ProjectGrantState",
          "description": "current state of the project grant"
        },
        "projectId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "projectName": {
          "type": "string",
          "example": "ZITADEL"
        },
        "projectOwnerId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "projectOwnerName": {
          "type": "string",
          "example": "ZITADEL"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1HTTPConfig": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        }
      }
    },
    "v1IDPFieldName": {
      "type": "string",
      "enum": [
        "IDP_FIELD_NAME_UNSPECIFIED",
        "IDP_FIELD_NAME_NAME"
      ],
      "default": "IDP_FIELD_NAME_UNSPECIFIED"
    },
    "v1IDPIDQuery": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        }
      }
    },
    "v1IDPLoginPolicyLink": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "the id of the identity provider"
        },
        "idpName": {
          "type": "string",
          "example": "google",
          "description": "the name of the identity provider"
        },
        "idpType": {
          "$ref": "#/definitions/idpv1IDPType",
          "example": [
            "IDP_TYPE_OIDC"
          ],
          "description": "the authorization framework of the identity provider"
        }
      }
    },
    "v1IDPNameQuery": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "google"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1IDPOwnerType": {
      "type": "string",
      "enum": [
        "IDP_OWNER_TYPE_UNSPECIFIED",
        "IDP_OWNER_TYPE_SYSTEM",
        "IDP_OWNER_TYPE_ORG"
      ],
      "default": "IDP_OWNER_TYPE_UNSPECIFIED",
      "description": "the owner of the identity provider.\n\n - IDP_OWNER_TYPE_SYSTEM: system is managed by the ZITADEL administrators\n - IDP_OWNER_TYPE_ORG: org is managed by de organization administrators"
    },
    "v1IDPOwnerTypeQuery": {
      "type": "object",
      "properties": {
        "ownerType": {
          "$ref": "#/definitions/v1IDPOwnerType",
          "description": "search for custom or global identity providers"
        }
      }
    },
    "v1IDPStylingType": {
      "type": "string",
      "enum": [
        "STYLING_TYPE_UNSPECIFIED",
        "STYLING_TYPE_GOOGLE"
      ],
      "default": "STYLING_TYPE_UNSPECIFIED"
    },
    "v1IDPUserLink": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "the id of the user"
        },
        "idpId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "the id of the identity provider"
        },
        "idpName": {
          "type": "string",
          "example": "google",
          "description": "the name of the identity provider"
        },
        "providedUserId": {
          "type": "string",
          "example": "as-12-df-89",
          "description": "the id of the user provided by the identity provider"
        },
        "providedUserName": {
          "type": "string",
          "example": "gigi.long-neck@gmail.com",
          "description": "the id of the identity provider"
        },
        "idpType": {
          "$ref": "#/definitions/idpv1IDPType",
          "description": "the authorization framework of the identity provider"
        }
      }
    },
    "v1IdsQuery": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "4820840938402429"
        }
      },
      "title": "IdQuery always equals"
    },
    "v1ImportDataError": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1ImportDataRequest": {
      "type": "object",
      "properties": {
        "dataOrgs": {
          "$ref": "#/definitions/zitadeladminv1ImportDataOrg"
        },
        "dataOrgsv1": {
          "$ref": "#/definitions/zitadelv1v1ImportDataOrg"
        },
        "dataOrgsLocal": {
          "$ref": "#/definitions/ImportDataRequestLocalInput"
        },
        "dataOrgsv1Local": {
          "$ref": "#/definitions/ImportDataRequestLocalInput"
        },
        "dataOrgsS3": {
          "$ref": "#/definitions/ImportDataRequestS3Input"
        },
        "dataOrgsv1S3": {
          "$ref": "#/definitions/ImportDataRequestS3Input"
        },
        "dataOrgsGcs": {
          "$ref": "#/definitions/ImportDataRequestGCSInput"
        },
        "dataOrgsv1Gcs": {
          "$ref": "#/definitions/ImportDataRequestGCSInput"
        },
        "timeout": {
          "type": "string"
        }
      }
    },
    "v1ImportDataResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportDataError"
          }
        },
        "success": {
          "$ref": "#/definitions/v1ImportDataSuccess"
        }
      }
    },
    "v1ImportDataSuccess": {
      "type": "object",
      "properties": {
        "orgs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportDataSuccessOrg"
          }
        }
      }
    },
    "v1ImportDataSuccessOrg": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "projectIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "projectRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "oidcAppIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "apiAppIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "humanUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machineUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "actionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "triggerActions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmanagementv1SetTriggerActionsRequest"
          }
        },
        "projectGrants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportDataSuccessProjectGrant"
          }
        },
        "userGrants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportDataSuccessUserGrant"
          }
        },
        "orgMembers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "projectMembers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportDataSuccessProjectMember"
          }
        },
        "projectGrantMembers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportDataSuccessProjectGrantMember"
          }
        },
        "oidcIpds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "jwtIdps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "idpLinks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportDataSuccessUserLinks"
          }
        },
        "userMetadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportDataSuccessUserMetadata"
          }
        },
        "domains": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "appKeys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machineKeys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ImportDataSuccessProjectGrant": {
      "type": "object",
      "properties": {
        "grantId": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "orgId": {
          "type": "string"
        }
      }
    },
    "v1ImportDataSuccessProjectGrantMember": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "grantId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1ImportDataSuccessProjectMember": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1ImportDataSuccessUserGrant": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1ImportDataSuccessUserLinks": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "externalUserId": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "idpId": {
          "type": "string"
        }
      }
    },
    "v1ImportDataSuccessUserMetadata": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "v1ImportHumanUserRequest": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "example": "minnie-mouse"
        },
        "profile": {
          "$ref": "#/definitions/v1ImportHumanUserRequestProfile"
        },
        "email": {
          "$ref": "#/definitions/v1ImportHumanUserRequestEmail"
        },
        "phone": {
          "$ref": "#/definitions/v1ImportHumanUserRequestPhone"
        },
        "password": {
          "type": "string"
        },
        "hashedPassword": {
          "$ref": "#/definitions/v1ImportHumanUserRequestHashedPassword"
        },
        "passwordChangeRequired": {
          "type": "boolean",
          "example": true,
          "description": "If this is set to true, the user has to change the password on the next login."
        },
        "requestPasswordlessRegistration": {
          "type": "boolean",
          "example": true,
          "description": "If this is set to true, you will get a link for the passwordless/passkey registration in the response."
        },
        "otpCode": {
          "type": "string"
        },
        "idps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportHumanUserRequestIDP"
          },
          "description": "To link your user directly with an external identity provider (Identity brokering)",
          "title": "Identity Provider"
        }
      },
      "title": "Describe my Import Human User Request",
      "required": [
        "userName",
        "profile",
        "email"
      ]
    },
    "v1ImportHumanUserRequestEmail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "minnie@mouse.com",
          "description": "Object that contains the email address and a verified flag."
        },
        "isEmailVerified": {
          "type": "boolean",
          "description": "If email verified is set to true, the email will be added as verified and the user doesn't have to verify."
        }
      },
      "title": "Email",
      "required": [
        "email"
      ]
    },
    "v1ImportHumanUserRequestHashedPassword": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "example": "$2y$12$hXUrnqdq1RIIYZ2HPytIIe5lXdIvbhqrTvdPsSF7o.jFh817Z6lwm",
          "description": "Encoded hash of a password in Modular Crypt Format: https://zitadel.com/docs/concepts/architecture/secrets#hashed-secrets"
        }
      },
      "description": "Use this to import hashed passwords from another system.",
      "title": "Hashed Password"
    },
    "v1ImportHumanUserRequestIDP": {
      "type": "object",
      "properties": {
        "configId": {
          "type": "string",
          "example": "idp-config-id",
          "description": "The internal ID of the identity provider configured in ZITADEL.",
          "maxLength": 200,
          "minLength": 1
        },
        "externalUserId": {
          "type": "string",
          "example": "external-user-id",
          "description": "The id of the user in the external identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "displayName": {
          "type": "string",
          "example": "minnie.mouse@gmail.com",
          "description": "A display name ZITADEL can show on the linked provider.",
          "maxLength": 200
        }
      }
    },
    "v1ImportHumanUserRequestPhone": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41 71 000 00 00",
          "description": "mobile phone number of the user. (use global pattern of spec https://tools.ietf.org/html/rfc3966)",
          "maxLength": 50,
          "minLength": 1
        },
        "isPhoneVerified": {
          "type": "boolean"
        }
      },
      "description": "Object that contains the number and a verified flag",
      "title": "Phone"
    },
    "v1ImportHumanUserRequestProfile": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Minnie",
          "maxLength": 200,
          "minLength": 1
        },
        "lastName": {
          "type": "string",
          "example": "Mouse",
          "maxLength": 200,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "example": "Mini",
          "maxLength": 200
        },
        "displayName": {
          "type": "string",
          "example": "Minnie Mouse",
          "maxLength": 200
        },
        "preferredLanguage": {
          "type": "string",
          "example": "en",
          "maxLength": 10
        },
        "gender": {
          "$ref": "#/definitions/userv1Gender",
          "example": "GENDER_FEMALE"
        }
      },
      "description": "Profile includes the basic information of a user, like first name, last name, etc.",
      "title": "Profile",
      "required": [
        "firstName",
        "lastName"
      ]
    },
    "v1ImportHumanUserResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "passwordlessRegistration": {
          "$ref": "#/definitions/ImportHumanUserResponsePasswordlessRegistration"
        }
      }
    },
    "v1InitMFADoneScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "cancelButtonText": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        }
      }
    },
    "v1InitMFAOTPScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "descriptionOtp": {
          "type": "string"
        },
        "secretLabel": {
          "type": "string"
        },
        "codeLabel": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        },
        "cancelButtonText": {
          "type": "string"
        }
      }
    },
    "v1InitMFAPromptScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "otpOption": {
          "type": "string"
        },
        "u2fOption": {
          "type": "string"
        },
        "skipButtonText": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        }
      }
    },
    "v1InitMFAU2FScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tokenNameLabel": {
          "type": "string"
        },
        "notSupported": {
          "type": "string"
        },
        "registerTokenButtonText": {
          "type": "string"
        },
        "errorRetry": {
          "type": "string"
        }
      }
    },
    "v1InitPasswordDoneScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        },
        "cancelButtonText": {
          "type": "string"
        }
      }
    },
    "v1InitPasswordScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "codeLabel": {
          "type": "string"
        },
        "newPasswordLabel": {
          "type": "string"
        },
        "newPasswordConfirmLabel": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        },
        "resendButtonText": {
          "type": "string"
        }
      }
    },
    "v1InitializeUserDoneScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "cancelButtonText": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        }
      }
    },
    "v1InitializeUserScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "codeLabel": {
          "type": "string"
        },
        "newPasswordLabel": {
          "type": "string"
        },
        "newPasswordConfirmLabel": {
          "type": "string"
        },
        "resendButtonText": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        }
      }
    },
    "v1InstanceDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "state": {
          "$ref": "#/definitions/instancev1State",
          "description": "current state of the instance"
        },
        "name": {
          "type": "string",
          "example": "ZITADEL"
        },
        "version": {
          "type": "string",
          "example": "1.0.0"
        },
        "domains": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelinstancev1Domain"
          }
        }
      }
    },
    "v1InstanceFeature": {
      "type": "string",
      "enum": [
        "INSTANCE_FEATURE_UNSPECIFIED",
        "INSTANCE_FEATURE_LOGIN_DEFAULT_ORG"
      ],
      "default": "INSTANCE_FEATURE_UNSPECIFIED"
    },
    "v1IsOrgUniqueResponse": {
      "type": "object",
      "properties": {
        "isUnique": {
          "type": "boolean"
        }
      }
    },
    "v1IsReachedQuery": {
      "type": "object",
      "properties": {
        "reached": {
          "type": "boolean",
          "description": "only reached milestones"
        }
      }
    },
    "v1IsUserUniqueResponse": {
      "type": "object",
      "properties": {
        "isUnique": {
          "type": "boolean"
        }
      }
    },
    "v1Key": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "type": {
          "$ref": "#/definitions/v1KeyType",
          "example": "KEY_TYPE_JSON",
          "description": "the file type of the key"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "example": "3019-04-01T08:45:00.000000Z",
          "description": "the date a key will expire"
        }
      }
    },
    "v1KeyType": {
      "type": "string",
      "enum": [
        "KEY_TYPE_UNSPECIFIED",
        "KEY_TYPE_JSON"
      ],
      "default": "KEY_TYPE_UNSPECIFIED"
    },
    "v1LabelPolicy": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "primaryColor": {
          "type": "string",
          "example": "#5469d4",
          "description": "hex value for primary color",
          "title": "hex value for primary color"
        },
        "isDefault": {
          "type": "boolean",
          "description": "defines if the organization's admin changed the policy",
          "title": "defines if the organization's admin changed the policy"
        },
        "hideLoginNameSuffix": {
          "type": "boolean",
          "description": "hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set",
          "title": "hides the org suffix on the login form if the scope \\\"urn:zitadel:iam:org:domain:primary:{domainname}\\\" is set"
        },
        "warnColor": {
          "type": "string",
          "example": "#CD3D56",
          "description": "hex value for warn color",
          "title": "hex value for secondary color"
        },
        "backgroundColor": {
          "type": "string",
          "example": "#FAFAFA",
          "description": "hex value for background color",
          "title": "hex value for background color"
        },
        "fontColor": {
          "type": "string",
          "example": "#000000",
          "description": "hex value for font color",
          "title": "hex value for font color"
        },
        "primaryColorDark": {
          "type": "string",
          "example": "#BBBAFA",
          "description": "hex value for the primary color dark theme",
          "title": "hex value for primary color dark theme"
        },
        "backgroundColorDark": {
          "type": "string",
          "example": "#111827",
          "description": "hex value for background color dark theme",
          "title": "hex value for background color dark theme"
        },
        "warnColorDark": {
          "type": "string",
          "example": "#FF3B5B",
          "description": "hex value for warning color dark theme",
          "title": "hex value for warning color dark theme"
        },
        "fontColorDark": {
          "type": "string",
          "example": "#FFFFFF",
          "description": "hex value for font color dark theme",
          "title": "hex value for font color dark theme"
        },
        "disableWatermark": {
          "type": "boolean"
        },
        "logoUrl": {
          "type": "string",
          "example": "https://acme.com/assets/v1/165617850692654601/policy/label/logo-180950416321494657",
          "description": "hex value for font color dark theme"
        },
        "iconUrl": {
          "type": "string",
          "example": "https://acme.com/assets/v1/165617850692654601/policy/label/icon-180950498874178817",
          "description": "hex value for font color dark theme"
        },
        "logoUrlDark": {
          "type": "string",
          "example": "https://acme.com/assets/v1/165617850692654601/policy/label/logo-dark-180950229376461345",
          "description": "hex value for font color dark theme"
        },
        "iconUrlDark": {
          "type": "string",
          "example": "https://acme.com/assets/v1/165617850692654601/policy/label/icon-dark-180950243237405441",
          "description": "hex value for font color dark theme"
        },
        "fontUrl": {
          "type": "string"
        },
        "themeMode": {
          "$ref": "#/definitions/policyv1ThemeMode"
        }
      }
    },
    "v1LinkingUserDoneScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "cancelButtonText": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        }
      }
    },
    "v1LinkingUserPromptScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "linkButtonText": {
          "type": "string"
        },
        "otherButtonText": {
          "type": "string"
        }
      }
    },
    "v1ListActionsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1ActionFieldName",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ActionQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v1ListActionsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1ActionFieldName"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Action"
          }
        }
      }
    },
    "v1ListAggregateTypesRequest": {
      "type": "object"
    },
    "v1ListAggregateTypesResponse": {
      "type": "object",
      "properties": {
        "aggregateTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AggregateType"
          }
        }
      }
    },
    "v1ListAllProjectGrantsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AllProjectGrantQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v1ListAllProjectGrantsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GrantedProject"
          }
        }
      }
    },
    "v1ListAppChangesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Change"
          },
          "title": "zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info)"
        }
      }
    },
    "v1ListAppKeysResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Key"
          }
        }
      }
    },
    "v1ListAppsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1App"
          }
        }
      }
    },
    "v1ListDomainsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1DomainFieldName"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelinstancev1Domain"
          }
        }
      }
    },
    "v1ListEmailProvidersRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery"
        }
      }
    },
    "v1ListEmailProvidersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EmailProvider"
          }
        }
      }
    },
    "v1ListEventTypesRequest": {
      "type": "object"
    },
    "v1ListEventTypesResponse": {
      "type": "object",
      "properties": {
        "eventTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EventType"
          }
        }
      }
    },
    "v1ListEventsRequest": {
      "type": "object",
      "properties": {
        "sequence": {
          "type": "string",
          "format": "uint64",
          "example": "2",
          "description": "Sequence represents the order of events. It's always counting. If asc is false, the sequence is used as lesser than filter. If asc is true sequence is used as greater than filter. If the sequence is 0 the field is ignored."
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "example": 20,
          "description": "Maximum amount of events returned."
        },
        "asc": {
          "type": "boolean",
          "description": "default is descending sorting order"
        },
        "editorUserId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "eventTypes": {
          "type": "array",
          "example": [
            "user.human.added",
            "user.machine"
          ],
          "items": {
            "type": "string"
          },
          "description": "The types are filtered by 'or' and must match the type exactly."
        },
        "aggregateId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "aggregateTypes": {
          "type": "array",
          "example": "user",
          "items": {
            "type": "string"
          }
        },
        "resourceOwner": {
          "type": "string",
          "example": "69629023906488334"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "example": "2019-04-01T08:45:00.000000Z",
          "description": "Use from instead."
        },
        "range": {
          "$ref": "#/definitions/ListEventsRequestcreation_date_range"
        },
        "from": {
          "type": "string",
          "format": "date-time",
          "example": "2019-04-01T08:45:00.000000Z",
          "description": "If asc is false, the events returned are older than the UTC from date. If asc is true, the events returned are younger than from."
        }
      }
    },
    "v1ListEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eventv1Event"
          }
        }
      }
    },
    "v1ListFlowTriggerTypesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelactionv1TriggerType"
          }
        }
      }
    },
    "v1ListFlowTypesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelactionv1FlowType"
          }
        }
      }
    },
    "v1ListGrantedProjectRolesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/projectv1Role"
          }
        }
      }
    },
    "v1ListGrantedProjectsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProjectQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v1ListGrantedProjectsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GrantedProject"
          }
        }
      }
    },
    "v1ListHumanAuthFactorsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv1AuthFactor"
          }
        }
      }
    },
    "v1ListHumanLinkedIDPsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IDPUserLink"
          }
        }
      }
    },
    "v1ListHumanPasswordlessResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WebAuthNToken"
          }
        }
      }
    },
    "v1ListIAMMemberRolesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "roles": {
          "type": "array",
          "example": [
            "IAM_OWNER"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListIDPsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1IDPFieldName",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeladminv1IDPQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v1ListIDPsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1IDPFieldName"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/idpv1IDP"
          }
        }
      }
    },
    "v1ListInstanceDomainsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1DomainFieldName"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelinstancev1Domain"
          }
        }
      }
    },
    "v1ListInstanceTrustedDomainsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1DomainFieldName"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TrustedDomain"
          }
        }
      }
    },
    "v1ListInstancesRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "sortingColumn": {
          "$ref": "#/definitions/instancev1FieldName",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Query"
          },
          "title": "criterias the client is looking for"
        }
      },
      "description": "Search query for lists",
      "required": [
        "query"
      ]
    },
    "v1ListInstancesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "sortingColumn": {
          "$ref": "#/definitions/instancev1FieldName"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/instancev1Instance"
          }
        }
      }
    },
    "v1ListMachineKeysResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Key"
          }
        }
      }
    },
    "v1ListMilestonesRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1MilestoneFieldName",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MilestoneQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v1ListMilestonesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Milestone"
          }
        }
      }
    },
    "v1ListMyAuthFactorsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv1AuthFactor"
          }
        }
      }
    },
    "v1ListMyLinkedIDPsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        }
      }
    },
    "v1ListMyLinkedIDPsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IDPUserLink"
          }
        }
      }
    },
    "v1ListMyMembershipsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MembershipQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v1ListMyMembershipsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Membership"
          }
        }
      }
    },
    "v1ListMyMetadataRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetadataQuery"
          }
        }
      }
    },
    "v1ListMyMetadataResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/metadatav1Metadata"
          }
        }
      }
    },
    "v1ListMyPasswordlessResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WebAuthNToken"
          }
        }
      }
    },
    "v1ListMyProjectOrgsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OrgQuery"
          },
          "title": "criteria the client is looking for"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1OrgFieldName",
          "description": "States by which field the results are sorted."
        }
      }
    },
    "v1ListMyProjectOrgsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/orgv1Org"
          }
        }
      }
    },
    "v1ListMyProjectPermissionsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "example": [
            "RoleKey1",
            "RoleKey2"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListMyRefreshTokensRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1ListMyRefreshTokensResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RefreshToken"
          }
        }
      }
    },
    "v1ListMyUserChangesRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/v1ChangeQuery"
        }
      }
    },
    "v1ListMyUserChangesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Change"
          },
          "title": "zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info)"
        }
      }
    },
    "v1ListMyUserGrantsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        }
      }
    },
    "v1ListMyUserGrantsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelauthv1UserGrant"
          }
        }
      }
    },
    "v1ListMyUserSessionsRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1ListMyUserSessionsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv1Session"
          }
        }
      }
    },
    "v1ListMyZitadelPermissionsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "example": [
            "org.read",
            "org.write"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListOrgChangesRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/v1ChangeQuery",
          "title": "list limitations and ordering"
        }
      }
    },
    "v1ListOrgChangesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Change"
          },
          "title": "zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info)"
        }
      }
    },
    "v1ListOrgDomainsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelorgv1DomainSearchQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v1ListOrgDomainsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelorgv1Domain"
          }
        }
      }
    },
    "v1ListOrgIDPsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1IDPFieldName",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmanagementv1IDPQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v1ListOrgIDPsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1IDPFieldName"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/idpv1IDP"
          }
        }
      }
    },
    "v1ListOrgMemberRolesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "example": [
            "ORG_OWNER",
            "ORG_OWNER_VIEWER",
            "..."
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListOrgMembersRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmemberv1SearchQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v1ListOrgMembersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails",
          "title": "list limitations and ordering"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Member"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v1ListOrgMetadataRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetadataQuery"
          },
          "description": "Metadata object-specific queries.",
          "title": "Medata Query"
        }
      }
    },
    "v1ListOrgMetadataResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/metadatav1Metadata"
          }
        }
      }
    },
    "v1ListOrgsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1OrgFieldName",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OrgQuery"
          },
          "title": "criteria the client is looking for"
        }
      },
      "description": "Search query for lists",
      "required": [
        "query"
      ]
    },
    "v1ListOrgsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v1OrgFieldName"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/orgv1Org"
          }
        }
      }
    },
    "v1ListPersonalAccessTokensResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv1PersonalAccessToken"
          }
        }
      }
    },
    "v1ListProjectChangesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Change"
          },
          "title": "zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info)"
        }
      }
    },
    "v1ListProjectGrantChangesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Change"
          },
          "title": "zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info)"
        }
      }
    },
    "v1ListProjectGrantMemberRolesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "example": [
            "PROJECT_GRANT_OWNER",
            "PROJECT_GRANT_OWNER_VIEWER",
            "..."
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListProjectGrantMembersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Member"
          }
        }
      }
    },
    "v1ListProjectGrantsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GrantedProject"
          }
        }
      }
    },
    "v1ListProjectMemberRolesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "example": [
            "PROJECT_OWNER",
            "PROJECT_OWNER_VIEWER",
            "..."
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListProjectMembersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Member"
          }
        }
      }
    },
    "v1ListProjectRolesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/projectv1Role"
          }
        }
      }
    },
    "v1ListProjectsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProjectQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v1ListProjectsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Project"
          }
        }
      }
    },
    "v1ListSMSProvidersRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        }
      }
    },
    "v1ListSMSProvidersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SMSProvider"
          }
        }
      }
    },
    "v1ListSMTPConfigsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery"
        }
      }
    },
    "v1ListSMTPConfigsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SMTPConfig"
          }
        }
      }
    },
    "v1ListSecretGeneratorsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SecretGeneratorQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v1ListSecretGeneratorsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SecretGenerator"
          }
        }
      }
    },
    "v1ListUserChangesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Change"
          },
          "title": "zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info)"
        }
      }
    },
    "v1ListUserGrantRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserGrantQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v1ListUserGrantResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeluserv1UserGrant"
          }
        }
      }
    },
    "v1ListUserMembershipsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Membership"
          }
        }
      }
    },
    "v1ListUserMetadataResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/metadatav1Metadata"
          }
        }
      }
    },
    "v1LocalizedMessage": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "localizedMessage": {
          "type": "string"
        }
      }
    },
    "v1LockoutPolicy": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "maxPasswordAttempts": {
          "type": "string",
          "format": "uint64",
          "example": "10",
          "description": "Maximum password check attempts before the account gets locked. Attempts are reset as soon as the password is entered correctly or the password is reset. If set to 0 the account will never be locked."
        },
        "maxOtpAttempts": {
          "type": "string",
          "format": "uint64",
          "example": "10",
          "description": "Maximum failed attempts for a single OTP type (TOTP, SMS, Email) before the account gets locked. Attempts are reset as soon as the OTP is entered correctly. If set to 0 the account will never be locked."
        },
        "isDefault": {
          "type": "boolean",
          "description": "defines if the organization's admin changed the policy"
        }
      }
    },
    "v1LoginCustomText": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "selectAccountText": {
          "$ref": "#/definitions/v1SelectAccountScreenText"
        },
        "loginText": {
          "$ref": "#/definitions/v1LoginScreenText"
        },
        "passwordText": {
          "$ref": "#/definitions/v1PasswordScreenText"
        },
        "usernameChangeText": {
          "$ref": "#/definitions/v1UsernameChangeScreenText"
        },
        "usernameChangeDoneText": {
          "$ref": "#/definitions/v1UsernameChangeDoneScreenText"
        },
        "initPasswordText": {
          "$ref": "#/definitions/v1InitPasswordScreenText"
        },
        "initPasswordDoneText": {
          "$ref": "#/definitions/v1InitPasswordDoneScreenText"
        },
        "emailVerificationText": {
          "$ref": "#/definitions/v1EmailVerificationScreenText"
        },
        "emailVerificationDoneText": {
          "$ref": "#/definitions/v1EmailVerificationDoneScreenText"
        },
        "initializeUserText": {
          "$ref": "#/definitions/v1InitializeUserScreenText"
        },
        "initializeDoneText": {
          "$ref": "#/definitions/v1InitializeUserDoneScreenText"
        },
        "initMfaPromptText": {
          "$ref": "#/definitions/v1InitMFAPromptScreenText"
        },
        "initMfaOtpText": {
          "$ref": "#/definitions/v1InitMFAOTPScreenText"
        },
        "initMfaU2fText": {
          "$ref": "#/definitions/v1InitMFAU2FScreenText"
        },
        "initMfaDoneText": {
          "$ref": "#/definitions/v1InitMFADoneScreenText"
        },
        "mfaProvidersText": {
          "$ref": "#/definitions/v1MFAProvidersText"
        },
        "verifyMfaOtpText": {
          "$ref": "#/definitions/v1VerifyMFAOTPScreenText"
        },
        "verifyMfaU2fText": {
          "$ref": "#/definitions/v1VerifyMFAU2FScreenText"
        },
        "passwordlessText": {
          "$ref": "#/definitions/v1PasswordlessScreenText"
        },
        "passwordChangeText": {
          "$ref": "#/definitions/v1PasswordChangeScreenText"
        },
        "passwordChangeDoneText": {
          "$ref": "#/definitions/v1PasswordChangeDoneScreenText"
        },
        "passwordResetDoneText": {
          "$ref": "#/definitions/v1PasswordResetDoneScreenText"
        },
        "registrationOptionText": {
          "$ref": "#/definitions/v1RegistrationOptionScreenText"
        },
        "registrationUserText": {
          "$ref": "#/definitions/v1RegistrationUserScreenText"
        },
        "registrationOrgText": {
          "$ref": "#/definitions/v1RegistrationOrgScreenText"
        },
        "linkingUserDoneText": {
          "$ref": "#/definitions/v1LinkingUserDoneScreenText"
        },
        "externalUserNotFoundText": {
          "$ref": "#/definitions/v1ExternalUserNotFoundScreenText"
        },
        "successLoginText": {
          "$ref": "#/definitions/v1SuccessLoginScreenText"
        },
        "logoutText": {
          "$ref": "#/definitions/v1LogoutDoneScreenText"
        },
        "footerText": {
          "$ref": "#/definitions/v1FooterText"
        },
        "passwordlessPromptText": {
          "$ref": "#/definitions/v1PasswordlessPromptScreenText"
        },
        "passwordlessRegistrationText": {
          "$ref": "#/definitions/v1PasswordlessRegistrationScreenText"
        },
        "passwordlessRegistrationDoneText": {
          "$ref": "#/definitions/v1PasswordlessRegistrationDoneScreenText"
        },
        "externalRegistrationUserOverviewText": {
          "$ref": "#/definitions/v1ExternalRegistrationUserOverviewScreenText"
        },
        "isDefault": {
          "type": "boolean"
        },
        "linkingUserPromptText": {
          "$ref": "#/definitions/v1LinkingUserPromptScreenText",
          "title": "Deprecated: the linking user prompt screen no longer exists"
        }
      }
    },
    "v1LoginPolicy": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "allowUsernamePassword": {
          "type": "boolean",
          "description": "defines if a user is allowed to log in with username and password"
        },
        "allowRegister": {
          "type": "boolean",
          "description": "defines if a person is allowed to register a user on this organization"
        },
        "allowExternalIdp": {
          "type": "boolean",
          "description": "defines if a user is allowed to add a defined identity provider. E.g. Google auth"
        },
        "forceMfa": {
          "type": "boolean",
          "description": "defines if a user MUST use a multi-factor to log in"
        },
        "passwordlessType": {
          "$ref": "#/definitions/v1PasswordlessType",
          "description": "defines if passwordless is allowed for users"
        },
        "isDefault": {
          "type": "boolean",
          "description": "defines if the organization's admin changed the policy"
        },
        "hidePasswordReset": {
          "type": "boolean",
          "description": "defines if password reset link should be shown in the login screen"
        },
        "ignoreUnknownUsernames": {
          "type": "boolean",
          "description": "defines if unknown username on login screen directly returns an error or always displays the password screen"
        },
        "defaultRedirectUri": {
          "type": "string",
          "example": "https://acme.com/ui/console",
          "description": "defines where the user will be redirected to if the login is started without app context (e.g. from mail)"
        },
        "passwordCheckLifetime": {
          "type": "string",
          "example": "864000s"
        },
        "externalLoginCheckLifetime": {
          "type": "string",
          "example": "864000s"
        },
        "mfaInitSkipLifetime": {
          "type": "string",
          "example": "2592000s"
        },
        "secondFactorCheckLifetime": {
          "type": "string",
          "example": "64800s"
        },
        "multiFactorCheckLifetime": {
          "type": "string",
          "example": "43200s"
        },
        "secondFactors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/policyv1SecondFactorType"
          }
        },
        "multiFactors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/policyv1MultiFactorType"
          }
        },
        "idps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IDPLoginPolicyLink"
          }
        },
        "allowDomainDiscovery": {
          "type": "boolean",
          "description": "If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success."
        },
        "disableLoginWithEmail": {
          "type": "boolean",
          "description": "defines if the user can additionally (to the login name) be identified by their verified email address"
        },
        "disableLoginWithPhone": {
          "type": "boolean",
          "description": "defines if the user can additionally (to the login name) be identified by their verified phone number"
        },
        "forceMfaLocalOnly": {
          "type": "boolean",
          "description": "if activated, only local authenticated users are forced to use MFA. Authentication through IDPs won't prompt a MFA step in the login."
        }
      }
    },
    "v1LoginScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "titleLinkingProcess": {
          "type": "string"
        },
        "descriptionLinkingProcess": {
          "type": "string"
        },
        "userMustBeMemberOfOrg": {
          "type": "string"
        },
        "loginNameLabel": {
          "type": "string"
        },
        "registerButtonText": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        },
        "externalUserDescription": {
          "type": "string"
        },
        "userNamePlaceholder": {
          "type": "string"
        },
        "loginNamePlaceholder": {
          "type": "string"
        }
      }
    },
    "v1LoginV1": {
      "type": "object"
    },
    "v1LoginVersion": {
      "type": "object",
      "properties": {
        "loginV1": {
          "$ref": "#/definitions/v1LoginV1"
        },
        "loginV2": {
          "$ref": "#/definitions/appv1LoginV2"
        }
      }
    },
    "v1LogoutDoneScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "loginButtonText": {
          "type": "string"
        }
      }
    },
    "v1MFAProvidersText": {
      "type": "object",
      "properties": {
        "chooseOther": {
          "type": "string"
        },
        "otp": {
          "type": "string"
        },
        "u2f": {
          "type": "string"
        }
      }
    },
    "v1ManagementServiceDeactivateUserBody": {
      "type": "object"
    },
    "v1ManagementServiceLockUserBody": {
      "type": "object"
    },
    "v1ManagementServiceMigrateGenericOIDCProviderBody": {
      "type": "object",
      "properties": {
        "azure": {
          "$ref": "#/definitions/zitadelmanagementv1AddAzureADProviderRequest"
        },
        "google": {
          "$ref": "#/definitions/zitadelmanagementv1AddGoogleProviderRequest"
        }
      }
    },
    "v1ManagementServiceReactivateUserBody": {
      "type": "object"
    },
    "v1ManagementServiceRegenerateSAMLProviderCertificateBody": {
      "type": "object"
    },
    "v1ManagementServiceSetCustomLoginTextBody": {
      "type": "object",
      "properties": {
        "selectAccountText": {
          "$ref": "#/definitions/v1SelectAccountScreenText"
        },
        "loginText": {
          "$ref": "#/definitions/v1LoginScreenText"
        },
        "passwordText": {
          "$ref": "#/definitions/v1PasswordScreenText"
        },
        "usernameChangeText": {
          "$ref": "#/definitions/v1UsernameChangeScreenText"
        },
        "usernameChangeDoneText": {
          "$ref": "#/definitions/v1UsernameChangeDoneScreenText"
        },
        "initPasswordText": {
          "$ref": "#/definitions/v1InitPasswordScreenText"
        },
        "initPasswordDoneText": {
          "$ref": "#/definitions/v1InitPasswordDoneScreenText"
        },
        "emailVerificationText": {
          "$ref": "#/definitions/v1EmailVerificationScreenText"
        },
        "emailVerificationDoneText": {
          "$ref": "#/definitions/v1EmailVerificationDoneScreenText"
        },
        "initializeUserText": {
          "$ref": "#/definitions/v1InitializeUserScreenText"
        },
        "initializeDoneText": {
          "$ref": "#/definitions/v1InitializeUserDoneScreenText"
        },
        "initMfaPromptText": {
          "$ref": "#/definitions/v1InitMFAPromptScreenText"
        },
        "initMfaOtpText": {
          "$ref": "#/definitions/v1InitMFAOTPScreenText"
        },
        "initMfaU2fText": {
          "$ref": "#/definitions/v1InitMFAU2FScreenText"
        },
        "initMfaDoneText": {
          "$ref": "#/definitions/v1InitMFADoneScreenText"
        },
        "mfaProvidersText": {
          "$ref": "#/definitions/v1MFAProvidersText"
        },
        "verifyMfaOtpText": {
          "$ref": "#/definitions/v1VerifyMFAOTPScreenText"
        },
        "verifyMfaU2fText": {
          "$ref": "#/definitions/v1VerifyMFAU2FScreenText"
        },
        "passwordlessText": {
          "$ref": "#/definitions/v1PasswordlessScreenText"
        },
        "passwordChangeText": {
          "$ref": "#/definitions/v1PasswordChangeScreenText"
        },
        "passwordChangeDoneText": {
          "$ref": "#/definitions/v1PasswordChangeDoneScreenText"
        },
        "passwordResetDoneText": {
          "$ref": "#/definitions/v1PasswordResetDoneScreenText"
        },
        "registrationOptionText": {
          "$ref": "#/definitions/v1RegistrationOptionScreenText"
        },
        "registrationUserText": {
          "$ref": "#/definitions/v1RegistrationUserScreenText"
        },
        "registrationOrgText": {
          "$ref": "#/definitions/v1RegistrationOrgScreenText"
        },
        "linkingUserDoneText": {
          "$ref": "#/definitions/v1LinkingUserDoneScreenText"
        },
        "externalUserNotFoundText": {
          "$ref": "#/definitions/v1ExternalUserNotFoundScreenText"
        },
        "successLoginText": {
          "$ref": "#/definitions/v1SuccessLoginScreenText"
        },
        "logoutText": {
          "$ref": "#/definitions/v1LogoutDoneScreenText"
        },
        "footerText": {
          "$ref": "#/definitions/v1FooterText"
        },
        "passwordlessPromptText": {
          "$ref": "#/definitions/v1PasswordlessPromptScreenText"
        },
        "passwordlessRegistrationText": {
          "$ref": "#/definitions/v1PasswordlessRegistrationScreenText"
        },
        "passwordlessRegistrationDoneText": {
          "$ref": "#/definitions/v1PasswordlessRegistrationDoneScreenText"
        },
        "externalRegistrationUserOverviewText": {
          "$ref": "#/definitions/v1ExternalRegistrationUserOverviewScreenText"
        },
        "linkingUserPromptText": {
          "$ref": "#/definitions/v1LinkingUserPromptScreenText",
          "title": "Deprecated: the linking user prompt screen no longer exists"
        }
      }
    },
    "v1ManagementServiceUnlockUserBody": {
      "type": "object"
    },
    "v1ManagementServiceUpdateAppleProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Apple",
          "maxLength": 200
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id (App ID or Service ID) provided by Apple",
          "maxLength": 200,
          "minLength": 1
        },
        "teamId": {
          "type": "string",
          "example": "ALT03JV3OS",
          "description": "(10-character) Team ID provided by Apple",
          "maxLength": 10,
          "minLength": 10
        },
        "keyId": {
          "type": "string",
          "example": "OGKDK25KD",
          "description": "(10-character) ID of the private key generated by Apple",
          "maxLength": 10,
          "minLength": 10
        },
        "privateKey": {
          "type": "string",
          "format": "byte",
          "example": "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1...",
          "description": "Private Key generated by Apple",
          "maxLength": 5000
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to Apple",
          "maxItems": 20
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      },
      "required": [
        "clientId",
        "teamId",
        "keyId"
      ]
    },
    "v1ManagementServiceUpdateAzureADProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Azure AD"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by the Azure AD"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client_secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "tenant": {
          "$ref": "#/definitions/idpv1AzureADTenant",
          "description": "Defines what kind of accounts are allowed to authenticate (Personal, Organizational, All). If not provided the `common` tenant will be used (All accounts)",
          "title": "if not provided the `common` tenant will be used"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Azure AD doesn't send if the email has been verified. Enable this if the user email should always be added verified in ZITADEL (no verification emails will be sent)"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email",
            "User.Read"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request to Azure AD"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1ManagementServiceUpdateGenericOAuthProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "My Provider"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by the identity provider"
        },
        "clientSecret": {
          "type": "string",
          "example": "client-secret",
          "description": "Client secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "authorizationEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com/o/oauth2/v2/auth",
          "description": "The endpoint where ZITADEL send the user to authenticate"
        },
        "tokenEndpoint": {
          "type": "string",
          "example": "https://oauth2.googleapis.com/token",
          "description": "The endpoint where ZITADEL can get the token"
        },
        "userEndpoint": {
          "type": "string",
          "example": "https://openidconnect.googleapis.com/v1/userinfo",
          "description": "The endpoint where ZITADEL can get the user information"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request on the identity provider"
        },
        "idAttribute": {
          "type": "string",
          "example": "user_id",
          "description": "Identifying attribute of the user in the response of the user_endpoint",
          "title": "identifying attribute of the user in the response of the user_endpoint"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1ManagementServiceUpdateGenericOIDCProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Google"
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com/",
          "description": "the OIDC issuer of the identity provider"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "client id generated by the identity provider"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "client secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request on the identity provider"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        },
        "isIdTokenMapping": {
          "type": "boolean"
        }
      }
    },
    "v1ManagementServiceUpdateGitHubEnterpriseServerProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "GitHub"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitHub"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "authorizationEndpoint": {
          "type": "string"
        },
        "tokenEndpoint": {
          "type": "string"
        },
        "userEndpoint": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitHub"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1ManagementServiceUpdateGitHubProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "GitHub"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitHub"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client_secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitHub"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1ManagementServiceUpdateGitLabProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "GitLab",
          "description": "GitLab will be used as default, if no name is provided"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitLab"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitLab"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1ManagementServiceUpdateGitLabSelfHostedProviderBody": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "example": "GitLab"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitLab"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitLab"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1ManagementServiceUpdateGoogleProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Google"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by Google"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret will only be updated if provided",
          "title": "client_secret will only be updated if provided"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to Google"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1ManagementServiceUpdateJWTProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "My Provider"
        },
        "issuer": {
          "type": "string"
        },
        "jwtEndpoint": {
          "type": "string"
        },
        "keysEndpoint": {
          "type": "string"
        },
        "headerName": {
          "type": "string"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1ManagementServiceUpdateLDAPProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "servers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startTls": {
          "type": "boolean"
        },
        "baseDn": {
          "type": "string"
        },
        "bindDn": {
          "type": "string"
        },
        "bindPassword": {
          "type": "string"
        },
        "userBase": {
          "type": "string"
        },
        "userObjectClasses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeout": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/idpv1LDAPAttributes"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "v1ManagementServiceUpdateSAMLProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "metadataXml": {
          "type": "string",
          "format": "byte"
        },
        "metadataUrl": {
          "type": "string",
          "example": "https://test.com/saml/metadata",
          "description": "Url to the metadata of the SAML identity provider."
        },
        "binding": {
          "$ref": "#/definitions/idpv1SAMLBinding",
          "description": "Binding which defines the type of communication with the identity provider."
        },
        "withSignedRequest": {
          "type": "boolean",
          "description": "Boolean which defines if the authentication requests are signed."
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        },
        "nameIdFormat": {
          "$ref": "#/definitions/idpv1SAMLNameIDFormat",
          "description": "Optionally specify the `nameid-format` requested."
        },
        "transientMappingAttributeName": {
          "type": "string",
          "description": "Optionally specify the name of the attribute, which will be used to map the user\nin case the nameid-format returned is `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`."
        }
      }
    },
    "v1Member": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "roles": {
          "type": "array",
          "example": [
            "IAM_OWNER"
          ],
          "items": {
            "type": "string"
          },
          "description": "the role keys granted to the user"
        },
        "preferredLoginName": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "preferred login name of the user"
        },
        "email": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "preferred login name of the user"
        },
        "firstName": {
          "type": "string",
          "example": "Gigi",
          "description": "the first name of the user"
        },
        "lastName": {
          "type": "string",
          "example": "Giraffe",
          "description": "last name of the user"
        },
        "displayName": {
          "type": "string",
          "example": "Gigi Giraffe",
          "description": "display name of the user"
        },
        "avatarUrl": {
          "type": "string",
          "example": "https://api.zitadel.ch/assets/v1/avatar-32432jkh4kj32",
          "description": "avatar URL of the user"
        },
        "userType": {
          "$ref": "#/definitions/userv1Type",
          "description": "type of the user (human / machine)"
        }
      }
    },
    "v1Membership": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "roles": {
          "type": "array",
          "example": [
            "IAM_OWNER"
          ],
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "type": "string",
          "example": "Gigi Giraffe",
          "description": "display name of the user"
        },
        "iam": {
          "type": "boolean",
          "description": "one of type use iam, org id, project id or project grant id"
        },
        "orgId": {
          "type": "string",
          "description": "one of type use iam, org id, project id or project grant id"
        },
        "projectId": {
          "type": "string",
          "description": "one of type use iam, org id, project id or project grant id"
        },
        "projectGrantId": {
          "type": "string",
          "description": "one of type use iam, org id, project id or project grant id"
        }
      }
    },
    "v1MembershipIAMQuery": {
      "type": "object",
      "properties": {
        "iam": {
          "type": "boolean"
        }
      },
      "title": "this query always equals"
    },
    "v1MembershipOrgQuery": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string",
          "example": "69629023906488334"
        }
      },
      "title": "this query always equals"
    },
    "v1MembershipProjectGrantQuery": {
      "type": "object",
      "properties": {
        "projectGrantId": {
          "type": "string",
          "example": "69629023906488334"
        }
      },
      "title": "this query always equals"
    },
    "v1MembershipProjectQuery": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "example": "69629023906488334"
        }
      },
      "title": "this query always equals"
    },
    "v1MembershipQuery": {
      "type": "object",
      "properties": {
        "orgQuery": {
          "$ref": "#/definitions/v1MembershipOrgQuery"
        },
        "projectQuery": {
          "$ref": "#/definitions/v1MembershipProjectQuery"
        },
        "projectGrantQuery": {
          "$ref": "#/definitions/v1MembershipProjectGrantQuery"
        },
        "iamQuery": {
          "$ref": "#/definitions/v1MembershipIAMQuery"
        }
      }
    },
    "v1MessageCustomText": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "title": {
          "type": "string",
          "example": "ZITADEL - Message Title",
          "description": "custom text for email title"
        },
        "preHeader": {
          "type": "string",
          "example": "User Message",
          "description": "custom text for email pre-header"
        },
        "subject": {
          "type": "string",
          "example": "Message Subject",
          "description": "custom text for email subject"
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "description": "custom text for email greeting"
        },
        "text": {
          "type": "string",
          "example": "This is my custom message Text. I can also include some fields, depending on the message type I want to send. {{.FirstName}} {{.LastName}},",
          "description": "custom text for email text"
        },
        "buttonText": {
          "type": "string",
          "example": "Call to action",
          "description": "custom text for email button_text"
        },
        "footerText": {
          "type": "string",
          "example": "",
          "description": "custom text for email footer_text"
        },
        "isDefault": {
          "type": "boolean"
        }
      }
    },
    "v1MetadataKeyQuery": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "key"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1MetadataQuery": {
      "type": "object",
      "properties": {
        "keyQuery": {
          "$ref": "#/definitions/v1MetadataKeyQuery"
        }
      }
    },
    "v1Milestone": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1MilestoneType"
        },
        "reachedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1MilestoneFieldName": {
      "type": "string",
      "enum": [
        "MILESTONE_FIELD_NAME_UNSPECIFIED",
        "MILESTONE_FIELD_NAME_TYPE",
        "MILESTONE_FIELD_NAME_REACHED_DATE"
      ],
      "default": "MILESTONE_FIELD_NAME_UNSPECIFIED"
    },
    "v1MilestoneQuery": {
      "type": "object",
      "properties": {
        "isReachedQuery": {
          "$ref": "#/definitions/v1IsReachedQuery"
        }
      }
    },
    "v1MilestoneType": {
      "type": "string",
      "enum": [
        "MILESTONE_TYPE_UNSPECIFIED",
        "MILESTONE_TYPE_INSTANCE_CREATED",
        "MILESTONE_TYPE_AUTHENTICATION_SUCCEEDED_ON_INSTANCE",
        "MILESTONE_TYPE_PROJECT_CREATED",
        "MILESTONE_TYPE_APPLICATION_CREATED",
        "MILESTONE_TYPE_AUTHENTICATION_SUCCEEDED_ON_APPLICATION",
        "MILESTONE_TYPE_INSTANCE_DELETED"
      ],
      "default": "MILESTONE_TYPE_UNSPECIFIED"
    },
    "v1Notification": {
      "type": "object",
      "properties": {
        "percent": {
          "type": "integer",
          "format": "int64",
          "description": "The percentage relative to the quotas amount on which the call_url should be called."
        },
        "repeat": {
          "type": "boolean",
          "description": "If true, the call_url is called each time a factor of percentage is reached."
        },
        "callUrl": {
          "type": "string",
          "description": "The URL, which is called with HTTP method POST and a JSON payload with the properties \"unit\", \"id\" (notification id), \"callURL\", \"periodStart\", \"threshold\" and \"usage\"."
        }
      }
    },
    "v1NotificationPolicy": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "isDefault": {
          "type": "boolean"
        },
        "passwordChange": {
          "type": "boolean",
          "description": "If set to true the users will get a notification whenever their password has been changed."
        }
      }
    },
    "v1OIDCAppType": {
      "type": "string",
      "enum": [
        "OIDC_APP_TYPE_WEB",
        "OIDC_APP_TYPE_USER_AGENT",
        "OIDC_APP_TYPE_NATIVE"
      ],
      "default": "OIDC_APP_TYPE_WEB"
    },
    "v1OIDCAuthMethodType": {
      "type": "string",
      "enum": [
        "OIDC_AUTH_METHOD_TYPE_BASIC",
        "OIDC_AUTH_METHOD_TYPE_POST",
        "OIDC_AUTH_METHOD_TYPE_NONE",
        "OIDC_AUTH_METHOD_TYPE_PRIVATE_KEY_JWT"
      ],
      "default": "OIDC_AUTH_METHOD_TYPE_BASIC"
    },
    "v1OIDCGrantType": {
      "type": "string",
      "enum": [
        "OIDC_GRANT_TYPE_AUTHORIZATION_CODE",
        "OIDC_GRANT_TYPE_IMPLICIT",
        "OIDC_GRANT_TYPE_REFRESH_TOKEN",
        "OIDC_GRANT_TYPE_DEVICE_CODE",
        "OIDC_GRANT_TYPE_TOKEN_EXCHANGE"
      ],
      "default": "OIDC_GRANT_TYPE_AUTHORIZATION_CODE"
    },
    "v1OIDCMappingField": {
      "type": "string",
      "enum": [
        "OIDC_MAPPING_FIELD_UNSPECIFIED",
        "OIDC_MAPPING_FIELD_PREFERRED_USERNAME",
        "OIDC_MAPPING_FIELD_EMAIL"
      ],
      "default": "OIDC_MAPPING_FIELD_UNSPECIFIED"
    },
    "v1OIDCResponseType": {
      "type": "string",
      "enum": [
        "OIDC_RESPONSE_TYPE_CODE",
        "OIDC_RESPONSE_TYPE_ID_TOKEN",
        "OIDC_RESPONSE_TYPE_ID_TOKEN_TOKEN"
      ],
      "default": "OIDC_RESPONSE_TYPE_CODE"
    },
    "v1OIDCSettings": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "accessTokenLifetime": {
          "type": "string"
        },
        "idTokenLifetime": {
          "type": "string"
        },
        "refreshTokenIdleExpiration": {
          "type": "string"
        },
        "refreshTokenExpiration": {
          "type": "string"
        }
      }
    },
    "v1OIDCTokenType": {
      "type": "string",
      "enum": [
        "OIDC_TOKEN_TYPE_BEARER",
        "OIDC_TOKEN_TYPE_JWT"
      ],
      "default": "OIDC_TOKEN_TYPE_BEARER"
    },
    "v1OIDCVersion": {
      "type": "string",
      "enum": [
        "OIDC_VERSION_1_0"
      ],
      "default": "OIDC_VERSION_1_0"
    },
    "v1ObjectDetails": {
      "type": "object",
      "properties": {
        "sequence": {
          "type": "string",
          "format": "uint64",
          "example": "2",
          "description": "on read: the sequence of the last event reduced by the projection\n\non manipulation: the timestamp of the event(s) added by the manipulation",
          "title": "sequence represents the order of events. It's always counting"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "on read: the timestamp of the first event of the object\n\non create: the timestamp of the event(s) added by the manipulation",
          "title": "creation_date is the timestamp where the first operation on the object was made"
        },
        "changeDate": {
          "type": "string",
          "format": "date-time",
          "description": "on read: the timestamp of the last event reduced by the projection\n\non manipulation: the",
          "title": "change_date is the timestamp when the object was changed"
        },
        "resourceOwner": {
          "type": "string",
          "example": "69629023906488334",
          "title": "resource_owner is the organization an object belongs to"
        }
      }
    },
    "v1OrgDomainQuery": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "example": "citadel.cloud"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1OrgFieldName": {
      "type": "string",
      "enum": [
        "ORG_FIELD_NAME_UNSPECIFIED",
        "ORG_FIELD_NAME_NAME"
      ],
      "default": "ORG_FIELD_NAME_UNSPECIFIED"
    },
    "v1OrgIAMPolicy": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "userLoginMustBeDomain": {
          "type": "boolean",
          "description": "the username has to end with the domain of its organization"
        },
        "isDefault": {
          "type": "boolean",
          "description": "defines if the organization's admin changed the policy"
        }
      },
      "title": "deprecated: please use DomainPolicy instead"
    },
    "v1OrgIDQuery": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        }
      }
    },
    "v1OrgNameQuery": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ZITADEL"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1OrgQuery": {
      "type": "object",
      "properties": {
        "nameQuery": {
          "$ref": "#/definitions/v1OrgNameQuery"
        },
        "domainQuery": {
          "$ref": "#/definitions/v1OrgDomainQuery"
        },
        "stateQuery": {
          "$ref": "#/definitions/v1OrgStateQuery"
        },
        "idQuery": {
          "$ref": "#/definitions/v1OrgIDQuery"
        }
      }
    },
    "v1OrgState": {
      "type": "string",
      "enum": [
        "ORG_STATE_UNSPECIFIED",
        "ORG_STATE_ACTIVE",
        "ORG_STATE_INACTIVE",
        "ORG_STATE_REMOVED"
      ],
      "default": "ORG_STATE_UNSPECIFIED"
    },
    "v1OrgStateQuery": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/v1OrgState",
          "description": "current state of the organization"
        }
      }
    },
    "v1PasswordAgePolicy": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "maxAgeDays": {
          "type": "string",
          "format": "uint64",
          "example": "365",
          "description": "Amount of days after which a password will expire. The user will be forced to change the password on the following authentication."
        },
        "expireWarnDays": {
          "type": "string",
          "format": "uint64",
          "example": "10",
          "description": "Amount of days after which the user should be notified of the upcoming expiry. ZITADEL will not notify the user."
        },
        "isDefault": {
          "type": "boolean",
          "description": "If true, the returned values represent the instance settings, e.g. by an organization without custom settings."
        }
      }
    },
    "v1PasswordChangeDoneScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        }
      }
    },
    "v1PasswordChangeScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "oldPasswordLabel": {
          "type": "string"
        },
        "newPasswordLabel": {
          "type": "string"
        },
        "newPasswordConfirmLabel": {
          "type": "string"
        },
        "cancelButtonText": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        },
        "expiredDescription": {
          "type": "string"
        }
      }
    },
    "v1PasswordComplexityPolicy": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "minLength": {
          "type": "string",
          "format": "uint64",
          "example": "8"
        },
        "hasUppercase": {
          "type": "boolean",
          "description": "defines if the password MUST contain an upper case letter"
        },
        "hasLowercase": {
          "type": "boolean",
          "description": "defines if the password MUST contain a lowercase letter"
        },
        "hasNumber": {
          "type": "boolean",
          "description": "defines if the password MUST contain a number"
        },
        "hasSymbol": {
          "type": "boolean",
          "description": "defines if the password MUST contain a symbol. E.g. \"$\""
        },
        "isDefault": {
          "type": "boolean",
          "description": "defines if the organization's admin changed the policy"
        }
      }
    },
    "v1PasswordResetDoneScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        }
      }
    },
    "v1PasswordScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "passwordLabel": {
          "type": "string"
        },
        "resetLinkText": {
          "type": "string"
        },
        "backButtonText": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        },
        "minLength": {
          "type": "string"
        },
        "hasUppercase": {
          "type": "string"
        },
        "hasLowercase": {
          "type": "string"
        },
        "hasNumber": {
          "type": "string"
        },
        "hasSymbol": {
          "type": "string"
        },
        "confirmation": {
          "type": "string"
        }
      }
    },
    "v1PasswordlessPromptScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "descriptionInit": {
          "type": "string"
        },
        "passwordlessButtonText": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        },
        "skipButtonText": {
          "type": "string"
        }
      }
    },
    "v1PasswordlessRegistrationDoneScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        },
        "cancelButtonText": {
          "type": "string"
        },
        "descriptionClose": {
          "type": "string"
        }
      }
    },
    "v1PasswordlessRegistrationScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tokenNameLabel": {
          "type": "string"
        },
        "notSupported": {
          "type": "string"
        },
        "registerTokenButtonText": {
          "type": "string"
        },
        "errorRetry": {
          "type": "string"
        }
      }
    },
    "v1PasswordlessScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "loginWithPwButtonText": {
          "type": "string"
        },
        "validateTokenButtonText": {
          "type": "string"
        },
        "notSupported": {
          "type": "string"
        },
        "errorRetry": {
          "type": "string"
        }
      }
    },
    "v1PasswordlessType": {
      "type": "string",
      "enum": [
        "PASSWORDLESS_TYPE_NOT_ALLOWED",
        "PASSWORDLESS_TYPE_ALLOWED"
      ],
      "default": "PASSWORDLESS_TYPE_NOT_ALLOWED",
      "title": "- PASSWORDLESS_TYPE_ALLOWED: PLANNED: PASSWORDLESS_TYPE_WITH_CERT"
    },
    "v1PrivacyPolicy": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "tosLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/legal/terms-of-service"
        },
        "privacyLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/legal/privacy-policy"
        },
        "isDefault": {
          "type": "boolean"
        },
        "helpLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/manuals/introduction"
        },
        "supportEmail": {
          "type": "string",
          "example": "support-email@test.com",
          "description": "help / support email address."
        },
        "docsLink": {
          "type": "string",
          "example": "https://zitadel.com/docs",
          "description": "Link to documentation to be shown in the console."
        },
        "customLink": {
          "type": "string",
          "example": "https://external.link",
          "description": "Link to an external resource that will be available to users in the console."
        },
        "customLinkText": {
          "type": "string",
          "example": "External",
          "description": "The button text that would be shown in console pointing to custom link."
        }
      }
    },
    "v1PrivateLabelingSetting": {
      "type": "string",
      "enum": [
        "PRIVATE_LABELING_SETTING_UNSPECIFIED",
        "PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY",
        "PRIVATE_LABELING_SETTING_ALLOW_LOGIN_USER_RESOURCE_OWNER_POLICY"
      ],
      "default": "PRIVATE_LABELING_SETTING_UNSPECIFIED"
    },
    "v1Project": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "name": {
          "type": "string",
          "example": "MyProject"
        },
        "state": {
          "$ref": "#/definitions/v1ProjectState",
          "description": "current state of the project"
        },
        "projectRoleAssertion": {
          "type": "boolean",
          "title": "describes if the roles of the user should be added to the token"
        },
        "projectRoleCheck": {
          "type": "boolean",
          "title": "ZITADEL checks if the user has at least one on this project"
        },
        "hasProjectCheck": {
          "type": "boolean",
          "title": "ZITADEL checks if the org of the user has permission for this project"
        },
        "privateLabelingSetting": {
          "$ref": "#/definitions/v1PrivateLabelingSetting",
          "title": "Defines from where the private labeling should be triggered"
        }
      }
    },
    "v1ProjectGrantQuery": {
      "type": "object",
      "properties": {
        "projectNameQuery": {
          "$ref": "#/definitions/v1GrantProjectNameQuery"
        },
        "roleKeyQuery": {
          "$ref": "#/definitions/v1GrantRoleKeyQuery"
        }
      }
    },
    "v1ProjectGrantState": {
      "type": "string",
      "enum": [
        "PROJECT_GRANT_STATE_UNSPECIFIED",
        "PROJECT_GRANT_STATE_ACTIVE",
        "PROJECT_GRANT_STATE_INACTIVE"
      ],
      "default": "PROJECT_GRANT_STATE_UNSPECIFIED"
    },
    "v1ProjectIDQuery": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "example": "69629023906488334"
        }
      }
    },
    "v1ProjectNameQuery": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ZITADEL"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1ProjectQuery": {
      "type": "object",
      "properties": {
        "nameQuery": {
          "$ref": "#/definitions/v1ProjectNameQuery"
        },
        "projectResourceOwnerQuery": {
          "$ref": "#/definitions/v1ProjectResourceOwnerQuery"
        }
      }
    },
    "v1ProjectResourceOwnerQuery": {
      "type": "object",
      "properties": {
        "resourceOwner": {
          "type": "string",
          "example": "69629023906488334"
        }
      }
    },
    "v1ProjectState": {
      "type": "string",
      "enum": [
        "PROJECT_STATE_UNSPECIFIED",
        "PROJECT_STATE_ACTIVE",
        "PROJECT_STATE_INACTIVE"
      ],
      "default": "PROJECT_STATE_UNSPECIFIED"
    },
    "v1Provider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "state": {
          "$ref": "#/definitions/idpv1IDPState"
        },
        "name": {
          "type": "string",
          "example": "Google"
        },
        "owner": {
          "$ref": "#/definitions/v1IDPOwnerType"
        },
        "type": {
          "$ref": "#/definitions/v1ProviderType"
        },
        "config": {
          "$ref": "#/definitions/v1ProviderConfig"
        }
      }
    },
    "v1ProviderConfig": {
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/definitions/idpv1Options"
        },
        "ldap": {
          "$ref": "#/definitions/idpv1LDAPConfig"
        },
        "google": {
          "$ref": "#/definitions/idpv1GoogleConfig"
        },
        "oauth": {
          "$ref": "#/definitions/idpv1OAuthConfig"
        },
        "oidc": {
          "$ref": "#/definitions/idpv1GenericOIDCConfig"
        },
        "jwt": {
          "$ref": "#/definitions/idpv1JWTConfig"
        },
        "github": {
          "$ref": "#/definitions/idpv1GitHubConfig"
        },
        "githubEs": {
          "$ref": "#/definitions/idpv1GitHubEnterpriseServerConfig"
        },
        "gitlab": {
          "$ref": "#/definitions/idpv1GitLabConfig"
        },
        "gitlabSelfHosted": {
          "$ref": "#/definitions/idpv1GitLabSelfHostedConfig"
        },
        "azureAd": {
          "$ref": "#/definitions/idpv1AzureADConfig"
        },
        "apple": {
          "$ref": "#/definitions/idpv1AppleConfig"
        },
        "saml": {
          "$ref": "#/definitions/zitadelidpv1SAMLConfig"
        }
      }
    },
    "v1ProviderType": {
      "type": "string",
      "enum": [
        "PROVIDER_TYPE_UNSPECIFIED",
        "PROVIDER_TYPE_OIDC",
        "PROVIDER_TYPE_JWT",
        "PROVIDER_TYPE_LDAP",
        "PROVIDER_TYPE_OAUTH",
        "PROVIDER_TYPE_AZURE_AD",
        "PROVIDER_TYPE_GITHUB",
        "PROVIDER_TYPE_GITHUB_ES",
        "PROVIDER_TYPE_GITLAB",
        "PROVIDER_TYPE_GITLAB_SELF_HOSTED",
        "PROVIDER_TYPE_GOOGLE",
        "PROVIDER_TYPE_APPLE",
        "PROVIDER_TYPE_SAML"
      ],
      "default": "PROVIDER_TYPE_UNSPECIFIED"
    },
    "v1Query": {
      "type": "object",
      "properties": {
        "idQuery": {
          "$ref": "#/definitions/v1IdsQuery"
        },
        "domainQuery": {
          "$ref": "#/definitions/v1DomainsQuery"
        }
      }
    },
    "v1ReactivateActionResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ReactivateAppResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ReactivateIDPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ReactivateOrgIDPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ReactivateOrgRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1ReactivateOrgResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ReactivateProjectGrantResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ReactivateProjectResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ReactivateUserGrantResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RefreshToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906489455"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "clientId": {
          "type": "string",
          "example": "69629023906488334@ZITADEL",
          "description": "oauth2/oidc client_id of the authorized application"
        },
        "authTime": {
          "type": "string",
          "format": "date-time",
          "example": "2023-02-13T08:45:00.000000Z",
          "description": "\"time when the user authenticated, does not have to be the same time the token was created\""
        },
        "idleExpiration": {
          "type": "string",
          "format": "date-time",
          "example": "2023-02-14T08:45:00.000000Z",
          "description": "\"time the refresh token will expire if not used, the user will have to reauthenticate\""
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "example": "2023-02-14T08:45:00.000000Z",
          "description": "\"time the refresh token will expire, the user will have to reauthenticate\""
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "email",
            "profile",
            "offline_access"
          ],
          "items": {
            "type": "string"
          },
          "description": "scopes of the initial auth request, access tokens created by this refresh token can have a subset of these scopes"
        },
        "audience": {
          "type": "array",
          "example": [
            "69629023906488334@ZITADEL",
            "69629023906481256"
          ],
          "items": {
            "type": "string"
          },
          "description": "audience of the initial auth request and of all access tokens created by this refresh token"
        }
      }
    },
    "v1RegenerateAPIClientSecretResponse": {
      "type": "object",
      "properties": {
        "clientSecret": {
          "type": "string",
          "example": "k3n0fnslei93nps9",
          "description": "generated secret for the client"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RegenerateOIDCClientSecretResponse": {
      "type": "object",
      "properties": {
        "clientSecret": {
          "type": "string",
          "example": "gjoq34589uasgh",
          "description": "generated secret for the client"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RegistrationOptionScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "userNameButtonText": {
          "type": "string"
        },
        "externalLoginDescription": {
          "type": "string"
        },
        "loginButtonText": {
          "type": "string"
        }
      }
    },
    "v1RegistrationOrgScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "orgnameLabel": {
          "type": "string"
        },
        "firstnameLabel": {
          "type": "string"
        },
        "lastnameLabel": {
          "type": "string"
        },
        "usernameLabel": {
          "type": "string"
        },
        "emailLabel": {
          "type": "string"
        },
        "passwordLabel": {
          "type": "string"
        },
        "passwordConfirmLabel": {
          "type": "string"
        },
        "tosAndPrivacyLabel": {
          "type": "string"
        },
        "tosConfirm": {
          "type": "string"
        },
        "tosLinkText": {
          "type": "string"
        },
        "privacyConfirm": {
          "type": "string"
        },
        "privacyLinkText": {
          "type": "string"
        },
        "saveButtonText": {
          "type": "string"
        }
      }
    },
    "v1RegistrationUserScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "descriptionOrgRegister": {
          "type": "string"
        },
        "firstnameLabel": {
          "type": "string"
        },
        "lastnameLabel": {
          "type": "string"
        },
        "emailLabel": {
          "type": "string"
        },
        "usernameLabel": {
          "type": "string"
        },
        "languageLabel": {
          "type": "string"
        },
        "genderLabel": {
          "type": "string"
        },
        "passwordLabel": {
          "type": "string"
        },
        "passwordConfirmLabel": {
          "type": "string"
        },
        "tosAndPrivacyLabel": {
          "type": "string"
        },
        "tosConfirm": {
          "type": "string"
        },
        "tosLinkText": {
          "type": "string"
        },
        "privacyConfirm": {
          "type": "string"
        },
        "privacyLinkText": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        },
        "backButtonText": {
          "type": "string"
        }
      }
    },
    "v1RemoveAppKeyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveAppResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveCustomLabelPolicyFontResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveCustomLabelPolicyIconDarkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveCustomLabelPolicyIconResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveCustomLabelPolicyLogoDarkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveCustomLabelPolicyLogoResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveDomainResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveEmailProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveHumanAuthFactorOTPEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveHumanAuthFactorOTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveHumanAuthFactorOTPSMSResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveHumanAuthFactorU2FResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveHumanAvatarResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveHumanLinkedIDPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveHumanPasswordlessResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveHumanPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveIAMMemberResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveIDPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveInstanceResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveInstanceTrustedDomainResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveLabelPolicyFontResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveLabelPolicyIconDarkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveLabelPolicyIconResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveLabelPolicyLogoDarkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveLabelPolicyLogoResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveMachineKeyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveMachineSecretResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveMyAuthFactorOTPEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveMyAuthFactorOTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveMyAuthFactorOTPSMSResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveMyAuthFactorU2FResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveMyAvatarResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveMyLinkedIDPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveMyPasswordlessResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveMyPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveMyUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveOrgDomainResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveOrgIDPResponse": {
      "type": "object",
      "title": "This is an empty response"
    },
    "v1RemoveOrgMemberResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveOrgMetadataResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemovePersonalAccessTokenResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveProjectGrantMemberResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveProjectGrantResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveProjectMemberResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveProjectResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveProjectRoleResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveQuotaResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveSMSProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveSMTPConfigResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveUserGrantResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveUserMetadataResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RemoveUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResendHumanEmailVerificationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResendHumanInitializationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResendHumanPhoneVerificationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResendMyEmailVerificationRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1ResendMyEmailVerificationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResendMyPhoneVerificationRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1ResendMyPhoneVerificationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResetCustomDomainPolicyToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResetCustomOrgIAMPolicyToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResetLabelPolicyToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResetLimitsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResetLockoutPolicyToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResetLoginPolicyToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResetNotificationPolicyToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResetPasswordAgePolicyToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResetPasswordComplexityPolicyToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1ResetPrivacyPolicyToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RevokeAllMyRefreshTokensRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1RevokeAllMyRefreshTokensResponse": {
      "type": "object",
      "title": "This is an empty response"
    },
    "v1RevokeMyRefreshTokenResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1RoleDisplayNameQuery": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "example": "SUPER"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1RoleKeyQuery": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "role.super.man"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1RoleQuery": {
      "type": "object",
      "properties": {
        "keyQuery": {
          "$ref": "#/definitions/v1RoleKeyQuery"
        },
        "displayNameQuery": {
          "$ref": "#/definitions/v1RoleDisplayNameQuery"
        }
      }
    },
    "v1SMSProvider": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/v1SMSProviderConfigState"
        },
        "description": {
          "type": "string"
        },
        "twilio": {
          "$ref": "#/definitions/v1TwilioConfig"
        },
        "http": {
          "$ref": "#/definitions/v1HTTPConfig"
        }
      }
    },
    "v1SMSProviderConfigState": {
      "type": "string",
      "enum": [
        "SMS_PROVIDER_CONFIG_STATE_UNSPECIFIED",
        "SMS_PROVIDER_CONFIG_ACTIVE",
        "SMS_PROVIDER_CONFIG_INACTIVE"
      ],
      "default": "SMS_PROVIDER_CONFIG_STATE_UNSPECIFIED"
    },
    "v1SMTPConfig": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "senderAddress": {
          "type": "string",
          "example": "noreply@m.zitadel.cloud"
        },
        "senderName": {
          "type": "string",
          "example": "ZITADEL"
        },
        "tls": {
          "type": "boolean"
        },
        "host": {
          "type": "string",
          "example": "smtp.postmarkapp.com:587"
        },
        "user": {
          "type": "string",
          "example": "197f0117-529e-443d-bf6c-0292dd9a02b7"
        },
        "replyToAddress": {
          "type": "string",
          "example": "replyto@m.zitadel.cloud"
        },
        "state": {
          "$ref": "#/definitions/v1SMTPConfigState"
        },
        "description": {
          "type": "string",
          "example": "Mailjet"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1SMTPConfigState": {
      "type": "string",
      "enum": [
        "SMTP_CONFIG_STATE_UNSPECIFIED",
        "SMTP_CONFIG_ACTIVE",
        "SMTP_CONFIG_INACTIVE"
      ],
      "default": "SMTP_CONFIG_STATE_UNSPECIFIED"
    },
    "v1SecretGenerator": {
      "type": "object",
      "properties": {
        "generatorType": {
          "$ref": "#/definitions/v1SecretGeneratorType"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "length": {
          "type": "integer",
          "format": "int64",
          "example": 6
        },
        "expiry": {
          "type": "string",
          "example": "3600s"
        },
        "includeLowerLetters": {
          "type": "boolean"
        },
        "includeUpperLetters": {
          "type": "boolean"
        },
        "includeDigits": {
          "type": "boolean"
        },
        "includeSymbols": {
          "type": "boolean"
        }
      }
    },
    "v1SecretGeneratorQuery": {
      "type": "object",
      "properties": {
        "typeQuery": {
          "$ref": "#/definitions/v1SecretGeneratorTypeQuery"
        }
      }
    },
    "v1SecretGeneratorType": {
      "type": "string",
      "enum": [
        "SECRET_GENERATOR_TYPE_UNSPECIFIED",
        "SECRET_GENERATOR_TYPE_INIT_CODE",
        "SECRET_GENERATOR_TYPE_VERIFY_EMAIL_CODE",
        "SECRET_GENERATOR_TYPE_VERIFY_PHONE_CODE",
        "SECRET_GENERATOR_TYPE_PASSWORD_RESET_CODE",
        "SECRET_GENERATOR_TYPE_PASSWORDLESS_INIT_CODE",
        "SECRET_GENERATOR_TYPE_APP_SECRET",
        "SECRET_GENERATOR_TYPE_OTP_SMS",
        "SECRET_GENERATOR_TYPE_OTP_EMAIL"
      ],
      "default": "SECRET_GENERATOR_TYPE_UNSPECIFIED"
    },
    "v1SecretGeneratorTypeQuery": {
      "type": "object",
      "properties": {
        "generatorType": {
          "$ref": "#/definitions/v1SecretGeneratorType"
        }
      }
    },
    "v1SecurityPolicy": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "enableIframeEmbedding": {
          "type": "boolean",
          "title": "states if iframe embedding is enabled or disabled"
        },
        "allowedOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "origins allowed loading ZITADEL in an iframe if enable_iframe_embedding is true"
        },
        "enableImpersonation": {
          "type": "boolean",
          "title": "allows users to impersonate other users. The impersonator needs the appropriate `*_IMPERSONATOR` roles assigned as well\""
        }
      }
    },
    "v1SelectAccountScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "titleLinkingProcess": {
          "type": "string"
        },
        "descriptionLinkingProcess": {
          "type": "string"
        },
        "otherUser": {
          "type": "string"
        },
        "sessionStateActive": {
          "type": "string"
        },
        "sessionStateInactive": {
          "type": "string"
        },
        "userMustBeMemberOfOrg": {
          "type": "string"
        }
      }
    },
    "v1SelectLanguages": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "defines which languages to select. An empty list means all languages are selected."
        }
      },
      "description": "We have to wrap the languages list into a message so we can serialize empty lists."
    },
    "v1SendHumanResetPasswordNotificationRequestType": {
      "type": "string",
      "enum": [
        "TYPE_EMAIL",
        "TYPE_SMS"
      ],
      "default": "TYPE_EMAIL"
    },
    "v1SendHumanResetPasswordNotificationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SendMyPasswordlessLinkRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "v1SendMyPasswordlessLinkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SendPasswordlessRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SessionState": {
      "type": "string",
      "enum": [
        "SESSION_STATE_UNSPECIFIED",
        "SESSION_STATE_ACTIVE",
        "SESSION_STATE_TERMINATED"
      ],
      "default": "SESSION_STATE_UNSPECIFIED"
    },
    "v1SetCustomDomainClaimedMessageTextRequest": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "example": "de"
        },
        "title": {
          "type": "string",
          "example": "ZITADEL - Domain has been claimed",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Change email / username",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Domain has been claimed",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "The domain {{.Domain}} has been claimed by an organization. Your current user {{.UserName}} is not part of this organization. Therefore you'll have to change your email when you log in. We have created a temporary username ({{.TempUsername}}) for this login.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Login",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "v1SetCustomDomainClaimedMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetCustomInitMessageTextRequest": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "example": "de"
        },
        "title": {
          "type": "string",
          "example": "ZITADEL - Initialize User",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Initialize User",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Initialize User",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "This user was created in Zitadel. Use the username {{.PreferredLoginName}} to log in. Please click the button below to finish the initialization process. (Code {{.Code}}) If you didn't ask for this mail, please ignore it.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Finish initialization",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "v1SetCustomInitMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetCustomInviteUserMessageTextRequest": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "example": "de"
        },
        "title": {
          "type": "string",
          "example": "Invitation to {{.ApplicationName}}",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Invitation to {{.ApplicationName}}",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Invitation to {{.ApplicationName}}",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.DisplayName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "Your user has been invited to {{.ApplicationName}}. Please click the button below to finish the invite process. If you didn't ask for this mail, please ignore it.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Accept invite",
          "maxLength": 500
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "v1SetCustomInviteUserMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetCustomPasswordChangeMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetCustomPasswordResetMessageTextRequest": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "example": "de"
        },
        "title": {
          "type": "string",
          "example": "ZITADEL - Reset Password",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Reset Password",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Reset Password",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "We received a password reset request. Please use the button below to reset your password. (Code {{.Code}}) If you didn't ask for this mail, please ignore it.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Reset Password",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "v1SetCustomPasswordResetMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetCustomPasswordlessRegistrationMessageTextRequest": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "example": "de"
        },
        "title": {
          "type": "string",
          "example": "ZITADEL - Password of the user has changed",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Password Changed",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Password of user has changed",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "The password of your user has changed, if this change was not done by you, please be advised to immediately reset your password.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Login",
          "maxLength": 500
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "v1SetCustomPasswordlessRegistrationMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetCustomVerifyEmailMessageTextRequest": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "example": "de"
        },
        "title": {
          "type": "string",
          "example": "ZITADEL - Verify Email",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Verify Email",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Verify Email",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "A new email has been added. Please use the button below to verify your email. (Code {{.Code}}) If you didn't add a new email, please ignore this email.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Verify Email",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "v1SetCustomVerifyEmailMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetCustomVerifyEmailOTPMessageTextRequest": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "example": "de"
        },
        "title": {
          "type": "string",
          "example": "ZITADEL - One-time Password",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Verify One-time Password ",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Verify One-time Password",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "Please use the \"Authenticate\" button or copy the one-time password {{.OTP}} and paste it to to the authentication screen in order to authenticate at ZITADEL within the next five minutes.",
          "maxLength": 10000
        },
        "buttonText": {
          "type": "string",
          "example": "Authenticate",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "v1SetCustomVerifyEmailOTPMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetCustomVerifyPhoneMessageTextRequest": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "example": "de"
        },
        "title": {
          "type": "string",
          "example": "ZITADEL - Verify Phone",
          "maxLength": 500
        },
        "preHeader": {
          "type": "string",
          "example": "Verify Phone",
          "maxLength": 500
        },
        "subject": {
          "type": "string",
          "example": "Verify Phone",
          "maxLength": 500
        },
        "greeting": {
          "type": "string",
          "example": "Hello {{.FirstName}} {{.LastName}},",
          "maxLength": 1000
        },
        "text": {
          "type": "string",
          "example": "A new phone number has been added. Please use the following code to verify it {{.Code}}.",
          "maxLength": 800
        },
        "buttonText": {
          "type": "string",
          "example": "Verify Phone",
          "maxLength": 1000
        },
        "footerText": {
          "type": "string"
        }
      }
    },
    "v1SetCustomVerifyPhoneMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetCustomVerifySMSOTPMessageTextRequest": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "example": "de"
        },
        "text": {
          "type": "string",
          "example": "Please visit {{ .VerifyURL }} or copy the one-time password {{.OTP}} and paste it to to the authentication screen in order to authenticate at ZITADEL within the next five minutes.",
          "maxLength": 800
        }
      }
    },
    "v1SetCustomVerifySMSOTPMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetDefaultDomainClaimedMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetDefaultInitMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetDefaultInviteUserMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetDefaultLanguageResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetDefaultOrgResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetDefaultPasswordChangeMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetDefaultPasswordResetMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetDefaultPasswordlessRegistrationMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetDefaultVerifyEmailMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetDefaultVerifyEmailOTPMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetDefaultVerifyPhoneMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetDefaultVerifySMSOTPMessageTextResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetHumanInitialPasswordResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetHumanPasswordResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetInstanceFeatureResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetLimitsRequest": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string"
        },
        "auditLogRetention": {
          "type": "string",
          "description": "auditLogRetention limits the number of events that can be queried via the events API by their age. A value of '0s' means that all events are available. If this value is set, it overwrites the system default."
        },
        "block": {
          "type": "boolean",
          "description": "if block is true, requests are responded with a resource exhausted error code."
        }
      }
    },
    "v1SetLimitsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetMyEmailRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "gigi@zitadel.com"
        }
      },
      "required": [
        "email"
      ]
    },
    "v1SetMyEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetMyPhoneRequest": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41 71 000 00 00",
          "maxLength": 50,
          "minLength": 1
        }
      },
      "required": [
        "phone"
      ]
    },
    "v1SetMyPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetOrgMetadataResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetPrimaryDomainResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetPrimaryOrgDomainResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetQuotaResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetRestrictionsRequest": {
      "type": "object",
      "properties": {
        "disallowPublicOrgRegistration": {
          "type": "boolean",
          "description": "defines if ZITADEL should expose the endpoint /ui/login/register/org. If it is true, the org registration endpoint returns the HTTP status 404 on GET requests, and 409 on POST requests."
        },
        "allowedLanguages": {
          "$ref": "#/definitions/v1SelectLanguages",
          "description": "restricts the allowed languages. If allowed_languages is undefined, the allowed languages are not changed."
        }
      }
    },
    "v1SetRestrictionsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetSecurityPolicyRequest": {
      "type": "object",
      "properties": {
        "enableIframeEmbedding": {
          "type": "boolean",
          "title": "states if iframe embedding is enabled or disabled"
        },
        "allowedOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "origins allowed loading ZITADEL in an iframe if enable_iframe_embedding is true"
        },
        "enableImpersonation": {
          "type": "boolean",
          "title": "allows users to impersonate other users. The impersonator needs the appropriate `*_IMPERSONATOR` roles assigned as well\""
        }
      }
    },
    "v1SetSecurityPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetTriggerActionsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SetUpOrgRequest": {
      "type": "object",
      "properties": {
        "org": {
          "$ref": "#/definitions/v1SetUpOrgRequestOrg"
        },
        "human": {
          "$ref": "#/definitions/v1SetUpOrgRequestHuman",
          "title": "oneof field for the user managing the organization"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "specify Org Member Roles for the provided user (default is ORG_OWNER if roles are empty)"
        }
      },
      "description": "Request to set up an organization. User is required",
      "required": [
        "org",
        "user"
      ]
    },
    "v1SetUpOrgRequestHuman": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "example": "gigi-giraffe",
          "maxLength": 200,
          "minLength": 1
        },
        "profile": {
          "$ref": "#/definitions/SetUpOrgRequestHumanProfile"
        },
        "email": {
          "$ref": "#/definitions/SetUpOrgRequestHumanEmail"
        },
        "phone": {
          "$ref": "#/definitions/SetUpOrgRequestHumanPhone"
        },
        "password": {
          "type": "string",
          "example": "my_53cr3t-P4$$w0rd",
          "description": "the initial password of the user"
        }
      },
      "required": [
        "userName",
        "profile",
        "email",
        "password"
      ]
    },
    "v1SetUpOrgRequestOrg": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ZITADEL",
          "maxLength": 200,
          "minLength": 1
        },
        "domain": {
          "type": "string",
          "example": "zitadel.cloud",
          "description": "ZITADEL generates a domain (\u003corg-name\u003e.zitadel.ch) for an organization, the field is not required",
          "maxLength": 200
        }
      },
      "required": [
        "name"
      ]
    },
    "v1SetUpOrgResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "orgId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1SetUserMetadataRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "my-user-id",
          "maxLength": 200,
          "minLength": 1
        },
        "key": {
          "type": "string",
          "example": "my-key",
          "maxLength": 200,
          "minLength": 1
        },
        "value": {
          "type": "string",
          "format": "byte",
          "example": "VGhpcyBpcyBteSB0ZXN0IHZhbHVl",
          "description": "The value has to be base64 encoded.",
          "maxLength": 500000,
          "minLength": 1
        }
      }
    },
    "v1SetUserMetadataResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1SuccessLoginScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "autoRedirectDescription": {
          "type": "string",
          "title": "Text to describe that auto-redirect should happen after successful login"
        },
        "redirectedDescription": {
          "type": "string",
          "title": "Text to describe that the window can be closed after redirect"
        },
        "nextButtonText": {
          "type": "string"
        }
      }
    },
    "v1SystemServiceListIAMMembersBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmemberv1SearchQuery"
          }
        }
      }
    },
    "v1TestEmailProviderSMTPByIdResponse": {
      "type": "object",
      "title": "This is an empty response"
    },
    "v1TestEmailProviderSMTPRequest": {
      "type": "object",
      "properties": {
        "senderAddress": {
          "type": "string",
          "example": "noreply@m.zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        },
        "senderName": {
          "type": "string",
          "example": "ZITADEL",
          "maxLength": 200,
          "minLength": 1
        },
        "tls": {
          "type": "boolean"
        },
        "host": {
          "type": "string",
          "example": "smtp.postmarkapp.com:587",
          "description": "Make sure to include the port.",
          "maxLength": 500,
          "minLength": 1
        },
        "user": {
          "type": "string",
          "example": "197f0117-529e-443d-bf6c-0292dd9a02b7"
        },
        "password": {
          "type": "string",
          "example": "this-is-my-password"
        },
        "receiverAddress": {
          "type": "string",
          "example": "noreply@m.zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        },
        "id": {
          "type": "string",
          "example": "267191369515139464",
          "description": "Zitadel SMTP provider id in case you are not sending the password and want to reuse the stored password"
        }
      },
      "required": [
        "senderAddress",
        "senderName",
        "host",
        "receiverAddress"
      ]
    },
    "v1TestEmailProviderSMTPResponse": {
      "type": "object",
      "title": "This is an empty response"
    },
    "v1TestSMTPConfigByIdResponse": {
      "type": "object",
      "title": "This is an empty response"
    },
    "v1TestSMTPConfigRequest": {
      "type": "object",
      "properties": {
        "senderAddress": {
          "type": "string",
          "example": "noreply@m.zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        },
        "senderName": {
          "type": "string",
          "example": "ZITADEL",
          "maxLength": 200,
          "minLength": 1
        },
        "tls": {
          "type": "boolean"
        },
        "host": {
          "type": "string",
          "example": "smtp.postmarkapp.com:587",
          "description": "Make sure to include the port.",
          "maxLength": 500,
          "minLength": 1
        },
        "user": {
          "type": "string",
          "example": "197f0117-529e-443d-bf6c-0292dd9a02b7"
        },
        "password": {
          "type": "string",
          "example": "this-is-my-password"
        },
        "receiverAddress": {
          "type": "string",
          "example": "noreply@m.zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        },
        "id": {
          "type": "string",
          "example": "267191369515139464",
          "description": "Zitadel SMTP provider id in case you are not sending the password and want to reuse the stored password"
        }
      },
      "required": [
        "senderAddress",
        "senderName",
        "host",
        "receiverAddress"
      ]
    },
    "v1TestSMTPConfigResponse": {
      "type": "object",
      "title": "This is an empty response"
    },
    "v1TriggerAction": {
      "type": "object",
      "properties": {
        "triggerType": {
          "$ref": "#/definitions/zitadelactionv1TriggerType",
          "title": "id of the trigger type"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Action"
          }
        }
      }
    },
    "v1TrustedDomain": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "domain": {
          "type": "string",
          "example": "zitadel.com"
        }
      }
    },
    "v1TrustedDomainSearchQuery": {
      "type": "object",
      "properties": {
        "domainQuery": {
          "$ref": "#/definitions/instancev1DomainQuery"
        }
      }
    },
    "v1TwilioConfig": {
      "type": "object",
      "properties": {
        "sid": {
          "type": "string"
        },
        "senderNumber": {
          "type": "string"
        },
        "verifyServiceSid": {
          "type": "string"
        }
      }
    },
    "v1Unit": {
      "type": "string",
      "enum": [
        "UNIT_UNIMPLEMENTED",
        "UNIT_REQUESTS_ALL_AUTHENTICATED",
        "UNIT_ACTIONS_ALL_RUN_SECONDS"
      ],
      "default": "UNIT_UNIMPLEMENTED",
      "title": "- UNIT_REQUESTS_ALL_AUTHENTICATED: The sum of all requests to the ZITADEL API with an authorization header,\nexcluding the following exceptions\n- Calls to the System API\n- Calls that cause internal server errors\n- Failed authorizations\n- Requests after the quota already exceeded\n - UNIT_ACTIONS_ALL_RUN_SECONDS: The sum of all actions run durations in seconds"
    },
    "v1UpdateAPIAppConfigResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateActionResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateAppResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateCustomDomainPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateCustomLabelPolicyRequest": {
      "type": "object",
      "properties": {
        "primaryColor": {
          "type": "string"
        },
        "hideLoginNameSuffix": {
          "type": "boolean",
          "description": "hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set"
        },
        "warnColor": {
          "type": "string",
          "example": "#CD3D56",
          "description": "hex value for warn color",
          "maxLength": 50
        },
        "backgroundColor": {
          "type": "string",
          "example": "#FAFAFA",
          "description": "hex value for background color",
          "maxLength": 50
        },
        "fontColor": {
          "type": "string",
          "example": "#000000",
          "description": "hex value for font color",
          "maxLength": 50
        },
        "primaryColorDark": {
          "type": "string",
          "example": "#BBBAFA",
          "description": "hex value for the primary color dark theme",
          "maxLength": 50
        },
        "backgroundColorDark": {
          "type": "string",
          "example": "#111827",
          "description": "hex value for background color dark theme",
          "maxLength": 50
        },
        "warnColorDark": {
          "type": "string",
          "example": "#FF3B5B",
          "description": "hex value for warning color dark theme",
          "maxLength": 50
        },
        "fontColorDark": {
          "type": "string",
          "example": "#FFFFFF",
          "description": "hex value for font color dark theme",
          "maxLength": 50
        },
        "disableWatermark": {
          "type": "boolean"
        },
        "themeMode": {
          "$ref": "#/definitions/policyv1ThemeMode",
          "description": "setting if there should be a restriction on which themes are available"
        }
      }
    },
    "v1UpdateCustomLabelPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateCustomLockoutPolicyRequest": {
      "type": "object",
      "properties": {
        "maxPasswordAttempts": {
          "type": "integer",
          "format": "int64",
          "description": "When the user has reached the maximum password attempts the account will be locked, If this is set to 0 the lockout will not trigger."
        },
        "maxOtpAttempts": {
          "type": "integer",
          "format": "int64",
          "example": "10",
          "description": "Maximum failed attempts for a single OTP type (TOTP, SMS, Email) before the account gets locked. Attempts are reset as soon as the OTP is entered correctly. If set to 0 the account will never be locked."
        }
      }
    },
    "v1UpdateCustomLockoutPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateCustomLoginPolicyRequest": {
      "type": "object",
      "properties": {
        "allowUsernamePassword": {
          "type": "boolean"
        },
        "allowRegister": {
          "type": "boolean"
        },
        "allowExternalIdp": {
          "type": "boolean"
        },
        "forceMfa": {
          "type": "boolean"
        },
        "passwordlessType": {
          "$ref": "#/definitions/v1PasswordlessType"
        },
        "hidePasswordReset": {
          "type": "boolean"
        },
        "ignoreUnknownUsernames": {
          "type": "boolean",
          "description": "defines if unknown username on login screen directly returns an error or always displays the password screen"
        },
        "defaultRedirectUri": {
          "type": "string",
          "description": "defines where the user will be redirected to if the login is started without app context (e.g. from mail)"
        },
        "passwordCheckLifetime": {
          "type": "string"
        },
        "externalLoginCheckLifetime": {
          "type": "string"
        },
        "mfaInitSkipLifetime": {
          "type": "string"
        },
        "secondFactorCheckLifetime": {
          "type": "string"
        },
        "multiFactorCheckLifetime": {
          "type": "string"
        },
        "allowDomainDiscovery": {
          "type": "boolean",
          "description": "If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success."
        },
        "disableLoginWithEmail": {
          "type": "boolean",
          "description": "defines if the user can additionally (to the login name) be identified by their verified email address"
        },
        "disableLoginWithPhone": {
          "type": "boolean",
          "description": "defines if the user can additionally (to the login name) be identified by their verified phone number"
        },
        "forceMfaLocalOnly": {
          "type": "boolean",
          "description": "if activated, only local authenticated users are forced to use MFA. Authentication through IDPs won't prompt a MFA step in the login."
        }
      }
    },
    "v1UpdateCustomLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateCustomNotificationPolicyRequest": {
      "type": "object",
      "properties": {
        "passwordChange": {
          "type": "boolean",
          "description": "If set to true the users will get a notification whenever their password has been changed."
        }
      }
    },
    "v1UpdateCustomNotificationPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateCustomOrgIAMPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateCustomPasswordAgePolicyRequest": {
      "type": "object",
      "properties": {
        "maxAgeDays": {
          "type": "integer",
          "format": "int64",
          "description": "Amount of days after which a password will expire. The user will be forced to change the password on the following authentication."
        },
        "expireWarnDays": {
          "type": "integer",
          "format": "int64",
          "description": "Amount of days after which the user should be notified of the upcoming expiry. ZITADEL will not notify the user."
        }
      }
    },
    "v1UpdateCustomPasswordAgePolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateCustomPasswordComplexityPolicyRequest": {
      "type": "object",
      "properties": {
        "minLength": {
          "type": "string",
          "format": "uint64",
          "example": "8"
        },
        "hasUppercase": {
          "type": "boolean",
          "description": "Defines if the password MUST contain an upper case letter"
        },
        "hasLowercase": {
          "type": "boolean",
          "description": "Defines if the password MUST contain a lowercase letter"
        },
        "hasNumber": {
          "type": "boolean",
          "description": "Defines if the password MUST contain a number"
        },
        "hasSymbol": {
          "type": "boolean",
          "description": "defines if the password MUST contain a symbol. E.g. \"$\""
        }
      }
    },
    "v1UpdateCustomPasswordComplexityPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateCustomPrivacyPolicyRequest": {
      "type": "object",
      "properties": {
        "tosLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/legal/terms-of-service",
          "description": "If registration is enabled, the user has to accept the TOS. Variable {{.Lang}} can be set to have different links based on the language."
        },
        "privacyLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/legal/privacy-policy",
          "description": "If registration is enabled, the user has to accept the privacy terms. Variable {{.Lang}} can be set to have different links based on the language."
        },
        "helpLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/manuals/introduction",
          "description": "Variable {{.Lang}} can be set to have different links based on the language."
        },
        "supportEmail": {
          "type": "string",
          "example": "support-email@test.com",
          "description": "help / support email address."
        },
        "docsLink": {
          "type": "string",
          "example": "https://zitadel.com/docs",
          "description": "Link to documentation to be shown in the console."
        },
        "customLink": {
          "type": "string",
          "example": "https://external.link",
          "description": "Link to an external resource that will be available to users in the console."
        },
        "customLinkText": {
          "type": "string",
          "example": "External",
          "description": "The button text that would be shown in console pointing to custom link."
        }
      }
    },
    "v1UpdateCustomPrivacyPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateDomainPolicyRequest": {
      "type": "object",
      "properties": {
        "userLoginMustBeDomain": {
          "type": "boolean"
        },
        "validateOrgDomains": {
          "type": "boolean"
        },
        "smtpSenderAddressMatchesInstanceDomain": {
          "type": "boolean"
        }
      }
    },
    "v1UpdateDomainPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateEmailProviderHTTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateEmailProviderSMTPPasswordResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateEmailProviderSMTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateHumanEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateHumanPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateHumanProfileResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateIAMMemberResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateIDPJWTConfigResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateIDPOIDCConfigResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateIDPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateInstanceResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateLabelPolicyRequest": {
      "type": "object",
      "properties": {
        "primaryColor": {
          "type": "string",
          "example": "#353535",
          "description": "represents a color scheme",
          "maxLength": 50
        },
        "hideLoginNameSuffix": {
          "type": "boolean",
          "description": "hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set"
        },
        "warnColor": {
          "type": "string",
          "example": "#CD3D56",
          "description": "hex value for warn color",
          "maxLength": 50
        },
        "backgroundColor": {
          "type": "string",
          "example": "#FAFAFA",
          "description": "hex value for background color",
          "maxLength": 50
        },
        "fontColor": {
          "type": "string",
          "example": "#000000",
          "description": "hex value for font color",
          "maxLength": 50
        },
        "primaryColorDark": {
          "type": "string",
          "example": "#BBBAFA",
          "description": "hex value for the primary color dark theme",
          "maxLength": 50
        },
        "backgroundColorDark": {
          "type": "string",
          "example": "#111827",
          "description": "hex value for background color dark theme",
          "maxLength": 50
        },
        "warnColorDark": {
          "type": "string",
          "example": "#FF3B5B",
          "description": "hex value for warning color dark theme",
          "maxLength": 50
        },
        "fontColorDark": {
          "type": "string",
          "example": "#FFFFFF",
          "description": "hex value for font color dark theme",
          "maxLength": 50
        },
        "disableWatermark": {
          "type": "boolean"
        },
        "themeMode": {
          "$ref": "#/definitions/policyv1ThemeMode",
          "description": "setting if there should be a restriction on which themes are available"
        }
      }
    },
    "v1UpdateLabelPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateLockoutPolicyRequest": {
      "type": "object",
      "properties": {
        "maxPasswordAttempts": {
          "type": "integer",
          "format": "int64",
          "example": "10",
          "description": "Maximum password check attempts before the account gets locked. Attempts are reset as soon as the password is entered correctly or the password is reset.",
          "title": "failed attempts until a user gets locked"
        },
        "maxOtpAttempts": {
          "type": "integer",
          "format": "int64",
          "example": "10",
          "description": "Maximum failed attempts for a single OTP type (TOTP, SMS, Email) before the account gets locked. Attempts are reset as soon as the OTP is entered correctly. If set to 0 the account will never be locked."
        }
      }
    },
    "v1UpdateLockoutPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateLoginPolicyRequest": {
      "type": "object",
      "properties": {
        "allowUsernamePassword": {
          "type": "boolean",
          "description": "defines if a user is allowed to log in with username and password"
        },
        "allowRegister": {
          "type": "boolean",
          "description": "defines if a person is allowed to register a user on this organization"
        },
        "allowExternalIdp": {
          "type": "boolean",
          "description": "defines if a user is allowed to add a defined identity provider. E.g. Google auth"
        },
        "forceMfa": {
          "type": "boolean",
          "description": "defines if a user MUST use a multi-factor to log in"
        },
        "passwordlessType": {
          "$ref": "#/definitions/v1PasswordlessType",
          "description": "defines if passwordless is allowed for users"
        },
        "hidePasswordReset": {
          "type": "boolean",
          "description": "defines if password reset link should be shown in the login screen"
        },
        "ignoreUnknownUsernames": {
          "type": "boolean",
          "description": "defines if unknown username on login screen directly returns an error or always displays the password screen"
        },
        "defaultRedirectUri": {
          "type": "string",
          "description": "defines where the user will be redirected to if the login is started without app context (e.g. from mail)"
        },
        "passwordCheckLifetime": {
          "type": "string"
        },
        "externalLoginCheckLifetime": {
          "type": "string"
        },
        "mfaInitSkipLifetime": {
          "type": "string"
        },
        "secondFactorCheckLifetime": {
          "type": "string"
        },
        "multiFactorCheckLifetime": {
          "type": "string"
        },
        "allowDomainDiscovery": {
          "type": "boolean",
          "description": "If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success."
        },
        "disableLoginWithEmail": {
          "type": "boolean",
          "description": "defines if the user can additionally (to the login name) be identified by their verified email address"
        },
        "disableLoginWithPhone": {
          "type": "boolean",
          "description": "defines if the user can additionally (to the login name) be identified by their verified phone number"
        },
        "forceMfaLocalOnly": {
          "type": "boolean",
          "description": "if activated, only local authenticated users are forced to use MFA. Authentication through IDPs won't prompt a MFA step in the login."
        }
      }
    },
    "v1UpdateLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateMachineResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateMyPasswordRequest": {
      "type": "object",
      "properties": {
        "oldPassword": {
          "type": "string",
          "example": "MyOldPassword12!",
          "minLength": 1
        },
        "newPassword": {
          "type": "string",
          "example": "MyNewPassword12!",
          "minLength": 1
        }
      },
      "required": [
        "oldPassword",
        "newPassword"
      ]
    },
    "v1UpdateMyPasswordResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateMyProfileRequest": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Minnie",
          "maxLength": 200,
          "minLength": 1
        },
        "lastName": {
          "type": "string",
          "example": "Mouse",
          "maxLength": 200,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "example": "Minnie",
          "maxLength": 200,
          "minLength": 1
        },
        "displayName": {
          "type": "string",
          "example": "Minnie Mouse",
          "maxLength": 200,
          "minLength": 1
        },
        "preferredLanguage": {
          "type": "string",
          "example": "en",
          "maxLength": 10
        },
        "gender": {
          "$ref": "#/definitions/userv1Gender"
        }
      },
      "required": [
        "firstName",
        "lastName",
        "displayName"
      ]
    },
    "v1UpdateMyProfileResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateMyUserNameRequest": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        }
      }
    },
    "v1UpdateMyUserNameResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateNotificationPolicyRequest": {
      "type": "object",
      "properties": {
        "passwordChange": {
          "type": "boolean",
          "description": "If set to true the users will get a notification whenever their password has been changed."
        }
      }
    },
    "v1UpdateNotificationPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateOIDCAppConfigResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateOIDCSettingsRequest": {
      "type": "object",
      "properties": {
        "accessTokenLifetime": {
          "type": "string"
        },
        "idTokenLifetime": {
          "type": "string"
        },
        "refreshTokenIdleExpiration": {
          "type": "string"
        },
        "refreshTokenExpiration": {
          "type": "string"
        }
      }
    },
    "v1UpdateOIDCSettingsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateOrgIAMPolicyRequest": {
      "type": "object",
      "properties": {
        "userLoginMustBeDomain": {
          "type": "boolean"
        }
      }
    },
    "v1UpdateOrgIAMPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateOrgIDPJWTConfigResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateOrgIDPOIDCConfigResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateOrgIDPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateOrgMemberResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateOrgRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Customer 1",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "name"
      ]
    },
    "v1UpdateOrgResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdatePasswordAgePolicyRequest": {
      "type": "object",
      "properties": {
        "maxAgeDays": {
          "type": "integer",
          "format": "int64",
          "description": "Amount of days after which a password will expire. The user will be forced to change the password on the following authentication."
        },
        "expireWarnDays": {
          "type": "integer",
          "format": "int64",
          "description": "Amount of days after which the user should be notified of the upcoming expiry. ZITADEL will not notify the user."
        }
      }
    },
    "v1UpdatePasswordAgePolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdatePasswordComplexityPolicyRequest": {
      "type": "object",
      "properties": {
        "minLength": {
          "type": "integer",
          "format": "int64",
          "example": "8"
        },
        "hasUppercase": {
          "type": "boolean",
          "description": "Defines if the password MUST contain an upper case letter"
        },
        "hasLowercase": {
          "type": "boolean",
          "description": "Defines if the password MUST contain a lowercase letter"
        },
        "hasNumber": {
          "type": "boolean",
          "description": "Defines if the password MUST contain a number"
        },
        "hasSymbol": {
          "type": "boolean",
          "description": "Defines if the password MUST contain a symbol. E.g. \"$\""
        }
      }
    },
    "v1UpdatePasswordComplexityPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdatePrivacyPolicyRequest": {
      "type": "object",
      "properties": {
        "tosLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/legal/terms-of-service"
        },
        "privacyLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/legal/privacy-policy"
        },
        "helpLink": {
          "type": "string",
          "example": "https://zitadel.com/docs/manuals/introduction"
        },
        "supportEmail": {
          "type": "string",
          "example": "support-email@test.com",
          "description": "help / support email address."
        },
        "docsLink": {
          "type": "string",
          "example": "https://zitadel.com/docs"
        },
        "customLink": {
          "type": "string",
          "example": "https://external.link",
          "description": "Link to an external resource that will be available to users in the console."
        },
        "customLinkText": {
          "type": "string",
          "example": "External",
          "description": "The button text that would be shown in console pointing to custom link."
        }
      }
    },
    "v1UpdatePrivacyPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateProjectGrantMemberResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateProjectGrantResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateProjectMemberResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateProjectResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateProjectRoleResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateSAMLAppConfigResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateSMSProviderHTTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateSMSProviderTwilioResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateSMSProviderTwilioTokenResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateSMTPConfigPasswordResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateSMTPConfigResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateSecretGeneratorResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateUserGrantResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UpdateUserNameResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1UserGrantDisplayNameQuery": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "example": "Gigi Giraffe",
          "description": "display name of a user"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which equality method is used"
        }
      }
    },
    "v1UserGrantEmailQuery": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "gigi@zitadel.com"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1UserGrantFirstNameQuery": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Gigi"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1UserGrantLastNameQuery": {
      "type": "object",
      "properties": {
        "lastName": {
          "type": "string",
          "example": "Giraffe"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1UserGrantOrgDomainQuery": {
      "type": "object",
      "properties": {
        "orgDomain": {
          "type": "string",
          "example": "OS AG"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1UserGrantOrgNameQuery": {
      "type": "object",
      "properties": {
        "orgName": {
          "type": "string",
          "example": "cao"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1UserGrantProjectGrantIDQuery": {
      "type": "object",
      "properties": {
        "projectGrantId": {
          "type": "string",
          "example": "69629023906488334"
        }
      }
    },
    "v1UserGrantProjectIDQuery": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "example": "69629023906488334"
        }
      }
    },
    "v1UserGrantProjectNameQuery": {
      "type": "object",
      "properties": {
        "projectName": {
          "type": "string",
          "example": "ITADE"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "example": 3
        }
      }
    },
    "v1UserGrantQuery": {
      "type": "object",
      "properties": {
        "projectIdQuery": {
          "$ref": "#/definitions/v1UserGrantProjectIDQuery"
        },
        "userIdQuery": {
          "$ref": "#/definitions/v1UserGrantUserIDQuery"
        },
        "withGrantedQuery": {
          "$ref": "#/definitions/v1UserGrantWithGrantedQuery"
        },
        "roleKeyQuery": {
          "$ref": "#/definitions/v1UserGrantRoleKeyQuery"
        },
        "projectGrantIdQuery": {
          "$ref": "#/definitions/v1UserGrantProjectGrantIDQuery"
        },
        "userNameQuery": {
          "$ref": "#/definitions/v1UserGrantUserNameQuery"
        },
        "firstNameQuery": {
          "$ref": "#/definitions/v1UserGrantFirstNameQuery"
        },
        "lastNameQuery": {
          "$ref": "#/definitions/v1UserGrantLastNameQuery"
        },
        "emailQuery": {
          "$ref": "#/definitions/v1UserGrantEmailQuery"
        },
        "orgNameQuery": {
          "$ref": "#/definitions/v1UserGrantOrgNameQuery"
        },
        "orgDomainQuery": {
          "$ref": "#/definitions/v1UserGrantOrgDomainQuery"
        },
        "projectNameQuery": {
          "$ref": "#/definitions/v1UserGrantProjectNameQuery"
        },
        "displayNameQuery": {
          "$ref": "#/definitions/v1UserGrantDisplayNameQuery"
        },
        "userTypeQuery": {
          "$ref": "#/definitions/v1UserGrantUserTypeQuery"
        }
      }
    },
    "v1UserGrantRoleKeyQuery": {
      "type": "object",
      "properties": {
        "roleKey": {
          "type": "string",
          "example": "role.super.man"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1UserGrantState": {
      "type": "string",
      "enum": [
        "USER_GRANT_STATE_UNSPECIFIED",
        "USER_GRANT_STATE_ACTIVE",
        "USER_GRANT_STATE_INACTIVE"
      ],
      "default": "USER_GRANT_STATE_UNSPECIFIED"
    },
    "v1UserGrantUserIDQuery": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "69629023906488334"
        }
      }
    },
    "v1UserGrantUserNameQuery": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "example": "gigi-giraffe"
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v1UserGrantUserTypeQuery": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/userv1Type",
          "example": "TYPE_HUMAN",
          "description": "type of user"
        }
      }
    },
    "v1UserGrantWithGrantedQuery": {
      "type": "object",
      "properties": {
        "withGranted": {
          "type": "boolean"
        }
      }
    },
    "v1UsernameChangeDoneScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        }
      }
    },
    "v1UsernameChangeScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "usernameLabel": {
          "type": "string"
        },
        "cancelButtonText": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        }
      }
    },
    "v1ValidateOrgDomainResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1VerifyMFAOTPScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "codeLabel": {
          "type": "string"
        },
        "nextButtonText": {
          "type": "string"
        }
      }
    },
    "v1VerifyMFAU2FScreenText": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "validateTokenText": {
          "type": "string"
        },
        "notSupported": {
          "type": "string"
        },
        "errorRetry": {
          "type": "string"
        }
      }
    },
    "v1VerifyMyAuthFactorOTPRequest": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "123456"
        }
      },
      "required": [
        "code"
      ]
    },
    "v1VerifyMyAuthFactorOTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1VerifyMyAuthFactorU2FRequest": {
      "type": "object",
      "properties": {
        "verification": {
          "$ref": "#/definitions/v1WebAuthNVerification"
        }
      }
    },
    "v1VerifyMyAuthFactorU2FResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1VerifyMyEmailRequest": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "H83J3",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "code"
      ]
    },
    "v1VerifyMyEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1VerifyMyPasswordlessRequest": {
      "type": "object",
      "properties": {
        "verification": {
          "$ref": "#/definitions/v1WebAuthNVerification"
        }
      }
    },
    "v1VerifyMyPasswordlessResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1VerifyMyPhoneRequest": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "H83J3",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "code"
      ]
    },
    "v1VerifyMyPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "v1WebAuthNKey": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string",
          "format": "byte",
          "example": "eyJwdWJsaWNLZXkiOnsiY2hhbGxlbmdlIoplfZm4vM21qSzBPdjltN2x6VWhnclYyejFJSlVzZnpLd0Z1TytWTWtzRW1Icz0iLCJycCI6eyJuYW1lIjoiWklUQURFTCIsImlkIjoiYWNtZS1nem9lNHgueml0YWRlbC5jbG91ZCJ9LCJ1c2VyIjp7Im5hbWUiOiJ0ZXN0dXNlcjU1QGFjbWUueml0YWRlbC5jbG91ZCIsImRpc3BsYXlOYW1lIjoiVGVzdCBUZXN0IiwiaWQiOiJNVGd5TVRVMk1qWTBNakk1TXpBMk5qSTEifSwicHViS2V5Q3JlZFBhcmFtcyI6W3sidHlwZSI6InB1YmxpYy1rZXkiLCJhbGciOi03fSx7InR5cGUiOiJwdWJsaWMta2V5IiwiYWxnIjotMzV9LHsidHlwZSI6InB1YmxpYy1rZXkiLCJhbGciOi0zNn0seyJ0eXBlIjoicHVibGljLWtleSIsImFsZyI6LTI1N30seyJ0eXBlIjoicHVibGljLWtleSIsImFsZyI6LTI1OH0seyJ0eXBlIjoicHVibGljLWtleSIsImFsZyI6LTI1OX0seyJ0eXBlIjoicHVibGljLWtleSIsImFsZyI6LTM3fSx7InR5cGUiOiJwdWJsaWMta2V5IiwiYWxnIjotMzh9LHsidHlwZSI6InB1YmxpYy1rZXkiLCJhbGciOi0zOX0seyJ0eXBlIjoicHVibGljLWtleSIsImFsZyI6LTh9XSwiYXV0aGVudGljYXRvclNlbGVjdGlvbiI6eyJ1c2VyVmVyaWZpY2F0aW9uIjoiZGlzY291cmFnZWQifn2ilGltZW91dCI6NjAwMDAsImF0dGVzdGF0aW9uIjoibm9uZSJ9fQ==",
          "description": "json representation of public key credential creation options used by the webauthn client"
        }
      }
    },
    "v1WebAuthNToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "state": {
          "$ref": "#/definitions/userv1AuthFactorState",
          "description": "current state of the token"
        },
        "name": {
          "type": "string",
          "example": "fido key",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v1WebAuthNVerification": {
      "type": "object",
      "properties": {
        "publicKeyCredential": {
          "type": "string",
          "format": "byte",
          "description": "JSON representation of public key credential issued by the webauthn client",
          "maxLength": 1048576,
          "minLength": 55
        },
        "tokenName": {
          "type": "string",
          "example": "fido key",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v2AuthFactors": {
      "type": "string",
      "enum": [
        "OTP",
        "OTP_SMS",
        "OTP_EMAIL",
        "U2F"
      ],
      "default": "OTP"
    },
    "v2CreateInviteCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "inviteCode": {
          "type": "string",
          "description": "The invite code is returned if the verification was set to return_code."
        }
      }
    },
    "v2CreateResponseResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "url": {
          "type": "string",
          "example": "https://client.example.org/cb",
          "description": "URL including the Assertion Consumer Service where the user should be redirected or has to call per POST, depending on the binding. Contains details for the application to obtain the response on success, or error details on failure. Note that this field must be treated as credentials, as the contained SAMLResponse or code can be used on behalve of the user."
        },
        "redirect": {
          "$ref": "#/definitions/v2RedirectResponse",
          "description": "Set if the binding is Redirect-Binding, where the user can directly be redirected to the application, using a \\\"302 FOUND\\\" status to the URL."
        },
        "post": {
          "$ref": "#/definitions/v2PostResponse",
          "description": "Set if the binding is POST-Binding, where the application expects to be called per HTTP POST with the SAMLResponse and RelayState in the form body."
        }
      }
    },
    "v2CreatorQuery": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334",
          "description": "ID of the user who created the session. If empty, the calling user's ID is used.",
          "maxLength": 200
        }
      }
    },
    "v2DefaultOrganizationQuery": {
      "type": "object"
    },
    "v2GetSAMLRequestResponse": {
      "type": "object",
      "properties": {
        "samlRequest": {
          "$ref": "#/definitions/v2SAMLRequest"
        }
      }
    },
    "v2IDPConfig": {
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/definitions/zitadelidpv2Options"
        },
        "ldap": {
          "$ref": "#/definitions/idpv2LDAPConfig"
        },
        "google": {
          "$ref": "#/definitions/idpv2GoogleConfig"
        },
        "oauth": {
          "$ref": "#/definitions/idpv2OAuthConfig"
        },
        "oidc": {
          "$ref": "#/definitions/idpv2GenericOIDCConfig"
        },
        "jwt": {
          "$ref": "#/definitions/idpv2JWTConfig"
        },
        "github": {
          "$ref": "#/definitions/idpv2GitHubConfig"
        },
        "githubEs": {
          "$ref": "#/definitions/idpv2GitHubEnterpriseServerConfig"
        },
        "gitlab": {
          "$ref": "#/definitions/idpv2GitLabConfig"
        },
        "gitlabSelfHosted": {
          "$ref": "#/definitions/idpv2GitLabSelfHostedConfig"
        },
        "azureAd": {
          "$ref": "#/definitions/idpv2AzureADConfig"
        },
        "apple": {
          "$ref": "#/definitions/idpv2AppleConfig"
        },
        "saml": {
          "$ref": "#/definitions/idpv2SAMLConfig"
        }
      }
    },
    "v2ListAuthenticationFactorsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv2AuthFactor"
          }
        }
      }
    },
    "v2ListIDPLinksResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv2IDPLink"
          }
        }
      }
    },
    "v2ListOrganizationsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/objectv2ListQuery",
          "title": "list limitations and ordering"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v2OrganizationFieldName",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelorgv2SearchQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v2ListOrganizationsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2ListDetails"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v2OrganizationFieldName"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelorgv2Organization"
          }
        }
      }
    },
    "v2ListPasskeysResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Passkey"
          }
        }
      }
    },
    "v2LoginV2FeatureFlag": {
      "type": "object",
      "properties": {
        "required": {
          "type": "boolean"
        },
        "baseUri": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/featurev2Source",
          "description": "The source where the setting of the feature was defined. The source may be the resource itself or a resource owner through inheritance."
        }
      }
    },
    "v2OrganizationDomainQuery": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "example": "citadel.cloud",
          "description": "Domain used in organization, not necessary primary domain.",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2TextQueryMethod",
          "description": "Defines which text equality method is used."
        }
      },
      "required": [
        "domain"
      ]
    },
    "v2OrganizationFieldName": {
      "type": "string",
      "enum": [
        "ORGANIZATION_FIELD_NAME_UNSPECIFIED",
        "ORGANIZATION_FIELD_NAME_NAME"
      ],
      "default": "ORGANIZATION_FIELD_NAME_UNSPECIFIED"
    },
    "v2OrganizationIDQuery": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334",
          "description": "Unique identifier of the organization.",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "id"
      ]
    },
    "v2OrganizationNameQuery": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "gigi-giraffe",
          "description": "Name of the organization.",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/objectv2TextQueryMethod",
          "description": "Defines which text equality method is used."
        }
      },
      "required": [
        "name"
      ]
    },
    "v2OrganizationState": {
      "type": "string",
      "enum": [
        "ORGANIZATION_STATE_UNSPECIFIED",
        "ORGANIZATION_STATE_ACTIVE",
        "ORGANIZATION_STATE_INACTIVE",
        "ORGANIZATION_STATE_REMOVED"
      ],
      "default": "ORGANIZATION_STATE_UNSPECIFIED"
    },
    "v2OrganizationStateQuery": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/v2OrganizationState",
          "description": "Current state of the organization."
        }
      }
    },
    "v2Passkey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "state": {
          "$ref": "#/definitions/userv2AuthFactorState",
          "description": "current state of the passkey"
        },
        "name": {
          "type": "string",
          "example": "fido key",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v2PostResponse": {
      "type": "object",
      "properties": {
        "relayState": {
          "type": "string"
        },
        "samlResponse": {
          "type": "string"
        }
      }
    },
    "v2RedirectResponse": {
      "type": "object"
    },
    "v2RemoveIDPLinkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "v2RemovePasskeyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "v2RemoveU2FResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "v2ResendInviteCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "v2ReturnInviteCode": {
      "type": "object"
    },
    "v2SAMLRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the SAMLRequest"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the SAMLRequest was created"
        },
        "issuer": {
          "type": "string",
          "description": "SAML entityID of the application that created the SAMLRequest"
        },
        "assertionConsumerService": {
          "type": "string",
          "description": "URL which points back to the assertion consumer service of the application"
        },
        "relayState": {
          "type": "string",
          "description": "RelayState provided by the application for the request"
        },
        "binding": {
          "type": "string",
          "description": "Binding used by the application for the request"
        }
      },
      "externalDocs": {
        "description": "Find out more about SAMLRequest parameters",
        "url": "https://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html"
      }
    },
    "v2SendEmailCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the verification was set to return_code, the code will be returned"
        }
      }
    },
    "v2SendInviteCode": {
      "type": "object",
      "properties": {
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/user/invite?userID={{.UserID}}\u0026code={{.Code}}\u0026orgID={{.OrgID}}",
          "description": "Optionally set a url_template, which will be used in the invite mail sent by ZITADEL to guide the user to your invitation page.\nIf no template is set, the default ZITADEL url will be used.\n\nThe following placeholders can be used: UserID, OrgID, Code",
          "maxLength": 200,
          "minLength": 1
        },
        "applicationName": {
          "type": "string",
          "example": "CustomerPortal",
          "description": "Optionally set an application name, which will be used in the invite mail sent by ZITADEL.\nIf no application name is set, ZITADEL will be used as default.",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v2UserAgentQuery": {
      "type": "object",
      "properties": {
        "fingerprintId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "Finger print id of the user agent used for the session.\nSet an empty fingerprint_id to use the user agent from the call.\nIf the user agent is not available from the current token, an error will be returned.",
          "maxLength": 200
        }
      }
    },
    "v2VerifyInviteCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv2Details"
        }
      }
    },
    "v3alphaActivateUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaActivateWebKeyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaAddIDPAuthenticatorResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaAddOTPEmailAuthenticatorResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "otpEmailId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "unique identifier of the OTP Email registration."
        },
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "The OTP verification code will be set if a email was set with a return_code verification option."
        }
      }
    },
    "v3alphaAddOTPSMSAuthenticatorResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "otpSmsId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "unique identifier of the OTP SMS registration."
        },
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "The OTP verification code will be set if a phone was set with a return_code verification option."
        }
      }
    },
    "v3alphaAddUsernameResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "usernameId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "unique identifier of the username."
        }
      }
    },
    "v3alphaAddedEvent": {
      "type": "object",
      "properties": {
        "projectionSleep": {
          "type": "string",
          "example": "5s",
          "description": "issues a pg_sleep command in the projection reducer, simulating a slow query."
        },
        "blob": {
          "type": "string",
          "description": "optional text that can be set as a state."
        }
      }
    },
    "v3alphaAuthNKeyType": {
      "type": "string",
      "enum": [
        "AUTHN_KEY_TYPE_UNSPECIFIED",
        "AUTHN_KEY_TYPE_JSON"
      ],
      "default": "AUTHN_KEY_TYPE_UNSPECIFIED"
    },
    "v3alphaAuthenticationKey": {
      "type": "object",
      "properties": {
        "authenticationKeyId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "ID is the read-only unique identifier of the authentication key."
        },
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "type": {
          "$ref": "#/definitions/v3alphaAuthNKeyType",
          "example": "KEY_TYPE_JSON",
          "title": "the file type of the key"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "example": "3019-04-01T08:45:00.000000Z",
          "description": "After the expiration date, the key will no longer be usable for authentication."
        }
      }
    },
    "v3alphaAuthenticatorRegistrationCode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "e2a48d6a-362b-4db6-a1fb-34feab84dc62",
          "description": "ID to the one time code generated by ZITADEL.",
          "maxLength": 200,
          "minLength": 1
        },
        "code": {
          "type": "string",
          "example": "SKJd342k",
          "description": "one time code generated by ZITADEL.",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "id",
        "code"
      ]
    },
    "v3alphaAuthenticatorType": {
      "type": "string",
      "enum": [
        "AUTHENTICATOR_TYPE_UNSPECIFIED",
        "AUTHENTICATOR_TYPE_USERNAME",
        "AUTHENTICATOR_TYPE_PASSWORD",
        "AUTHENTICATOR_TYPE_WEBAUTHN",
        "AUTHENTICATOR_TYPE_TOTP",
        "AUTHENTICATOR_TYPE_OTP_EMAIL",
        "AUTHENTICATOR_TYPE_OTP_SMS",
        "AUTHENTICATOR_TYPE_AUTHENTICATION_KEY",
        "AUTHENTICATOR_TYPE_IDENTITY_PROVIDER"
      ],
      "default": "AUTHENTICATOR_TYPE_UNSPECIFIED"
    },
    "v3alphaAuthenticators": {
      "type": "object",
      "properties": {
        "usernames": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v3alphaUsername"
          },
          "description": "All of the user's usernames, which will be used for identification during authentication."
        },
        "password": {
          "$ref": "#/definitions/userv3alphaPassword",
          "description": "If the user has set a password, the time it was last changed will be returned."
        },
        "webAuthN": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv3alphaWebAuthN"
          },
          "description": "Meta information about the user's WebAuthN authenticators."
        },
        "totps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v3alphaTOTP"
          },
          "description": "A list of the user's time-based one-time password (TOTP) authenticators,\nincl. the name for identification."
        },
        "otpSms": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv3alphaOTPSMS"
          },
          "description": "A list of the user's one-time password (OTP) SMS authenticators."
        },
        "otpEmail": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv3alphaOTPEmail"
          },
          "description": "A list of the user's one-time password (OTP) Email authenticators."
        },
        "authenticationKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v3alphaAuthenticationKey"
          },
          "description": "A list of the user's authentication keys. They can be used to authenticate e.g. by JWT Profile."
        },
        "identityProviders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv3alphaIdentityProvider"
          },
          "description": "A list of the user's linked identity providers (IDPs)."
        }
      }
    },
    "v3alphaChangedEvent": {
      "type": "object",
      "properties": {
        "projectionSleep": {
          "type": "string",
          "example": "5s",
          "description": "issues a pg_sleep command in the projection reducer, simulating a slow query."
        },
        "blob": {
          "type": "string",
          "description": "optional text that can be set as a state."
        }
      }
    },
    "v3alphaCondition": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/v3alphaRequestExecution",
          "description": "Condition-type to execute if a request on the defined API point happens."
        },
        "response": {
          "$ref": "#/definitions/v3alphaResponseExecution",
          "description": "Condition-type to execute on response if a request on the defined API point happens."
        },
        "function": {
          "$ref": "#/definitions/v3alphaFunctionExecution",
          "description": "Condition-type to execute if function is used, replaces actions v1."
        },
        "event": {
          "$ref": "#/definitions/v3alphaEventExecution",
          "description": "Condition-type to execute if an event is created in the system."
        }
      }
    },
    "v3alphaCreateDebugEventsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaCreateTargetResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "signingKey": {
          "type": "string",
          "example": "98KmsU67",
          "description": "Key used to sign and check payload sent to the target."
        }
      }
    },
    "v3alphaCreateUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "emailCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "The email code will be set if a contact email was set with a return_code verification option."
        },
        "phoneCode": {
          "type": "string",
          "example": "IFi39dk2",
          "description": "The phone code will be set if a contact phone was set with a return_code verification option."
        }
      }
    },
    "v3alphaCreateUserSchemaResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails",
          "description": "Details provide some base information (such as the last change date) of the schema."
        }
      }
    },
    "v3alphaCreateWebAuthNRegistrationLinkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "code": {
          "$ref": "#/definitions/v3alphaAuthenticatorRegistrationCode",
          "description": "In case the medium was set to return_code, the code will be returned."
        }
      }
    },
    "v3alphaCreateWebKeyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaDeactivateUserSchemaResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails",
          "description": "Details provide some base information (such as the last change date) of the schema."
        }
      }
    },
    "v3alphaDeleteTargetResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaDeleteUserSchemaResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails",
          "description": "Details provide some base information (such as the last change date) of the schema."
        }
      }
    },
    "v3alphaDeleteWebKeyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaEmailFilter": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "email address of the user",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/v3alphaTextFilterMethod",
          "description": "Defines which text comparison method used for the email query."
        }
      },
      "required": [
        "address"
      ]
    },
    "v3alphaEventExecution": {
      "type": "object",
      "properties": {
        "event": {
          "type": "string",
          "example": "user.human.added",
          "description": "Event name as condition.",
          "maxLength": 1000,
          "minLength": 1
        },
        "group": {
          "type": "string",
          "example": "user.human",
          "description": "Event group as condition, all events under this group.",
          "maxLength": 1000,
          "minLength": 1
        },
        "all": {
          "type": "boolean",
          "description": "all events as condition."
        }
      }
    },
    "v3alphaExecution": {
      "type": "object",
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v3alphaExecutionTargetType"
          },
          "description": "Ordered list of targets/includes called during the execution."
        }
      }
    },
    "v3alphaExecutionFieldName": {
      "type": "string",
      "enum": [
        "EXECUTION_FIELD_NAME_UNSPECIFIED",
        "EXECUTION_FIELD_NAME_ID",
        "EXECUTION_FIELD_NAME_CREATED_DATE",
        "EXECUTION_FIELD_NAME_CHANGED_DATE"
      ],
      "default": "EXECUTION_FIELD_NAME_UNSPECIFIED"
    },
    "v3alphaExecutionSearchFilter": {
      "type": "object",
      "properties": {
        "inConditionsFilter": {
          "$ref": "#/definitions/v3alphaInConditionsFilter"
        },
        "executionTypeFilter": {
          "$ref": "#/definitions/v3alphaExecutionTypeFilter"
        },
        "targetFilter": {
          "$ref": "#/definitions/v3alphaTargetFilter"
        },
        "includeFilter": {
          "$ref": "#/definitions/v3alphaIncludeFilter"
        }
      }
    },
    "v3alphaExecutionTargetType": {
      "type": "object",
      "properties": {
        "target": {
          "type": "string",
          "description": "Unique identifier of existing target to call."
        },
        "include": {
          "$ref": "#/definitions/v3alphaCondition",
          "description": "Unique identifier of existing execution to include targets of."
        }
      }
    },
    "v3alphaExecutionType": {
      "type": "string",
      "enum": [
        "EXECUTION_TYPE_UNSPECIFIED",
        "EXECUTION_TYPE_REQUEST",
        "EXECUTION_TYPE_RESPONSE",
        "EXECUTION_TYPE_EVENT",
        "EXECUTION_TYPE_FUNCTION"
      ],
      "default": "EXECUTION_TYPE_UNSPECIFIED"
    },
    "v3alphaExecutionTypeFilter": {
      "type": "object",
      "properties": {
        "executionType": {
          "$ref": "#/definitions/v3alphaExecutionType",
          "description": "Defines the type to query for."
        }
      }
    },
    "v3alphaFunctionExecution": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "title": "Executed on the specified function"
    },
    "v3alphaGetDebugEventsStateByIdResponse": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/resourcesdebug_eventsv3alphaState"
        }
      }
    },
    "v3alphaGetExecution": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "condition": {
          "$ref": "#/definitions/v3alphaCondition"
        },
        "execution": {
          "$ref": "#/definitions/v3alphaExecution"
        }
      }
    },
    "v3alphaGetIdentityProviderIntentResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "idpInformation": {
          "$ref": "#/definitions/userv3alphaIDPInformation",
          "description": "Information returned by the identity provider (IDP) such as the identification of the user\nand detailed / profile information."
        },
        "id": {
          "type": "string",
          "example": "163840776835432345",
          "description": "If the user was already federated and linked to a ZITADEL user, it's id will be returned."
        }
      }
    },
    "v3alphaGetSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629026806489455",
          "description": "The unique identifier of the user schema."
        },
        "type": {
          "type": "string",
          "example": "employees",
          "description": "The human readable name of the user schema."
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "example": 7,
          "description": "The revision the user's data is based on of the revision."
        }
      }
    },
    "v3alphaGetTargetResponse": {
      "type": "object",
      "properties": {
        "target": {
          "$ref": "#/definitions/actionv3alphaGetTarget"
        }
      }
    },
    "v3alphaGetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/userv3alphaGetUser"
        }
      }
    },
    "v3alphaGetUserSchemaResponse": {
      "type": "object",
      "properties": {
        "userSchema": {
          "$ref": "#/definitions/userschemav3alphaGetUserSchema"
        }
      }
    },
    "v3alphaGetWebKey": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "config": {
          "$ref": "#/definitions/v3alphaWebKey"
        },
        "state": {
          "$ref": "#/definitions/v3alphaWebKeyState"
        }
      }
    },
    "v3alphaIDFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "163840776835432705",
          "description": "Defines the ID of the user schema to filter for.",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/v3alphaTextFilterMethod",
          "description": "Defines which text comparison method used for the id filter."
        }
      },
      "required": [
        "id"
      ]
    },
    "v3alphaIDPAuthenticator": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string",
          "example": "69629026806489455",
          "title": "ID of the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "userId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "title": "ID of the user provided by the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "userName": {
          "type": "string",
          "example": "user@external.com",
          "description": "Username of the user provided by the identity provider.",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "idpId",
        "userId",
        "userName"
      ]
    },
    "v3alphaIdentityProviderIntent": {
      "type": "object",
      "properties": {
        "idpIntentId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "ID of the identity provider (IDP) intent."
        },
        "idpIntentToken": {
          "type": "string",
          "example": "SJKL3ioIDpo342ioqw98fjp3sdf32wahb=",
          "description": "Token of the identity provider (IDP) intent."
        },
        "userId": {
          "type": "string",
          "example": "163840776835432345",
          "description": "If the user was already federated and linked to a ZITADEL user, it's id will be returned."
        }
      }
    },
    "v3alphaInConditionsFilter": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v3alphaCondition"
          },
          "description": "Defines the conditions to query for."
        }
      }
    },
    "v3alphaInTargetIDsFilter": {
      "type": "object",
      "properties": {
        "targetIds": {
          "type": "array",
          "example": [
            "69629023906488334",
            "69622366012355662"
          ],
          "items": {
            "type": "string"
          },
          "description": "the ids of the targets to include"
        }
      }
    },
    "v3alphaIncludeFilter": {
      "type": "object",
      "properties": {
        "include": {
          "$ref": "#/definitions/v3alphaCondition",
          "example": "request.zitadel.session.v2.SessionService",
          "description": "the id of the include"
        }
      }
    },
    "v3alphaListDebugEventsStatesResponse": {
      "type": "object",
      "properties": {
        "states": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/resourcesdebug_eventsv3alphaState"
          }
        }
      }
    },
    "v3alphaListExecutionFunctionsResponse": {
      "type": "object",
      "properties": {
        "functions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "All available methods"
        }
      }
    },
    "v3alphaListExecutionMethodsResponse": {
      "type": "object",
      "properties": {
        "methods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "All available methods"
        }
      }
    },
    "v3alphaListExecutionServicesResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "All available methods"
        }
      }
    },
    "v3alphaListWebKeysResponse": {
      "type": "object",
      "properties": {
        "webKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v3alphaGetWebKey"
          }
        }
      }
    },
    "v3alphaOrganizationIDFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "163840776835432705",
          "description": "Defines the ID of the organization to query for.",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/v3alphaTextFilterMethod",
          "description": "Defines which text comparison method used for the id query."
        }
      },
      "required": [
        "id"
      ]
    },
    "v3alphaOwner": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v3alphaOwnerType"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v3alphaOwnerType": {
      "type": "string",
      "enum": [
        "OWNER_TYPE_UNSPECIFIED",
        "OWNER_TYPE_SYSTEM",
        "OWNER_TYPE_INSTANCE",
        "OWNER_TYPE_ORG"
      ],
      "default": "OWNER_TYPE_UNSPECIFIED"
    },
    "v3alphaPatchTargetResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "signingKey": {
          "type": "string",
          "example": "98KmsU67",
          "description": "Key used to sign and check payload sent to the target."
        }
      }
    },
    "v3alphaPatchUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "emailCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "The email code will be set if a contact email was set with a return_code verification option."
        },
        "phoneCode": {
          "type": "string",
          "example": "IFi39dk2",
          "description": "The phone code will be set if a contact phone was set with a return_code verification option."
        }
      }
    },
    "v3alphaPatchUserSchemaResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails",
          "description": "Details provide some base information (such as the last change date) of the schema."
        }
      }
    },
    "v3alphaPhoneFilter": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "example": "+41791234567",
          "description": "Defines the phone of the user to query for.",
          "maxLength": 20,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/v3alphaTextFilterMethod",
          "description": "Defines which text comparison method used for the phone query."
        }
      },
      "required": [
        "number"
      ]
    },
    "v3alphaReactivateUserSchemaResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails",
          "description": "Details provide some base information (such as the last change date) of the schema."
        }
      }
    },
    "v3alphaRemoveIDPAuthenticatorResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaRemoveOTPEmailAuthenticatorResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaRemoveOTPSMSAuthenticatorResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaRemoveTOTPAuthenticatorResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaRemoveUsernameResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaRemoveWebAuthNAuthenticatorResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaRemovedEvent": {
      "type": "object",
      "properties": {
        "projectionSleep": {
          "type": "string",
          "example": "5s",
          "description": "issues a pg_sleep command in the projection reducer, simulating a slow query."
        }
      }
    },
    "v3alphaRequestExecution": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "example": "/zitadel.session.v2.SessionService/ListSessions",
          "description": "GRPC-method as condition.",
          "maxLength": 1000,
          "minLength": 1
        },
        "service": {
          "type": "string",
          "example": "zitadel.session.v2.SessionService",
          "description": "GRPC-service as condition.",
          "maxLength": 1000,
          "minLength": 1
        },
        "all": {
          "type": "boolean",
          "description": "All calls to any available services and methods as condition."
        }
      }
    },
    "v3alphaRequestPasswordResetResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "In case the medium was set to return_code, the code will be returned."
        }
      }
    },
    "v3alphaResendContactEmailCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "verificationCode": {
          "type": "string",
          "description": "in case the verification was set to return_code, the code will be returned."
        }
      }
    },
    "v3alphaResendContactPhoneCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "verificationCode": {
          "type": "string",
          "description": "in case the verification was set to return_code, the code will be returned."
        }
      }
    },
    "v3alphaResponseExecution": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "example": "/zitadel.session.v2.SessionService/ListSessions",
          "description": "GRPC-method as condition.",
          "maxLength": 1000,
          "minLength": 1
        },
        "service": {
          "type": "string",
          "example": "zitadel.session.v2.SessionService",
          "description": "GRPC-service as condition.",
          "maxLength": 1000,
          "minLength": 1
        },
        "all": {
          "type": "boolean",
          "description": "All calls to any available services and methods as condition."
        }
      }
    },
    "v3alphaReturnWebAuthNRegistrationCode": {
      "type": "object"
    },
    "v3alphaSchemaIDFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "163840776835432705",
          "description": "Defines the ID of the schema to query for.",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "id"
      ]
    },
    "v3alphaSchemaTypeFilter": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "employees",
          "description": "Defines which type to query for.",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/v3alphaTextFilterMethod",
          "description": "Defines which text comparison method used for the type query."
        }
      },
      "required": [
        "type"
      ]
    },
    "v3alphaSearchExecutionsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv3alphaListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v3alphaGetExecution"
          }
        }
      }
    },
    "v3alphaSearchTargetsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv3alphaListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/actionv3alphaGetTarget"
          }
        }
      }
    },
    "v3alphaSearchUserSchemasResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv3alphaListDetails",
          "description": "Details provides information about the returned result including total amount found."
        },
        "sortingColumn": {
          "$ref": "#/definitions/resourcesuserschemav3alphaFieldName",
          "description": "States by which field the results are sorted."
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userschemav3alphaGetUserSchema"
          },
          "description": "The result contains the user schemas, which matched the queries."
        }
      }
    },
    "v3alphaSearchUsersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/objectv3alphaListDetails",
          "description": "Details provides information about the returned result including total amount found."
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userv3alphaGetUser"
          },
          "description": "The result contains the user schemas, which matched the queries."
        }
      }
    },
    "v3alphaSendPasswordResetEmail": {
      "type": "object",
      "properties": {
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/password/changey?userID={{.UserID}}\u0026code={{.Code}}\u0026orgID={{.OrgID}}",
          "description": "Optionally set a url_template, which will be used in the password reset mail\nsent by ZITADEL to guide the user to your password change page.\nIf no template is set, the default ZITADEL url will be used.",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v3alphaSendPasswordResetSMS": {
      "type": "object"
    },
    "v3alphaSendWebAuthNRegistrationLink": {
      "type": "object",
      "properties": {
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/passkey/register?userID={{.UserID}}\u0026orgID={{.OrgID}}\u0026codeID={{.CodeID}}\u0026code={{.Code}}",
          "description": "Optionally set a url_template, which will be used in the mail sent by ZITADEL\nto guide the user to your passkey registration page.\nIf no template is set, the default ZITADEL url will be used.",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v3alphaSetAuthenticators": {
      "type": "object",
      "properties": {
        "usernames": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v3alphaSetUsername"
          }
        },
        "password": {
          "$ref": "#/definitions/userv3alphaSetPassword"
        }
      }
    },
    "v3alphaSetContact": {
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/userv3alphaSetEmail"
        },
        "phone": {
          "$ref": "#/definitions/userv3alphaSetPhone"
        }
      }
    },
    "v3alphaSetContactEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "The verification code will be set if a contact email was set with a return_code verification option."
        }
      }
    },
    "v3alphaSetContactPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "The phone verification code will be set if a contact phone was set with a return_code verification option."
        }
      }
    },
    "v3alphaSetExecutionRequest": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/objectv3alphaInstance",
          "default": "\"domain from HOST or :authority header\""
        },
        "condition": {
          "$ref": "#/definitions/v3alphaCondition"
        },
        "execution": {
          "$ref": "#/definitions/v3alphaExecution"
        }
      }
    },
    "v3alphaSetExecutionResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaSetRESTAsync": {
      "type": "object",
      "description": "Call is executed in parallel to others, ZITADEL does not wait until the call is finished. The state is ignored, call is sent as post."
    },
    "v3alphaSetRESTCall": {
      "type": "object",
      "properties": {
        "interruptOnError": {
          "type": "boolean",
          "description": "Define if any error stops the whole execution. By default the process continues as normal."
        }
      },
      "description": "Wait for response and response body is used, status is checked, call is sent as post."
    },
    "v3alphaSetRESTWebhook": {
      "type": "object",
      "properties": {
        "interruptOnError": {
          "type": "boolean",
          "description": "Define if any error stops the whole execution. By default the process continues as normal."
        }
      },
      "description": "Wait for response but response body is ignored, status is checked, call is sent as post."
    },
    "v3alphaSetUsername": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "gigi-giraffe",
          "description": "Set the user's username. This will be used for identification during authentication.",
          "maxLength": 200,
          "minLength": 1
        },
        "isOrganizationSpecific": {
          "type": "boolean",
          "description": "By default username must be unique across all organizations in an instance.\nThis option allow to restrict the uniqueness to the user's own organization.\nAs a result, this username can only be used if the authentication is limited\nto the corresponding organization.\n\nThis can be useful if you provide multiple usernames for a single user, where one\nif specific to your organization, e.g.:\n- gigi-giraffe@zitadel.com (unique across organizations)\n- gigi-giraffe (unique only inside the ZITADEL organization)"
        }
      },
      "required": [
        "username"
      ]
    },
    "v3alphaStartTOTPRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "totpId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "unique identifier of the TOTP registration."
        },
        "uri": {
          "type": "string",
          "example": "otpauth://totp/ZITADEL:gigi@acme.zitadel.cloud?algorithm=SHA1\u0026digits=6\u0026issuer=ZITADEL\u0026period=30\u0026secret=TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK",
          "description": "The TOTP URI, which can be used to create a QR Code for scanning with an authenticator app."
        },
        "secret": {
          "type": "string",
          "example": "TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK",
          "description": "The TOTP secret, which can be used for manually adding in an authenticator app."
        }
      }
    },
    "v3alphaStartWebAuthNRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        },
        "webAuthNId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "unique identifier of the WebAuthN registration."
        },
        "publicKeyCredentialCreationOptions": {
          "type": "object",
          "example": {
            "publicKey": {
              "attestation": "none",
              "authenticatorSelection": {
                "userVerification": "required"
              },
              "challenge": "XaMYwWOZ5hj6pwtwJJlpcI-ExkO5TxevBMG4R8DoKQQ",
              "excludeCredentials": [
                {
                  "id": "tVp1QfYhT8DkyEHVrv7blnpAo2YJzbZgZNBf7zPs6CI",
                  "type": "public-key"
                }
              ],
              "pubKeyCredParams": [
                {
                  "alg": -7,
                  "type": "public-key"
                }
              ],
              "rp": {
                "id": "localhost",
                "name": "ZITADEL"
              },
              "timeout": 300000,
              "user": {
                "displayName": "Tim Mohlmann",
                "id": "MjE1NTk4MDAwNDY0OTk4OTQw",
                "name": "tim"
              }
            }
          },
          "title": "Options for Credential Creation (dictionary PublicKeyCredentialCreationOptions).\nGenerated helper methods transform the field to JSON, for use in a WebauthN client.\nSee also:  https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialcreationoptions"
        }
      }
    },
    "v3alphaTOTP": {
      "type": "object",
      "properties": {
        "totpId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "unique identifier of the time-based one-time password (TOTP) authenticator."
        },
        "name": {
          "type": "string",
          "example": "Google Authenticator",
          "description": "The name provided during registration. This is used for easier identification."
        },
        "isVerified": {
          "type": "boolean",
          "description": "State whether the TOTP registration has been completed."
        }
      }
    },
    "v3alphaTarget": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ip_allow_list",
          "maxLength": 1000,
          "minLength": 1
        },
        "restWebhook": {
          "$ref": "#/definitions/v3alphaSetRESTWebhook"
        },
        "restCall": {
          "$ref": "#/definitions/v3alphaSetRESTCall"
        },
        "restAsync": {
          "$ref": "#/definitions/v3alphaSetRESTAsync"
        },
        "timeout": {
          "type": "string",
          "example": "10s",
          "description": "if the target doesn't respond before this timeout expires, the the connection is closed and the action fails"
        },
        "endpoint": {
          "type": "string",
          "example": "https://example.com/hooks/ip_check",
          "maxLength": 1000,
          "minLength": 1
        }
      }
    },
    "v3alphaTargetFieldName": {
      "type": "string",
      "enum": [
        "TARGET_FIELD_NAME_UNSPECIFIED",
        "TARGET_FIELD_NAME_ID",
        "TARGET_FIELD_NAME_CREATED_DATE",
        "TARGET_FIELD_NAME_CHANGED_DATE",
        "TARGET_FIELD_NAME_NAME",
        "TARGET_FIELD_NAME_TARGET_TYPE",
        "TARGET_FIELD_NAME_URL",
        "TARGET_FIELD_NAME_TIMEOUT",
        "TARGET_FIELD_NAME_INTERRUPT_ON_ERROR"
      ],
      "default": "TARGET_FIELD_NAME_UNSPECIFIED"
    },
    "v3alphaTargetFilter": {
      "type": "object",
      "properties": {
        "targetId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "the id of the targets to include"
        }
      }
    },
    "v3alphaTargetNameFilter": {
      "type": "object",
      "properties": {
        "targetName": {
          "type": "string",
          "example": "ip_allow_list",
          "description": "Defines the name of the target to query for.",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/v3alphaTextFilterMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "v3alphaTargetSearchFilter": {
      "type": "object",
      "properties": {
        "targetNameFilter": {
          "$ref": "#/definitions/v3alphaTargetNameFilter"
        },
        "inTargetIdsFilter": {
          "$ref": "#/definitions/v3alphaInTargetIDsFilter"
        }
      }
    },
    "v3alphaTextFilterMethod": {
      "type": "string",
      "enum": [
        "TEXT_FILTER_METHOD_EQUALS",
        "TEXT_FILTER_METHOD_EQUALS_IGNORE_CASE",
        "TEXT_FILTER_METHOD_STARTS_WITH",
        "TEXT_FILTER_METHOD_STARTS_WITH_IGNORE_CASE",
        "TEXT_FILTER_METHOD_CONTAINS"
      ],
      "default": "TEXT_FILTER_METHOD_EQUALS"
    },
    "v3alphaTypeFilter": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "employees",
          "description": "Defines which type to filter for.",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/v3alphaTextFilterMethod",
          "description": "Defines which text comparison method used for the type filter."
        }
      },
      "required": [
        "type"
      ]
    },
    "v3alphaUserIDFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "163840776835432705",
          "description": "Defines the ID of the user to query for.",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/v3alphaTextFilterMethod",
          "description": "Defines which text comparison method used for the id query."
        }
      },
      "required": [
        "id"
      ]
    },
    "v3alphaUserSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "employees",
          "description": "Type is a human readable word describing the schema.",
          "maxLength": 200,
          "minLength": 1
        },
        "schema": {
          "type": "object",
          "example": {
            "$schema": "https://example.com/user/employees",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "required": true
              },
              "description": {
                "type": "string"
              }
            }
          },
          "description": "JSON schema representation defining the user."
        },
        "possibleAuthenticators": {
          "type": "array",
          "example": [
            "AUTHENTICATOR_TYPE_USERNAME",
            "AUTHENTICATOR_TYPE_PASSWORD",
            "AUTHENTICATOR_TYPE_WEBAUTHN"
          ],
          "items": {
            "$ref": "#/definitions/v3alphaAuthenticatorType"
          },
          "description": "Defines the possible types of authenticators."
        }
      },
      "required": [
        "type",
        "schema"
      ]
    },
    "v3alphaUsername": {
      "type": "object",
      "properties": {
        "usernameId": {
          "type": "string",
          "description": "unique identifier of the username."
        },
        "username": {
          "type": "string",
          "example": "gigi-giraffe",
          "description": "The user's unique username. It is used for identification during authentication."
        },
        "isOrganizationSpecific": {
          "type": "boolean",
          "description": "By default usernames must be unique across all organizations in an instance.\nThis option allow to restrict the uniqueness to the user's own organization.\nAs a result, this username can only be used if the authentication is limited\nto the corresponding organization.\n\nThis can be useful if you provide multiple usernames for a single user, where one\nif specific to your organization, e.g.:\n- gigi-giraffe@zitadel.com (unique across organizations)\n- gigi-giraffe (unique only inside the ZITADEL organization)"
        }
      }
    },
    "v3alphaUsernameFilter": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "gigi-giraffe",
          "description": "Defines the username to query for.",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/v3alphaTextFilterMethod",
          "description": "Defines which text comparison method used for the username query."
        },
        "isOrganizationSpecific": {
          "type": "boolean",
          "description": "Defines that the username must only be unique in the organisation."
        }
      },
      "required": [
        "username"
      ]
    },
    "v3alphaVerifyContactEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaVerifyContactPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaVerifyOTPEmailRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaVerifyOTPSMSRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaVerifyWebAuthNRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelresourcesobjectv3alphaDetails"
        }
      }
    },
    "v3alphaWebAuthNAuthenticatorType": {
      "type": "string",
      "enum": [
        "WEB_AUTH_N_AUTHENTICATOR_UNSPECIFIED",
        "WEB_AUTH_N_AUTHENTICATOR_PLATFORM",
        "WEB_AUTH_N_AUTHENTICATOR_CROSS_PLATFORM"
      ],
      "default": "WEB_AUTH_N_AUTHENTICATOR_UNSPECIFIED"
    },
    "v3alphaWebKey": {
      "type": "object",
      "properties": {
        "rsa": {
          "$ref": "#/definitions/v3alphaWebKeyRSAConfig"
        },
        "ecdsa": {
          "$ref": "#/definitions/v3alphaWebKeyECDSAConfig"
        },
        "ed25519": {
          "$ref": "#/definitions/v3alphaWebKeyED25519Config"
        }
      }
    },
    "v3alphaWebKeyECDSAConfig": {
      "type": "object",
      "properties": {
        "curve": {
          "$ref": "#/definitions/WebKeyECDSAConfigECDSACurve"
        }
      }
    },
    "v3alphaWebKeyED25519Config": {
      "type": "object"
    },
    "v3alphaWebKeyRSAConfig": {
      "type": "object",
      "properties": {
        "bits": {
          "$ref": "#/definitions/WebKeyRSAConfigRSABits",
          "title": "bit size of the RSA key"
        },
        "hasher": {
          "$ref": "#/definitions/WebKeyRSAConfigRSAHasher",
          "title": "signing algrithm used"
        }
      }
    },
    "v3alphaWebKeyState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_INITIAL",
        "STATE_ACTIVE",
        "STATE_INACTIVE",
        "STATE_REMOVED"
      ],
      "default": "STATE_UNSPECIFIED"
    },
    "zitadelactionv1FlowType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "identifier of the type"
        },
        "name": {
          "$ref": "#/definitions/v1LocalizedMessage",
          "title": "key and name of the type"
        }
      }
    },
    "zitadelactionv1TriggerType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "identifier of the type"
        },
        "name": {
          "$ref": "#/definitions/v1LocalizedMessage",
          "title": "key and name of the type"
        }
      }
    },
    "zitadeladminv1AddAppleProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Apple",
          "description": "Apple will be used as default, if no name is provided",
          "title": "Apple will be used as default, if no name is provided",
          "maxLength": 200
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id (App ID or Service ID) provided by Apple",
          "maxLength": 200,
          "minLength": 1
        },
        "teamId": {
          "type": "string",
          "example": "ALT03JV3OS",
          "description": "(10-character) Team ID provided by Apple",
          "maxLength": 10,
          "minLength": 10
        },
        "keyId": {
          "type": "string",
          "example": "OGKDK25KD",
          "description": "(10-character) ID of the private key generated by Apple",
          "maxLength": 10,
          "minLength": 10
        },
        "privateKey": {
          "type": "string",
          "format": "byte",
          "example": "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1...",
          "description": "Private Key generated by Apple",
          "maxLength": 5000,
          "minLength": 1
        },
        "scopes": {
          "type": "array",
          "example": [
            "name",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to Apple",
          "maxItems": 20
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      },
      "required": [
        "clientId",
        "teamId",
        "keyId",
        "privateKey"
      ]
    },
    "zitadeladminv1AddAppleProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadeladminv1AddAzureADProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Azure AD"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "client id generated by the Azure AD"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "client secret generated by the Azure AD"
        },
        "tenant": {
          "$ref": "#/definitions/idpv1AzureADTenant",
          "description": "Defines what kind of accounts are allowed to authenticate (Personal, Organizational, All). If not provided the `common` tenant will be used (All accounts)",
          "title": "if not provided the `common` tenant will be used"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Azure AD doesn't send if the email has been verified. Enable this if the user email should always be added verified in ZITADEL (no verification emails will be sent)"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email",
            "User.Read"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request to Azure AD"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadeladminv1AddAzureADProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadeladminv1AddGenericOAuthProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "My Provider"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "client id generated by the identity provider"
        },
        "clientSecret": {
          "type": "string",
          "example": "client-secret",
          "description": "Client secret generated by the identity provider"
        },
        "authorizationEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com/o/oauth2/v2/auth",
          "description": "The endpoint where ZITADEL send the user to authenticate"
        },
        "tokenEndpoint": {
          "type": "string",
          "example": "https://oauth2.googleapis.com/token",
          "description": "The endpoint where ZITADEL can get the token"
        },
        "userEndpoint": {
          "type": "string",
          "example": "https://openidconnect.googleapis.com/v1/userinfo",
          "description": "The endpoint where ZITADEL can get the user information"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request on the identity provider"
        },
        "idAttribute": {
          "type": "string",
          "example": "user_id",
          "description": "Identifying attribute of the user in the response of the user_endpoint",
          "title": "identifying attribute of the user in the response of the user_endpoint"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadeladminv1AddGenericOAuthProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadeladminv1AddGenericOIDCProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Google"
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com/",
          "description": "the OIDC issuer of the identity provider"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "client id generated by the identity provider"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "secret generated by the identity provider"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request on the identity provider"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        },
        "isIdTokenMapping": {
          "type": "boolean"
        }
      }
    },
    "zitadeladminv1AddGenericOIDCProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadeladminv1AddGitHubEnterpriseServerProviderRequest": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitHub"
        },
        "name": {
          "type": "string",
          "example": "GitHub"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret generated by GitHub"
        },
        "authorizationEndpoint": {
          "type": "string"
        },
        "tokenEndpoint": {
          "type": "string"
        },
        "userEndpoint": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitHub"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadeladminv1AddGitHubEnterpriseServerProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadeladminv1AddGitHubProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "GitHub",
          "description": "GitHub will be used as default, if no name is provided",
          "title": "GitHub will be used as default, if no name is provided"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitHub"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret generated by the GitHub"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitHub"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadeladminv1AddGitHubProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadeladminv1AddGitLabProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "GitLab",
          "description": "GitLab will be used as default, if no name is provided",
          "title": "GitLab will be used as default, if no name is provided"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitLab"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret generated by GitLab"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitLab"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadeladminv1AddGitLabProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadeladminv1AddGitLabSelfHostedProviderRequest": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "example": "GitLab"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitLab"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret generated by GitLab"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitLab"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadeladminv1AddGitLabSelfHostedProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadeladminv1AddGoogleProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Google",
          "description": "Google will be used as default, if no name is provided",
          "title": "Google will be used as default, if no name is provided"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by Google"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret generated by Google"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to Google"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadeladminv1AddGoogleProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadeladminv1AddIDPToLoginPolicyRequest": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string",
          "example": "69629023906488334",
          "description": "Id of the predefined idp configuration",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "org_id",
        "idpId"
      ]
    },
    "zitadeladminv1AddIDPToLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1AddJWTProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "My Provider"
        },
        "issuer": {
          "type": "string"
        },
        "jwtEndpoint": {
          "type": "string"
        },
        "keysEndpoint": {
          "type": "string"
        },
        "headerName": {
          "type": "string"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadeladminv1AddJWTProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadeladminv1AddLDAPProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "servers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startTls": {
          "type": "boolean"
        },
        "baseDn": {
          "type": "string"
        },
        "bindDn": {
          "type": "string"
        },
        "bindPassword": {
          "type": "string"
        },
        "userBase": {
          "type": "string"
        },
        "userObjectClasses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeout": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/idpv1LDAPAttributes"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadeladminv1AddLDAPProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadeladminv1AddMultiFactorToLoginPolicyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/policyv1MultiFactorType"
        }
      },
      "required": [
        "type"
      ]
    },
    "zitadeladminv1AddMultiFactorToLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1AddSAMLProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "metadataXml": {
          "type": "string",
          "format": "byte",
          "description": "Metadata of the SAML identity provider."
        },
        "metadataUrl": {
          "type": "string",
          "example": "https://test.com/saml/metadata",
          "description": "Url to the metadata of the SAML identity provider."
        },
        "binding": {
          "$ref": "#/definitions/idpv1SAMLBinding",
          "description": "Binding which defines the type of communication with the identity provider."
        },
        "withSignedRequest": {
          "type": "boolean",
          "description": "Boolean which defines if the authentication requests are signed."
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        },
        "nameIdFormat": {
          "$ref": "#/definitions/idpv1SAMLNameIDFormat",
          "description": "Optionally specify the `nameid-format` requested."
        },
        "transientMappingAttributeName": {
          "type": "string",
          "description": "Optionally specify the name of the attribute, which will be used to map the user\nin case the nameid-format returned is `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`."
        }
      }
    },
    "zitadeladminv1AddSAMLProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadeladminv1AddSecondFactorToLoginPolicyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/policyv1SecondFactorType"
        }
      },
      "required": [
        "type"
      ]
    },
    "zitadeladminv1AddSecondFactorToLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1DataOrg": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "org": {
          "$ref": "#/definitions/v1AddOrgRequest"
        },
        "domainPolicy": {
          "$ref": "#/definitions/v1AddCustomDomainPolicyRequest"
        },
        "labelPolicy": {
          "$ref": "#/definitions/v1AddCustomLabelPolicyRequest"
        },
        "lockoutPolicy": {
          "$ref": "#/definitions/v1AddCustomLockoutPolicyRequest"
        },
        "loginPolicy": {
          "$ref": "#/definitions/v1AddCustomLoginPolicyRequest"
        },
        "passwordComplexityPolicy": {
          "$ref": "#/definitions/v1AddCustomPasswordComplexityPolicyRequest"
        },
        "privacyPolicy": {
          "$ref": "#/definitions/v1AddCustomPrivacyPolicyRequest"
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataProject"
          }
        },
        "projectRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AddProjectRoleRequest"
          }
        },
        "apiApps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataAPIApplication"
          }
        },
        "oidcApps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataOIDCApplication"
          }
        },
        "humanUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataHumanUser"
          }
        },
        "machineUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataMachineUser"
          }
        },
        "triggerActions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmanagementv1SetTriggerActionsRequest"
          }
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataAction"
          }
        },
        "projectGrants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataProjectGrant"
          }
        },
        "userGrants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AddUserGrantRequest"
          }
        },
        "orgMembers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AddOrgMemberRequest"
          }
        },
        "projectMembers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AddProjectMemberRequest"
          }
        },
        "projectGrantMembers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AddProjectGrantMemberRequest"
          }
        },
        "userMetadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetUserMetadataRequest"
          }
        },
        "loginTexts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmanagementv1SetCustomLoginTextsRequest"
          }
        },
        "initMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomInitMessageTextRequest"
          }
        },
        "passwordResetMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomPasswordResetMessageTextRequest"
          }
        },
        "verifyEmailMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomVerifyEmailMessageTextRequest"
          }
        },
        "verifyPhoneMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomVerifyPhoneMessageTextRequest"
          }
        },
        "domainClaimedMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomDomainClaimedMessageTextRequest"
          }
        },
        "passwordlessRegistrationMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomPasswordlessRegistrationMessageTextRequest"
          }
        },
        "oidcIdps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataOIDCIDP"
          }
        },
        "jwtIdps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataJWTIDP"
          }
        },
        "userLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IDPUserLink"
          }
        },
        "domains": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelorgv1Domain"
          }
        },
        "appKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataAppKey"
          }
        },
        "machineKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataMachineKey"
          }
        },
        "verifySmsOtpMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomVerifySMSOTPMessageTextRequest"
          }
        },
        "verifyEmailOtpMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomVerifyEmailOTPMessageTextRequest"
          }
        },
        "inviteUserMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomInviteUserMessageTextRequest"
          }
        }
      }
    },
    "zitadeladminv1DeleteProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1FailedEvent": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "example": "adminapi"
        },
        "viewName": {
          "type": "string",
          "example": "iam_members"
        },
        "failedSequence": {
          "type": "string",
          "format": "uint64",
          "example": "9823759"
        },
        "failureCount": {
          "type": "string",
          "format": "uint64",
          "example": "5"
        },
        "errorMessage": {
          "type": "string",
          "example": "ID=EXAMP-ID3ER Message=Example message"
        },
        "lastFailed": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the failure last occurred"
        }
      }
    },
    "zitadeladminv1GetCustomDomainClaimedMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetCustomInitMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetCustomInviteUserMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetCustomLoginTextsResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1LoginCustomText"
        }
      }
    },
    "zitadeladminv1GetCustomPasswordChangeMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetCustomPasswordResetMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetCustomPasswordlessRegistrationMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetCustomVerifyEmailMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetCustomVerifyEmailOTPMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetCustomVerifyPhoneMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetCustomVerifySMSOTPMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetDefaultDomainClaimedMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetDefaultInitMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetDefaultInviteUserMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetDefaultLoginTextsResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1LoginCustomText"
        }
      }
    },
    "zitadeladminv1GetDefaultPasswordChangeMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetDefaultPasswordResetMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetDefaultPasswordlessRegistrationMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetDefaultVerifyEmailMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetDefaultVerifyEmailOTPMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetDefaultVerifyPhoneMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetDefaultVerifySMSOTPMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadeladminv1GetDomainPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1DomainPolicy"
        }
      }
    },
    "zitadeladminv1GetLabelPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1LabelPolicy"
        }
      }
    },
    "zitadeladminv1GetLockoutPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1LockoutPolicy"
        }
      }
    },
    "zitadeladminv1GetLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1LoginPolicy"
        }
      }
    },
    "zitadeladminv1GetNotificationPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1NotificationPolicy"
        }
      }
    },
    "zitadeladminv1GetOrgIAMPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1OrgIAMPolicy"
        }
      }
    },
    "zitadeladminv1GetPasswordAgePolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PasswordAgePolicy"
        }
      }
    },
    "zitadeladminv1GetPasswordComplexityPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PasswordComplexityPolicy"
        }
      }
    },
    "zitadeladminv1GetPreviewLabelPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1LabelPolicy"
        }
      }
    },
    "zitadeladminv1GetPrivacyPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PrivacyPolicy"
        }
      }
    },
    "zitadeladminv1GetProviderByIDResponse": {
      "type": "object",
      "properties": {
        "idp": {
          "$ref": "#/definitions/v1Provider"
        }
      }
    },
    "zitadeladminv1GetSupportedLanguagesResponse": {
      "type": "object",
      "properties": {
        "languages": {
          "type": "array",
          "example": [
            "en",
            "de",
            "it"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "zitadeladminv1HealthzResponse": {
      "type": "object",
      "title": "This is an empty response"
    },
    "zitadeladminv1IDPQuery": {
      "type": "object",
      "properties": {
        "idpIdQuery": {
          "$ref": "#/definitions/v1IDPIDQuery"
        },
        "idpNameQuery": {
          "$ref": "#/definitions/v1IDPNameQuery"
        }
      }
    },
    "zitadeladminv1ImportDataOrg": {
      "type": "object",
      "properties": {
        "orgs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeladminv1DataOrg"
          }
        }
      }
    },
    "zitadeladminv1ListFailedEventsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeladminv1FailedEvent"
          },
          "title": "TODO: list details"
        }
      }
    },
    "zitadeladminv1ListIAMMembersRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmemberv1SearchQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "zitadeladminv1ListIAMMembersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Member"
          }
        }
      }
    },
    "zitadeladminv1ListLoginPolicyIDPsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        }
      }
    },
    "zitadeladminv1ListLoginPolicyIDPsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IDPLoginPolicyLink"
          }
        }
      }
    },
    "zitadeladminv1ListLoginPolicyMultiFactorsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/policyv1MultiFactorType"
          }
        }
      }
    },
    "zitadeladminv1ListLoginPolicySecondFactorsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/policyv1SecondFactorType"
          }
        }
      }
    },
    "zitadeladminv1ListProvidersRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeladminv1ProviderQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "zitadeladminv1ListProvidersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Provider"
          }
        }
      }
    },
    "zitadeladminv1ListViewsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadeladminv1View"
          },
          "title": "TODO: list details"
        }
      }
    },
    "zitadeladminv1MigrateGenericOIDCProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1ProviderQuery": {
      "type": "object",
      "properties": {
        "idpIdQuery": {
          "$ref": "#/definitions/v1IDPIDQuery"
        },
        "idpNameQuery": {
          "$ref": "#/definitions/v1IDPNameQuery"
        }
      }
    },
    "zitadeladminv1RegenerateSAMLProviderCertificateResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1RemoveFailedEventResponse": {
      "type": "object",
      "title": "This is an empty response"
    },
    "zitadeladminv1RemoveIDPFromLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1RemoveMultiFactorFromLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1RemoveOrgResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1RemoveSecondFactorFromLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1ResetCustomDomainClaimedMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1ResetCustomInitMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1ResetCustomInviteUserMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1ResetCustomLoginTextsToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1ResetCustomPasswordChangeMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1ResetCustomPasswordResetMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1ResetCustomVerifyEmailMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1ResetCustomVerifyEmailOTPMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1ResetCustomVerifyPhoneMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1ResetCustomVerifySMSOTPMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1SetCustomLoginTextsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1UpdateAppleProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1UpdateAzureADProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1UpdateGenericOAuthProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1UpdateGenericOIDCProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1UpdateGitHubEnterpriseServerProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1UpdateGitHubProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1UpdateGitLabProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1UpdateGitLabSelfHostedProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1UpdateGoogleProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1UpdateJWTProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1UpdateLDAPProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1UpdateSAMLProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadeladminv1View": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "example": "adminapi"
        },
        "viewName": {
          "type": "string",
          "example": "iam_members"
        },
        "processedSequence": {
          "type": "string",
          "format": "uint64",
          "example": "9823758"
        },
        "eventTimestamp": {
          "type": "string",
          "format": "date-time",
          "example": "2019-04-01T08:45:00.000000Z",
          "description": "The timestamp the event occurred",
          "title": "The timestamp the event occurred"
        },
        "lastSuccessfulSpoolerRun": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the event occurred"
        }
      }
    },
    "zitadelappv1OIDCConfig": {
      "type": "object",
      "properties": {
        "redirectUris": {
          "type": "array",
          "example": [
            "https://console.zitadel.ch/auth/callback"
          ],
          "items": {
            "type": "string"
          },
          "description": "Callback URI of the authorization request where the code or tokens will be sent to"
        },
        "responseTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OIDCResponseType"
          },
          "description": "Determines whether a code, id_token token or just id_token will be returned"
        },
        "grantTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OIDCGrantType"
          },
          "description": "The flow type the application uses to gain access"
        },
        "appType": {
          "$ref": "#/definitions/v1OIDCAppType",
          "description": "determines the paradigm of the application"
        },
        "clientId": {
          "type": "string",
          "example": "69629023906488334@ZITADEL",
          "description": "generated oauth2/oidc client id"
        },
        "authMethodType": {
          "$ref": "#/definitions/v1OIDCAuthMethodType",
          "description": "defines how the application passes login credentials"
        },
        "postLogoutRedirectUris": {
          "type": "array",
          "example": [
            "https://console.zitadel.ch/logout"
          ],
          "items": {
            "type": "string"
          },
          "description": "ZITADEL will redirect to this link after a successful logout"
        },
        "version": {
          "$ref": "#/definitions/v1OIDCVersion",
          "description": "the OIDC version used by the application"
        },
        "noneCompliant": {
          "type": "boolean",
          "description": "specifies whether the config is OIDC compliant. A production configuration SHOULD be compliant"
        },
        "complianceProblems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LocalizedMessage"
          },
          "description": "lists the problems for non-compliancy"
        },
        "devMode": {
          "type": "boolean",
          "description": "used for development"
        },
        "accessTokenType": {
          "$ref": "#/definitions/v1OIDCTokenType",
          "description": "type of the access token returned from ZITADEL"
        },
        "accessTokenRoleAssertion": {
          "type": "boolean",
          "description": "adds roles to the claims of the access token (only if type == JWT) even if they are not requested by scopes"
        },
        "idTokenRoleAssertion": {
          "type": "boolean",
          "description": "adds roles to the claims of the id token even if they are not requested by scopes"
        },
        "idTokenUserinfoAssertion": {
          "type": "boolean",
          "description": "claims of profile, email, address and phone scopes are added to the id token even if an access token is issued. Attention this violates the OIDC specification"
        },
        "clockSkew": {
          "type": "string",
          "description": "Used to compensate time difference of servers. Duration added to the \"exp\" claim and subtracted from \"iat\", \"auth_time\" and \"nbf\" claims"
        },
        "additionalOrigins": {
          "type": "array",
          "example": [
            "https://console.zitadel.ch/auth/callback"
          ],
          "items": {
            "type": "string"
          },
          "description": "additional origins (other than the redirect_uris) from where the API can be used"
        },
        "allowedOrigins": {
          "type": "array",
          "example": [
            "https://console.zitadel.ch/auth/callback"
          ],
          "items": {
            "type": "string"
          },
          "description": "all allowed origins from where the API can be used"
        },
        "skipNativeAppSuccessPage": {
          "type": "boolean",
          "description": "Skip the successful login page on native apps and directly redirect the user to the callback."
        },
        "backChannelLogoutUri": {
          "type": "string",
          "example": [
            "https://example.com/auth/backchannel"
          ],
          "description": "ZITADEL will use this URI to notify the application about terminated session according to the OIDC Back-Channel Logout (https://openid.net/specs/openid-connect-backchannel-1_0.html)"
        },
        "loginVersion": {
          "$ref": "#/definitions/v1LoginVersion",
          "description": "Specify the preferred login UI, where the user is redirected to for authentication. If unset, the login UI is chosen by the instance default."
        }
      }
    },
    "zitadelappv1SAMLConfig": {
      "type": "object",
      "properties": {
        "metadataXml": {
          "type": "string",
          "format": "byte"
        },
        "metadataUrl": {
          "type": "string"
        }
      }
    },
    "zitadelauthv1GetSupportedLanguagesResponse": {
      "type": "object",
      "properties": {
        "languages": {
          "type": "array",
          "example": [
            "en",
            "de",
            "it"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "zitadelauthv1HealthzResponse": {
      "type": "object",
      "title": "This is an empty response"
    },
    "zitadelauthv1UserGrant": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string",
          "example": "69629026806489455"
        },
        "projectId": {
          "type": "string",
          "example": "98729028932384528"
        },
        "userId": {
          "type": "string",
          "example": "28746028909593987"
        },
        "roles": {
          "type": "array",
          "example": [
            "RoleKey1",
            "RoleKey2"
          ],
          "items": {
            "type": "string"
          },
          "title": "Deprecated: user role_keys"
        },
        "orgName": {
          "type": "string",
          "example": "ZITADEL"
        },
        "grantId": {
          "type": "string",
          "example": ""
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "orgDomain": {
          "type": "string",
          "example": "zitadel.cloud"
        },
        "projectName": {
          "type": "string",
          "example": "ZITADEL"
        },
        "projectGrantId": {
          "type": "string",
          "example": "28746028909586246"
        },
        "roleKeys": {
          "type": "array",
          "example": [
            "RoleKey1",
            "RoleKey2"
          ],
          "items": {
            "type": "string"
          }
        },
        "userType": {
          "$ref": "#/definitions/userv1Type",
          "description": "type of the user (human / machine)"
        },
        "state": {
          "$ref": "#/definitions/v1UserGrantState",
          "description": "current state of the user grant"
        }
      }
    },
    "zitadelidpv1OIDCConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "client id generated by the identity provider"
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com",
          "description": "the OIDC issuer of the identity provider"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request on the identity provider"
        },
        "displayNameMapping": {
          "$ref": "#/definitions/v1OIDCMappingField",
          "description": "definition which field is mapped to the display name of the user"
        },
        "usernameMapping": {
          "$ref": "#/definitions/v1OIDCMappingField",
          "description": "definition which field is mapped to the email of the user"
        }
      }
    },
    "zitadelidpv1SAMLConfig": {
      "type": "object",
      "properties": {
        "metadataXml": {
          "type": "string",
          "format": "byte",
          "description": "Metadata of the SAML identity provider."
        },
        "binding": {
          "$ref": "#/definitions/idpv1SAMLBinding",
          "description": "Binding which defines the type of communication with the identity provider."
        },
        "withSignedRequest": {
          "type": "boolean",
          "description": "Boolean which defines if the authentication requests are signed."
        },
        "nameIdFormat": {
          "$ref": "#/definitions/idpv1SAMLNameIDFormat",
          "description": "`nameid-format` for the SAML Request."
        },
        "transientMappingAttributeName": {
          "type": "string",
          "description": "Optional name of the attribute, which will be used to map the user\nin case the nameid-format returned is `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`."
        }
      }
    },
    "zitadelidpv2Options": {
      "type": "object",
      "properties": {
        "isLinkingAllowed": {
          "type": "boolean",
          "description": "Enable if users should be able to link an existing ZITADEL user with an external account."
        },
        "isCreationAllowed": {
          "type": "boolean",
          "description": "Enable if users should be able to create a new account in ZITADEL when using an external account."
        },
        "isAutoCreation": {
          "type": "boolean",
          "description": "Enable if a new account in ZITADEL should be created automatically when login with an external account."
        },
        "isAutoUpdate": {
          "type": "boolean",
          "description": "Enable if a the ZITADEL account fields should be updated automatically on each login."
        },
        "autoLinking": {
          "$ref": "#/definitions/idpv2AutoLinkingOption",
          "description": "Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches."
        }
      }
    },
    "zitadelinstancev1Domain": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "domain": {
          "type": "string",
          "example": "zitadel.com"
        },
        "primary": {
          "type": "boolean"
        },
        "generated": {
          "type": "boolean"
        }
      }
    },
    "zitadelinstancev1DomainSearchQuery": {
      "type": "object",
      "properties": {
        "domainQuery": {
          "$ref": "#/definitions/instancev1DomainQuery"
        },
        "generatedQuery": {
          "$ref": "#/definitions/v1DomainGeneratedQuery"
        },
        "primaryQuery": {
          "$ref": "#/definitions/v1DomainPrimaryQuery"
        }
      }
    },
    "zitadelmanagementv1AddAppleProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Apple",
          "description": "Apple will be used as default, if no name is provided",
          "title": "Apple will be used as default, if no name is provided",
          "maxLength": 200
        },
        "clientId": {
          "type": "string",
          "example": "com.client.id",
          "description": "Client id (App ID or Service ID) provided by Apple",
          "maxLength": 200,
          "minLength": 1
        },
        "teamId": {
          "type": "string",
          "example": "ALT03JV3OS",
          "description": "(10-character) Team ID provided by Apple",
          "maxLength": 10,
          "minLength": 10
        },
        "keyId": {
          "type": "string",
          "example": "OGKDK25KD",
          "description": "(10-character) ID of the private key generated by Apple",
          "maxLength": 10,
          "minLength": 10
        },
        "privateKey": {
          "type": "string",
          "format": "byte",
          "example": "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1...",
          "description": "Private Key generated by Apple",
          "maxLength": 5000,
          "minLength": 1
        },
        "scopes": {
          "type": "array",
          "example": [
            "name",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to Apple",
          "maxItems": 20
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      },
      "required": [
        "clientId",
        "teamId",
        "keyId",
        "privateKey"
      ]
    },
    "zitadelmanagementv1AddAppleProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadelmanagementv1AddAzureADProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Azure AD"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "client id generated by the Azure AD"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "client secret generated by the Azure AD"
        },
        "tenant": {
          "$ref": "#/definitions/idpv1AzureADTenant",
          "description": "Defines what kind of accounts are allowed to authenticate (Personal, Organizational, All). If not provided the `common` tenant will be used (All accounts)",
          "title": "if not provided the `common` tenant will be used"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Azure AD doesn't send if the email has been verified. Enable this if the user email should always be added verified in ZITADEL (no verification emails will be sent)"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email",
            "User.Read"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request to Azure AD"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadelmanagementv1AddAzureADProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadelmanagementv1AddGenericOAuthProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "My Provider"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by the identity provider"
        },
        "clientSecret": {
          "type": "string",
          "example": "client-secret",
          "description": "Client secret generated by the identity provider"
        },
        "authorizationEndpoint": {
          "type": "string",
          "example": "https://accounts.google.com/o/oauth2/v2/auth",
          "description": "The endpoint where ZITADEL send the user to authenticate"
        },
        "tokenEndpoint": {
          "type": "string",
          "example": "https://oauth2.googleapis.com/token",
          "description": "The endpoint where ZITADEL can get the token"
        },
        "userEndpoint": {
          "type": "string",
          "example": "https://openidconnect.googleapis.com/v1/userinfo",
          "description": "The endpoint where ZITADEL can get the user information"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request on the identity provider"
        },
        "idAttribute": {
          "type": "string",
          "example": "user_id",
          "description": "Identifying attribute of the user in the response of the user_endpoint",
          "title": "identifying attribute of the user in the response of the user_endpoint"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadelmanagementv1AddGenericOAuthProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadelmanagementv1AddGenericOIDCProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Google"
        },
        "issuer": {
          "type": "string",
          "example": "https://accounts.google.com/",
          "description": "the OIDC issuer of the identity provider"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "client id generated by the identity provider"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "secret generated by the identity provider"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "the scopes requested by ZITADEL during the request on the identity provider"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        },
        "isIdTokenMapping": {
          "type": "boolean"
        }
      }
    },
    "zitadelmanagementv1AddGenericOIDCProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadelmanagementv1AddGitHubEnterpriseServerProviderRequest": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitHub"
        },
        "name": {
          "type": "string",
          "example": "GitHub"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret generated by GitHub"
        },
        "authorizationEndpoint": {
          "type": "string"
        },
        "tokenEndpoint": {
          "type": "string"
        },
        "userEndpoint": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitHub"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadelmanagementv1AddGitHubEnterpriseServerProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadelmanagementv1AddGitHubProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "GitHub",
          "description": "GitHub will be used as default, if no name is provided",
          "title": "GitHub will be used as default, if no name is provided"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitHub"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret generated by the GitHub"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitHub"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadelmanagementv1AddGitHubProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadelmanagementv1AddGitLabProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "GitLab",
          "description": "GitLab will be used as default, if no name is provided",
          "title": "GitLab will be used as default, if no name is provided"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitLab"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret generated by GitLab"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitLab"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadelmanagementv1AddGitLabProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadelmanagementv1AddGitLabSelfHostedProviderRequest": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "example": "GitLab"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by GitLab"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret generated by GitLab"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to GitLab"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadelmanagementv1AddGitLabSelfHostedProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadelmanagementv1AddGoogleProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Google",
          "description": "Google will be used as default, if no name is provided",
          "title": "Google will be used as default, if no name is provided"
        },
        "clientId": {
          "type": "string",
          "example": "client-id",
          "description": "Client id generated by Google"
        },
        "clientSecret": {
          "type": "string",
          "example": "secret",
          "description": "Client secret generated by Google"
        },
        "scopes": {
          "type": "array",
          "example": [
            "openid",
            "profile",
            "email"
          ],
          "items": {
            "type": "string"
          },
          "description": "The scopes requested by ZITADEL during the request to Google"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadelmanagementv1AddGoogleProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadelmanagementv1AddIDPToLoginPolicyRequest": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string"
        },
        "ownerType": {
          "$ref": "#/definitions/v1IDPOwnerType",
          "example": [
            "IDP_OWNER_TYPE_SYSTEM"
          ],
          "description": "Choose IDP_OWNER_TYPE_SYSTEM if the configuration is made on the instance and IDP_OWNER_TYPE_ORG if the configuration is made on the organization."
        }
      }
    },
    "zitadelmanagementv1AddIDPToLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1AddJWTProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "issuer": {
          "type": "string",
          "example": "My Provider"
        },
        "jwtEndpoint": {
          "type": "string"
        },
        "keysEndpoint": {
          "type": "string"
        },
        "headerName": {
          "type": "string"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadelmanagementv1AddJWTProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadelmanagementv1AddLDAPProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "servers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startTls": {
          "type": "boolean"
        },
        "baseDn": {
          "type": "string"
        },
        "bindDn": {
          "type": "string"
        },
        "bindPassword": {
          "type": "string"
        },
        "userBase": {
          "type": "string"
        },
        "userObjectClasses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeout": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/idpv1LDAPAttributes"
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        }
      }
    },
    "zitadelmanagementv1AddLDAPProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadelmanagementv1AddMultiFactorToLoginPolicyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/policyv1MultiFactorType",
          "example": "MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION"
        }
      }
    },
    "zitadelmanagementv1AddMultiFactorToLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1AddSAMLProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "metadataXml": {
          "type": "string",
          "format": "byte",
          "description": "Metadata of the SAML identity provider."
        },
        "metadataUrl": {
          "type": "string",
          "example": "https://test.com/saml/metadata",
          "description": "Url to the metadata of the SAML identity provider."
        },
        "binding": {
          "$ref": "#/definitions/idpv1SAMLBinding",
          "description": "Binding which defines the type of communication with the identity provider."
        },
        "withSignedRequest": {
          "type": "boolean",
          "description": "Boolean which defines if the authentication requests are signed."
        },
        "providerOptions": {
          "$ref": "#/definitions/idpv1Options"
        },
        "nameIdFormat": {
          "$ref": "#/definitions/idpv1SAMLNameIDFormat",
          "description": "Optionally specify the `nameid-format` requested."
        },
        "transientMappingAttributeName": {
          "type": "string",
          "description": "Optionally specify the name of the attribute, which will be used to map the user\nin case the nameid-format returned is `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`."
        }
      }
    },
    "zitadelmanagementv1AddSAMLProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "zitadelmanagementv1AddSecondFactorToLoginPolicyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/policyv1SecondFactorType",
          "example": "SECOND_FACTOR_TYPE_OTP"
        }
      }
    },
    "zitadelmanagementv1AddSecondFactorToLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1DeleteProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1GetCustomDomainClaimedMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetCustomInitMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetCustomInviteUserMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetCustomLoginTextsResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1LoginCustomText"
        }
      }
    },
    "zitadelmanagementv1GetCustomPasswordChangeMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetCustomPasswordResetMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetCustomPasswordlessRegistrationMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetCustomVerifyEmailMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetCustomVerifyEmailOTPMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetCustomVerifyPhoneMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetCustomVerifySMSOTPMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetDefaultDomainClaimedMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetDefaultInitMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetDefaultInviteUserMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetDefaultLoginTextsResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1LoginCustomText"
        }
      }
    },
    "zitadelmanagementv1GetDefaultPasswordChangeMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetDefaultPasswordResetMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetDefaultPasswordlessRegistrationMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetDefaultVerifyEmailMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetDefaultVerifyEmailOTPMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetDefaultVerifyPhoneMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetDefaultVerifySMSOTPMessageTextResponse": {
      "type": "object",
      "properties": {
        "customText": {
          "$ref": "#/definitions/v1MessageCustomText"
        }
      }
    },
    "zitadelmanagementv1GetDomainPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1DomainPolicy"
        }
      }
    },
    "zitadelmanagementv1GetLabelPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1LabelPolicy"
        },
        "isDefault": {
          "type": "boolean",
          "title": "deprecated: is_default is also defined in zitadel.policy.v1.LabelPolicy"
        }
      }
    },
    "zitadelmanagementv1GetLockoutPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1LockoutPolicy"
        },
        "isDefault": {
          "type": "boolean",
          "title": "deprecated: is_default is also defined in zitadel.policy.v1.LockoutPolicy"
        }
      }
    },
    "zitadelmanagementv1GetLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1LoginPolicy"
        },
        "isDefault": {
          "type": "boolean",
          "title": "deprecated: is_default is also defined in zitadel.policy.v1.LoginPolicy"
        }
      }
    },
    "zitadelmanagementv1GetNotificationPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1NotificationPolicy"
        }
      }
    },
    "zitadelmanagementv1GetOrgIAMPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1OrgIAMPolicy"
        }
      }
    },
    "zitadelmanagementv1GetPasswordAgePolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PasswordAgePolicy"
        },
        "isDefault": {
          "type": "boolean",
          "title": "deprecated: is_default is also defined in zitadel.policy.v1.PasswordAgePolicy"
        }
      }
    },
    "zitadelmanagementv1GetPasswordComplexityPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PasswordComplexityPolicy"
        },
        "isDefault": {
          "type": "boolean",
          "description": "Deprecated: Is defined in the policy itself",
          "title": "deprecated: is_default is also defined in zitadel.policy.v1.PasswordComplexityPolicy"
        }
      }
    },
    "zitadelmanagementv1GetPreviewLabelPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1LabelPolicy"
        },
        "isDefault": {
          "type": "boolean",
          "title": "deprecated: is_default is also defined in zitadel.policy.v1.LabelPolicy"
        }
      }
    },
    "zitadelmanagementv1GetPrivacyPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PrivacyPolicy"
        }
      }
    },
    "zitadelmanagementv1GetProviderByIDResponse": {
      "type": "object",
      "properties": {
        "idp": {
          "$ref": "#/definitions/v1Provider"
        }
      }
    },
    "zitadelmanagementv1GetSupportedLanguagesResponse": {
      "type": "object",
      "properties": {
        "languages": {
          "type": "array",
          "example": [
            "en",
            "de",
            "it"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "zitadelmanagementv1HealthzResponse": {
      "type": "object",
      "title": "This is an empty response"
    },
    "zitadelmanagementv1IDPQuery": {
      "type": "object",
      "properties": {
        "idpIdQuery": {
          "$ref": "#/definitions/v1IDPIDQuery"
        },
        "idpNameQuery": {
          "$ref": "#/definitions/v1IDPNameQuery"
        },
        "ownerTypeQuery": {
          "$ref": "#/definitions/v1IDPOwnerTypeQuery"
        }
      }
    },
    "zitadelmanagementv1ListLoginPolicyIDPsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery"
        }
      }
    },
    "zitadelmanagementv1ListLoginPolicyIDPsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IDPLoginPolicyLink"
          }
        }
      }
    },
    "zitadelmanagementv1ListLoginPolicyMultiFactorsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "example": [
            "MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION"
          ],
          "items": {
            "$ref": "#/definitions/policyv1MultiFactorType"
          }
        }
      }
    },
    "zitadelmanagementv1ListLoginPolicySecondFactorsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "example": [
            "SECOND_FACTOR_TYPE_OTP"
          ],
          "items": {
            "$ref": "#/definitions/policyv1SecondFactorType"
          }
        }
      }
    },
    "zitadelmanagementv1ListProvidersRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/zitadelv1ListQuery",
          "title": "list limitations and ordering"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmanagementv1ProviderQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "zitadelmanagementv1ListProvidersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Provider"
          }
        }
      }
    },
    "zitadelmanagementv1MigrateGenericOIDCProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1ProviderQuery": {
      "type": "object",
      "properties": {
        "idpIdQuery": {
          "$ref": "#/definitions/v1IDPIDQuery"
        },
        "idpNameQuery": {
          "$ref": "#/definitions/v1IDPNameQuery"
        },
        "ownerTypeQuery": {
          "$ref": "#/definitions/v1IDPOwnerTypeQuery"
        }
      }
    },
    "zitadelmanagementv1RegenerateSAMLProviderCertificateResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1RemoveIDPFromLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1RemoveMultiFactorFromLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1RemoveOrgResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1RemoveSecondFactorFromLoginPolicyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1ResetCustomDomainClaimedMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1ResetCustomInitMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1ResetCustomInviteUserMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1ResetCustomLoginTextsToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1ResetCustomPasswordChangeMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1ResetCustomPasswordResetMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1ResetCustomVerifyEmailMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1ResetCustomVerifyEmailOTPMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1ResetCustomVerifyPhoneMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1ResetCustomVerifySMSOTPMessageTextToDefaultResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1SetCustomLoginTextsRequest": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "example": "de"
        },
        "selectAccountText": {
          "$ref": "#/definitions/v1SelectAccountScreenText"
        },
        "loginText": {
          "$ref": "#/definitions/v1LoginScreenText"
        },
        "passwordText": {
          "$ref": "#/definitions/v1PasswordScreenText"
        },
        "usernameChangeText": {
          "$ref": "#/definitions/v1UsernameChangeScreenText"
        },
        "usernameChangeDoneText": {
          "$ref": "#/definitions/v1UsernameChangeDoneScreenText"
        },
        "initPasswordText": {
          "$ref": "#/definitions/v1InitPasswordScreenText"
        },
        "initPasswordDoneText": {
          "$ref": "#/definitions/v1InitPasswordDoneScreenText"
        },
        "emailVerificationText": {
          "$ref": "#/definitions/v1EmailVerificationScreenText"
        },
        "emailVerificationDoneText": {
          "$ref": "#/definitions/v1EmailVerificationDoneScreenText"
        },
        "initializeUserText": {
          "$ref": "#/definitions/v1InitializeUserScreenText"
        },
        "initializeDoneText": {
          "$ref": "#/definitions/v1InitializeUserDoneScreenText"
        },
        "initMfaPromptText": {
          "$ref": "#/definitions/v1InitMFAPromptScreenText"
        },
        "initMfaOtpText": {
          "$ref": "#/definitions/v1InitMFAOTPScreenText"
        },
        "initMfaU2fText": {
          "$ref": "#/definitions/v1InitMFAU2FScreenText"
        },
        "initMfaDoneText": {
          "$ref": "#/definitions/v1InitMFADoneScreenText"
        },
        "mfaProvidersText": {
          "$ref": "#/definitions/v1MFAProvidersText"
        },
        "verifyMfaOtpText": {
          "$ref": "#/definitions/v1VerifyMFAOTPScreenText"
        },
        "verifyMfaU2fText": {
          "$ref": "#/definitions/v1VerifyMFAU2FScreenText"
        },
        "passwordlessText": {
          "$ref": "#/definitions/v1PasswordlessScreenText"
        },
        "passwordChangeText": {
          "$ref": "#/definitions/v1PasswordChangeScreenText"
        },
        "passwordChangeDoneText": {
          "$ref": "#/definitions/v1PasswordChangeDoneScreenText"
        },
        "passwordResetDoneText": {
          "$ref": "#/definitions/v1PasswordResetDoneScreenText"
        },
        "registrationOptionText": {
          "$ref": "#/definitions/v1RegistrationOptionScreenText"
        },
        "registrationUserText": {
          "$ref": "#/definitions/v1RegistrationUserScreenText"
        },
        "registrationOrgText": {
          "$ref": "#/definitions/v1RegistrationOrgScreenText"
        },
        "linkingUserDoneText": {
          "$ref": "#/definitions/v1LinkingUserDoneScreenText"
        },
        "externalUserNotFoundText": {
          "$ref": "#/definitions/v1ExternalUserNotFoundScreenText"
        },
        "successLoginText": {
          "$ref": "#/definitions/v1SuccessLoginScreenText"
        },
        "logoutText": {
          "$ref": "#/definitions/v1LogoutDoneScreenText"
        },
        "footerText": {
          "$ref": "#/definitions/v1FooterText"
        },
        "passwordlessPromptText": {
          "$ref": "#/definitions/v1PasswordlessPromptScreenText"
        },
        "passwordlessRegistrationText": {
          "$ref": "#/definitions/v1PasswordlessRegistrationScreenText"
        },
        "passwordlessRegistrationDoneText": {
          "$ref": "#/definitions/v1PasswordlessRegistrationDoneScreenText"
        },
        "externalRegistrationUserOverviewText": {
          "$ref": "#/definitions/v1ExternalRegistrationUserOverviewScreenText"
        },
        "linkingUserPromptText": {
          "$ref": "#/definitions/v1LinkingUserPromptScreenText",
          "title": "Deprecated: the linking user prompt screen no longer exists"
        }
      }
    },
    "zitadelmanagementv1SetCustomLoginTextsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1SetTriggerActionsRequest": {
      "type": "object",
      "properties": {
        "flowType": {
          "type": "string",
          "example": "1",
          "title": "id of the flow type.\nFollowing flows are currently allowed:\n- External Authentication: FLOW_TYPE_EXTERNAL_AUTHENTICATION or 1\n- Internal Authentication: 3\n- Complement Token: 2\n- Complement SAML Response: 4"
        },
        "triggerType": {
          "type": "string",
          "example": "1",
          "title": "id of the trigger type.\nFollowing triggers are currently allowed:\n- External Authentication:\n  - Post Authentication: TRIGGER_TYPE_POST_AUTHENTICATION or 1\n  - Pre Creation: TRIGGER_TYPE_PRE_CREATION or 2\n  - Post Creation: TRIGGER_TYPE_POST_CREATION or 3 \n- Internal Authentication:\n  - Post Authentication: TRIGGER_TYPE_POST_AUTHENTICATION or 1\n  - Pre Creation: TRIGGER_TYPE_PRE_CREATION or 2\n  - Post Creation: TRIGGER_TYPE_POST_CREATION or 3 \n- Complement Token:\n  - Pre Userinfo Creation: 4\n  - Pre Access Token Creation: 5\n- Complement SAML Response:\n  - Pre SAML Response Creation: 6"
        },
        "actionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "zitadelmanagementv1UpdateAppleProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1UpdateAzureADProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1UpdateGenericOAuthProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1UpdateGenericOIDCProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1UpdateGitHubEnterpriseServerProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1UpdateGitHubProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1UpdateGitLabProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1UpdateGitLabSelfHostedProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1UpdateGoogleProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1UpdateJWTProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1UpdateLDAPProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmanagementv1UpdateSAMLProviderResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        }
      }
    },
    "zitadelmemberv1EmailQuery": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "email address of the user",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "zitadelmemberv1FirstNameQuery": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Gigi",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "zitadelmemberv1LastNameQuery": {
      "type": "object",
      "properties": {
        "lastName": {
          "type": "string",
          "example": "Giraffe",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "zitadelmemberv1SearchQuery": {
      "type": "object",
      "properties": {
        "firstNameQuery": {
          "$ref": "#/definitions/zitadelmemberv1FirstNameQuery"
        },
        "lastNameQuery": {
          "$ref": "#/definitions/zitadelmemberv1LastNameQuery"
        },
        "emailQuery": {
          "$ref": "#/definitions/zitadelmemberv1EmailQuery"
        },
        "userIdQuery": {
          "$ref": "#/definitions/memberv1UserIDQuery"
        }
      }
    },
    "zitadelobjectv2Organization": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "orgDomain": {
          "type": "string"
        }
      }
    },
    "zitadeloidcv2AuthorizationError": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/zitadeloidcv2ErrorReason"
        },
        "errorDescription": {
          "type": "string"
        },
        "errorUri": {
          "type": "string"
        }
      }
    },
    "zitadeloidcv2ErrorReason": {
      "type": "string",
      "enum": [
        "ERROR_REASON_UNSPECIFIED",
        "ERROR_REASON_INVALID_REQUEST",
        "ERROR_REASON_UNAUTHORIZED_CLIENT",
        "ERROR_REASON_ACCESS_DENIED",
        "ERROR_REASON_UNSUPPORTED_RESPONSE_TYPE",
        "ERROR_REASON_INVALID_SCOPE",
        "ERROR_REASON_SERVER_ERROR",
        "ERROR_REASON_TEMPORARY_UNAVAILABLE",
        "ERROR_REASON_INTERACTION_REQUIRED",
        "ERROR_REASON_LOGIN_REQUIRED",
        "ERROR_REASON_ACCOUNT_SELECTION_REQUIRED",
        "ERROR_REASON_CONSENT_REQUIRED",
        "ERROR_REASON_INVALID_REQUEST_URI",
        "ERROR_REASON_INVALID_REQUEST_OBJECT",
        "ERROR_REASON_REQUEST_NOT_SUPPORTED",
        "ERROR_REASON_REQUEST_URI_NOT_SUPPORTED",
        "ERROR_REASON_REGISTRATION_NOT_SUPPORTED"
      ],
      "default": "ERROR_REASON_UNSPECIFIED",
      "title": "- ERROR_REASON_INVALID_REQUEST: Error states from https://datatracker.ietf.org/doc/html/rfc6749#section-4.2.2.1\n - ERROR_REASON_INTERACTION_REQUIRED: Error states from https://openid.net/specs/openid-connect-core-1_0.html#AuthError"
    },
    "zitadeloidcv2Session": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "ID of the session, used to login the user. Connects the session to the Auth Request.",
          "maxLength": 200,
          "minLength": 1
        },
        "sessionToken": {
          "type": "string",
          "description": "Token to verify the session is valid",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "zitadeloidcv2betaSession": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "ID of the session, used to login the user. Connects the session to the Auth Request.",
          "maxLength": 200,
          "minLength": 1
        },
        "sessionToken": {
          "type": "string",
          "description": "Token to verify the session is valid",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "zitadelorgv1Domain": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "domainName": {
          "type": "string",
          "example": "zitadel.com"
        },
        "isVerified": {
          "type": "boolean",
          "description": "defines if the domain is verified"
        },
        "isPrimary": {
          "type": "boolean",
          "description": "defines if the domain is the primary domain"
        },
        "validationType": {
          "$ref": "#/definitions/v1DomainValidationType",
          "description": "defines the protocol the domain was validated with"
        }
      }
    },
    "zitadelorgv1DomainSearchQuery": {
      "type": "object",
      "properties": {
        "domainNameQuery": {
          "$ref": "#/definitions/v1DomainNameQuery"
        }
      }
    },
    "zitadelorgv2Organization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334",
          "description": "Unique identifier of the organization."
        },
        "details": {
          "$ref": "#/definitions/objectv2Details"
        },
        "state": {
          "$ref": "#/definitions/v2OrganizationState",
          "description": "Current state of the organization, for example active, inactive and deleted."
        },
        "name": {
          "type": "string",
          "example": "ZITADEL",
          "description": "Name of the organization."
        },
        "primaryDomain": {
          "type": "string",
          "example": "zitadel.cloud",
          "description": "Primary domain used in the organization."
        }
      }
    },
    "zitadelorgv2SearchQuery": {
      "type": "object",
      "properties": {
        "nameQuery": {
          "$ref": "#/definitions/v2OrganizationNameQuery"
        },
        "domainQuery": {
          "$ref": "#/definitions/v2OrganizationDomainQuery"
        },
        "stateQuery": {
          "$ref": "#/definitions/v2OrganizationStateQuery"
        },
        "idQuery": {
          "$ref": "#/definitions/v2OrganizationIDQuery"
        },
        "defaultQuery": {
          "$ref": "#/definitions/v2DefaultOrganizationQuery"
        }
      }
    },
    "zitadelresourcesobjectv3alphaDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629012906488334"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "the timestamp of the first event applied to the object."
        },
        "changed": {
          "type": "string",
          "format": "date-time",
          "description": "the timestamp of the last event applied to the object."
        },
        "owner": {
          "$ref": "#/definitions/v3alphaOwner",
          "example": "69629023906488334",
          "description": "the parent object representing the returned objects context."
        }
      }
    },
    "zitadelsamlv2AuthorizationError": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/zitadelsamlv2ErrorReason"
        },
        "errorDescription": {
          "type": "string"
        }
      }
    },
    "zitadelsamlv2ErrorReason": {
      "type": "string",
      "enum": [
        "ERROR_REASON_UNSPECIFIED",
        "ERROR_REASON_VERSION_MISSMATCH",
        "ERROR_REASON_AUTH_N_FAILED",
        "ERROR_REASON_INVALID_ATTR_NAME_OR_VALUE",
        "ERROR_REASON_INVALID_NAMEID_POLICY",
        "ERROR_REASON_REQUEST_DENIED",
        "ERROR_REASON_REQUEST_UNSUPPORTED",
        "ERROR_REASON_UNSUPPORTED_BINDING"
      ],
      "default": "ERROR_REASON_UNSPECIFIED"
    },
    "zitadelsamlv2Session": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "ID of the session, used to login the user. Connects the session to the SAML Request.",
          "maxLength": 200,
          "minLength": 1
        },
        "sessionToken": {
          "type": "string",
          "description": "Token to verify the session is valid.",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "zitadelsessionv2SearchQuery": {
      "type": "object",
      "properties": {
        "idsQuery": {
          "$ref": "#/definitions/sessionv2IDsQuery"
        },
        "userIdQuery": {
          "$ref": "#/definitions/sessionv2UserIDQuery"
        },
        "creationDateQuery": {
          "$ref": "#/definitions/sessionv2CreationDateQuery"
        },
        "creatorQuery": {
          "$ref": "#/definitions/v2CreatorQuery"
        },
        "userAgentQuery": {
          "$ref": "#/definitions/v2UserAgentQuery"
        }
      }
    },
    "zitadelsessionv2Session": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "\"id of the session\""
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the session was created\""
        },
        "changeDate": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the session was last updated\""
        },
        "sequence": {
          "type": "string",
          "format": "uint64",
          "description": "\"sequence of the session\""
        },
        "factors": {
          "$ref": "#/definitions/sessionv2Factors",
          "description": "\"checked factors of the session, e.g. the user, password and more\""
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "\"custom key value list\""
        },
        "userAgent": {
          "$ref": "#/definitions/sessionv2UserAgent"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "\"time the session will be automatically invalidated\""
        }
      }
    },
    "zitadelsessionv2betaSearchQuery": {
      "type": "object",
      "properties": {
        "idsQuery": {
          "$ref": "#/definitions/sessionv2betaIDsQuery"
        },
        "userIdQuery": {
          "$ref": "#/definitions/sessionv2betaUserIDQuery"
        },
        "creationDateQuery": {
          "$ref": "#/definitions/sessionv2betaCreationDateQuery"
        }
      }
    },
    "zitadelsessionv2betaSession": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "\"id of the session\""
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the session was created\""
        },
        "changeDate": {
          "type": "string",
          "format": "date-time",
          "description": "\"time when the session was last updated\""
        },
        "sequence": {
          "type": "string",
          "format": "uint64",
          "description": "\"sequence of the session\""
        },
        "factors": {
          "$ref": "#/definitions/sessionv2betaFactors",
          "description": "\"checked factors of the session, e.g. the user, password and more\""
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "\"custom key value list\""
        },
        "userAgent": {
          "$ref": "#/definitions/sessionv2betaUserAgent"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "\"time the session will be automatically invalidated\""
        }
      }
    },
    "zitadelsystemv1FailedEvent": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "example": "adminapi"
        },
        "viewName": {
          "type": "string",
          "example": "iam_members"
        },
        "failedSequence": {
          "type": "string",
          "format": "uint64",
          "example": "9823759"
        },
        "failureCount": {
          "type": "string",
          "format": "uint64",
          "example": "5"
        },
        "errorMessage": {
          "type": "string",
          "example": "ID=EXAMP-ID3ER Message=Example message"
        },
        "lastFailed": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the failure last occurred"
        }
      }
    },
    "zitadelsystemv1HealthzResponse": {
      "type": "object",
      "title": "This is an empty response"
    },
    "zitadelsystemv1ListFailedEventsRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "zitadelsystemv1ListFailedEventsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelsystemv1FailedEvent"
          },
          "title": "TODO: list details"
        }
      }
    },
    "zitadelsystemv1ListIAMMembersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/zitadelv1ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Member"
          }
        }
      }
    },
    "zitadelsystemv1ListViewsRequest": {
      "type": "object",
      "title": "This is an empty request"
    },
    "zitadelsystemv1ListViewsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelsystemv1View"
          },
          "title": "TODO: list details"
        }
      }
    },
    "zitadelsystemv1RemoveFailedEventResponse": {
      "type": "object",
      "title": "This is an empty response"
    },
    "zitadelsystemv1View": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "example": "adminapi"
        },
        "viewName": {
          "type": "string",
          "example": "iam_members"
        },
        "processedSequence": {
          "type": "string",
          "format": "uint64",
          "example": "9823758"
        },
        "eventTimestamp": {
          "type": "string",
          "format": "date-time",
          "example": "2019-04-01T08:45:00.000000Z",
          "description": "The timestamp the event occured",
          "title": "The timestamp the event occured"
        },
        "lastSuccessfulSpoolerRun": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the event occured"
        },
        "instance": {
          "type": "string",
          "example": "840498034930840"
        }
      }
    },
    "zitadeluserv1EmailQuery": {
      "type": "object",
      "properties": {
        "emailAddress": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "email address of the user",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "zitadeluserv1FirstNameQuery": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Gigi",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "zitadeluserv1LastNameQuery": {
      "type": "object",
      "properties": {
        "lastName": {
          "type": "string",
          "example": "Giraffe",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/zitadelv1TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      }
    },
    "zitadeluserv1SearchQuery": {
      "type": "object",
      "properties": {
        "userNameQuery": {
          "$ref": "#/definitions/userv1UserNameQuery"
        },
        "firstNameQuery": {
          "$ref": "#/definitions/zitadeluserv1FirstNameQuery"
        },
        "lastNameQuery": {
          "$ref": "#/definitions/zitadeluserv1LastNameQuery"
        },
        "nickNameQuery": {
          "$ref": "#/definitions/userv1NickNameQuery"
        },
        "displayNameQuery": {
          "$ref": "#/definitions/userv1DisplayNameQuery"
        },
        "emailQuery": {
          "$ref": "#/definitions/zitadeluserv1EmailQuery"
        },
        "stateQuery": {
          "$ref": "#/definitions/userv1StateQuery"
        },
        "typeQuery": {
          "$ref": "#/definitions/userv1TypeQuery"
        },
        "loginNameQuery": {
          "$ref": "#/definitions/userv1LoginNameQuery"
        },
        "inUserIdsQuery": {
          "$ref": "#/definitions/userv1InUserIDQuery"
        },
        "orQuery": {
          "$ref": "#/definitions/userv1OrQuery"
        },
        "andQuery": {
          "$ref": "#/definitions/userv1AndQuery"
        },
        "notQuery": {
          "$ref": "#/definitions/userv1NotQuery"
        },
        "inUserEmailsQuery": {
          "$ref": "#/definitions/userv1InUserEmailsQuery"
        }
      }
    },
    "zitadeluserv1UserGrant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "details": {
          "$ref": "#/definitions/v1ObjectDetails"
        },
        "roleKeys": {
          "type": "array",
          "example": [
            "role.super.man"
          ],
          "items": {
            "type": "string"
          }
        },
        "state": {
          "$ref": "#/definitions/v1UserGrantState",
          "description": "current state of the user"
        },
        "userId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "userName": {
          "type": "string",
          "example": "gigi-giraffe"
        },
        "firstName": {
          "type": "string",
          "example": "Gigi"
        },
        "lastName": {
          "type": "string",
          "example": "Giraffe"
        },
        "email": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "email address of the user. (spec: https://tools.ietf.org/html/rfc2822#section-3.4.1)"
        },
        "displayName": {
          "type": "string",
          "example": "Gigi Giraffe",
          "description": "display name of the user"
        },
        "orgId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "orgName": {
          "type": "string",
          "example": "ZITADEL"
        },
        "orgDomain": {
          "type": "string",
          "example": "zitadel.cloud"
        },
        "projectId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "projectName": {
          "type": "string",
          "example": "ZITADEL"
        },
        "projectGrantId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "avatarUrl": {
          "type": "string",
          "example": "{your-domain}/assets/v1/avatar-32432jkh4kj32",
          "description": "avatar URL of the user"
        },
        "preferredLoginName": {
          "type": "string",
          "example": "gigi@zitadel.com"
        },
        "userType": {
          "$ref": "#/definitions/userv1Type",
          "description": "type of the user (human / machine)"
        },
        "grantedOrgId": {
          "type": "string",
          "example": "69629023906488334"
        },
        "grantedOrgName": {
          "type": "string",
          "example": "ZITADEL"
        },
        "grantedOrgDomain": {
          "type": "string",
          "example": "zitadel.cloud"
        }
      }
    },
    "zitadeluserv2SearchQuery": {
      "type": "object",
      "properties": {
        "userNameQuery": {
          "$ref": "#/definitions/userv2UserNameQuery"
        },
        "firstNameQuery": {
          "$ref": "#/definitions/userv2FirstNameQuery"
        },
        "lastNameQuery": {
          "$ref": "#/definitions/userv2LastNameQuery"
        },
        "nickNameQuery": {
          "$ref": "#/definitions/userv2NickNameQuery"
        },
        "displayNameQuery": {
          "$ref": "#/definitions/userv2DisplayNameQuery"
        },
        "emailQuery": {
          "$ref": "#/definitions/userv2EmailQuery"
        },
        "stateQuery": {
          "$ref": "#/definitions/userv2StateQuery"
        },
        "typeQuery": {
          "$ref": "#/definitions/userv2TypeQuery"
        },
        "loginNameQuery": {
          "$ref": "#/definitions/userv2LoginNameQuery"
        },
        "inUserIdsQuery": {
          "$ref": "#/definitions/userv2InUserIDQuery"
        },
        "orQuery": {
          "$ref": "#/definitions/userv2OrQuery"
        },
        "andQuery": {
          "$ref": "#/definitions/userv2AndQuery"
        },
        "notQuery": {
          "$ref": "#/definitions/userv2NotQuery"
        },
        "inUserEmailsQuery": {
          "$ref": "#/definitions/userv2InUserEmailsQuery"
        },
        "organizationIdQuery": {
          "$ref": "#/definitions/userv2OrganizationIdQuery"
        },
        "phoneQuery": {
          "$ref": "#/definitions/userv2PhoneQuery"
        }
      }
    },
    "zitadeluserv2betaSearchQuery": {
      "type": "object",
      "properties": {
        "userNameQuery": {
          "$ref": "#/definitions/userv2betaUserNameQuery"
        },
        "firstNameQuery": {
          "$ref": "#/definitions/userv2betaFirstNameQuery"
        },
        "lastNameQuery": {
          "$ref": "#/definitions/userv2betaLastNameQuery"
        },
        "nickNameQuery": {
          "$ref": "#/definitions/userv2betaNickNameQuery"
        },
        "displayNameQuery": {
          "$ref": "#/definitions/userv2betaDisplayNameQuery"
        },
        "emailQuery": {
          "$ref": "#/definitions/userv2betaEmailQuery"
        },
        "stateQuery": {
          "$ref": "#/definitions/userv2betaStateQuery"
        },
        "typeQuery": {
          "$ref": "#/definitions/userv2betaTypeQuery"
        },
        "loginNameQuery": {
          "$ref": "#/definitions/userv2betaLoginNameQuery"
        },
        "inUserIdsQuery": {
          "$ref": "#/definitions/userv2betaInUserIDQuery"
        },
        "orQuery": {
          "$ref": "#/definitions/userv2betaOrQuery"
        },
        "andQuery": {
          "$ref": "#/definitions/userv2betaAndQuery"
        },
        "notQuery": {
          "$ref": "#/definitions/userv2betaNotQuery"
        },
        "inUserEmailsQuery": {
          "$ref": "#/definitions/userv2betaInUserEmailsQuery"
        },
        "organizationIdQuery": {
          "$ref": "#/definitions/userv2betaOrganizationIdQuery"
        },
        "phoneQuery": {
          "$ref": "#/definitions/userv2betaPhoneQuery"
        }
      }
    },
    "zitadelv1ListDetails": {
      "type": "object",
      "properties": {
        "totalResult": {
          "type": "string",
          "format": "uint64",
          "example": "2"
        },
        "processedSequence": {
          "type": "string",
          "format": "uint64",
          "example": "267831"
        },
        "viewTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "the last time the view got updated"
        }
      }
    },
    "zitadelv1ListQuery": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "string",
          "format": "uint64",
          "example": "0"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "example": 100,
          "description": "Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken."
        },
        "asc": {
          "type": "boolean",
          "description": "default is descending"
        }
      },
      "description": "Object unspecific list filters like offset, limit and asc/desc.",
      "title": "General List Query"
    },
    "zitadelv1TextQueryMethod": {
      "type": "string",
      "enum": [
        "TEXT_QUERY_METHOD_EQUALS",
        "TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE",
        "TEXT_QUERY_METHOD_STARTS_WITH",
        "TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE",
        "TEXT_QUERY_METHOD_CONTAINS",
        "TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE",
        "TEXT_QUERY_METHOD_ENDS_WITH",
        "TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE"
      ],
      "default": "TEXT_QUERY_METHOD_EQUALS"
    },
    "zitadelv1TimestampQueryMethod": {
      "type": "string",
      "enum": [
        "TIMESTAMP_QUERY_METHOD_EQUALS",
        "TIMESTAMP_QUERY_METHOD_GREATER",
        "TIMESTAMP_QUERY_METHOD_GREATER_OR_EQUALS",
        "TIMESTAMP_QUERY_METHOD_LESS",
        "TIMESTAMP_QUERY_METHOD_LESS_OR_EQUALS"
      ],
      "default": "TIMESTAMP_QUERY_METHOD_EQUALS"
    },
    "zitadelv1v1AddCustomOrgIAMPolicyRequest": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string",
          "example": "#69629023906488334",
          "maxLength": 200,
          "minLength": 1
        },
        "userLoginMustBeDomain": {
          "type": "boolean",
          "description": "the username has to end with the domain of its organization",
          "title": "the username has to end with the domain of its organization (uniqueness is organization based)"
        }
      },
      "required": [
        "orgId"
      ]
    },
    "zitadelv1v1DataOrg": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "org": {
          "$ref": "#/definitions/v1AddOrgRequest"
        },
        "iamPolicy": {
          "$ref": "#/definitions/zitadelv1v1AddCustomOrgIAMPolicyRequest"
        },
        "labelPolicy": {
          "$ref": "#/definitions/v1AddCustomLabelPolicyRequest"
        },
        "lockoutPolicy": {
          "$ref": "#/definitions/v1AddCustomLockoutPolicyRequest"
        },
        "loginPolicy": {
          "$ref": "#/definitions/v1AddCustomLoginPolicyRequest"
        },
        "passwordComplexityPolicy": {
          "$ref": "#/definitions/v1AddCustomPasswordComplexityPolicyRequest"
        },
        "privacyPolicy": {
          "$ref": "#/definitions/v1AddCustomPrivacyPolicyRequest"
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataProject"
          }
        },
        "projectRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AddProjectRoleRequest"
          }
        },
        "apiApps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataAPIApplication"
          }
        },
        "oidcApps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataOIDCApplication"
          }
        },
        "humanUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataHumanUser"
          }
        },
        "machineUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataMachineUser"
          }
        },
        "triggerActions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelv1v1SetTriggerActionsRequest"
          }
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataAction"
          }
        },
        "projectGrants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataProjectGrant"
          }
        },
        "userGrants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AddUserGrantRequest"
          }
        },
        "orgMembers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AddOrgMemberRequest"
          }
        },
        "projectMembers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AddProjectMemberRequest"
          }
        },
        "projectGrantMembers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AddProjectGrantMemberRequest"
          }
        },
        "userMetadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetUserMetadataRequest"
          }
        },
        "loginTexts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmanagementv1SetCustomLoginTextsRequest"
          }
        },
        "initMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomInitMessageTextRequest"
          }
        },
        "passwordResetMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomPasswordResetMessageTextRequest"
          }
        },
        "verifyEmailMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomVerifyEmailMessageTextRequest"
          }
        },
        "verifyPhoneMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomVerifyPhoneMessageTextRequest"
          }
        },
        "domainClaimedMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomDomainClaimedMessageTextRequest"
          }
        },
        "passwordlessRegistrationMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomPasswordlessRegistrationMessageTextRequest"
          }
        },
        "oidcIdps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataOIDCIDP"
          }
        },
        "jwtIdps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataJWTIDP"
          }
        },
        "secondFactors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmanagementv1AddSecondFactorToLoginPolicyRequest"
          }
        },
        "multiFactors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmanagementv1AddMultiFactorToLoginPolicyRequest"
          }
        },
        "idps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelmanagementv1AddIDPToLoginPolicyRequest"
          }
        },
        "userLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IDPUserLink"
          }
        },
        "domains": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelorgv1Domain"
          }
        },
        "appKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataAppKey"
          }
        },
        "machineKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataMachineKey"
          }
        },
        "inviteUserMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetCustomInviteUserMessageTextRequest"
          }
        }
      }
    },
    "zitadelv1v1FlowType": {
      "type": "string",
      "enum": [
        "FLOW_TYPE_UNSPECIFIED",
        "FLOW_TYPE_EXTERNAL_AUTHENTICATION"
      ],
      "default": "FLOW_TYPE_UNSPECIFIED"
    },
    "zitadelv1v1ImportDataOrg": {
      "type": "object",
      "properties": {
        "orgs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/zitadelv1v1DataOrg"
          }
        }
      }
    },
    "zitadelv1v1SetTriggerActionsRequest": {
      "type": "object",
      "properties": {
        "flowType": {
          "$ref": "#/definitions/zitadelv1v1FlowType"
        },
        "triggerType": {
          "$ref": "#/definitions/zitadelv1v1TriggerType"
        },
        "actionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "zitadelv1v1TriggerType": {
      "type": "string",
      "enum": [
        "TRIGGER_TYPE_UNSPECIFIED",
        "TRIGGER_TYPE_POST_AUTHENTICATION",
        "TRIGGER_TYPE_PRE_CREATION",
        "TRIGGER_TYPE_POST_CREATION"
      ],
      "default": "TRIGGER_TYPE_UNSPECIFIED"
    }
  },
  "securityDefinitions": {
    "BasicAuth": {
      "type": "basic"
    },
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "$CUSTOM-DOMAIN/oauth/v2/authorize",
      "tokenUrl": "$CUSTOM-DOMAIN/oauth/v2/token",
      "scopes": {
        "openid": "openid",
        "urn:zitadel:iam:org:project:id:zitadel:aud": "urn:zitadel:iam:org:project:id:zitadel:aud"
      }
    }
  },
  "security": [
    {
      "OAuth2": [
        "openid",
        "urn:zitadel:iam:org:project:id:zitadel:aud"
      ]
    }
  ],
  "externalDocs": {
    "description": "Detailed information about ZITADEL",
    "url": "https://zitadel.com/docs"
  },
  "x-zitadel-orgid": "$YOUR-ORGANIZATION"
}
