syntax = "proto3";

package zitadel.org.v2;

import "zitadel/object/v2/object.proto";
import "zitadel/protoc_gen_zitadel/v2/options.proto";
import "zitadel/user/v2/auth.proto";
import "zitadel/user/v2/email.proto";
import "zitadel/user/v2/phone.proto";
import "zitadel/user/v2/idp.proto";
import "zitadel/user/v2/password.proto";
import "zitadel/user/v2/user.proto";
import "zitadel/user/v2/user_service.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";
import "zitadel/org/v2/org.proto";
import "zitadel/org/v2/query.proto";
import "google/api/visibility.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/org/v2;org";

service OrganizationService {
  option (google.api.api_visibility).restriction = "v2, stable";

  // Create an Organization
  //
  // Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
  rpc AddOrganization(AddOrganizationRequest) returns (AddOrganizationResponse) {
    option (google.api.http) = {
      post: "/v2/organizations"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.create"
      }
      http_response: {
        success_code: 201
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organizations";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }

  // Search Organizations
  //
  // Search for Organizations. By default, we will return all organization of the instance. Make sure to include a limit and sorting for pagination..
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      post: "/v2/organizations/_search";
      body: "*";
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authenticated"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organizations";
      responses: {
        key: "200"
        value: {
          description: "A list of all organizations matching the query";
        }
      };
      responses: {
        key: "400";
        value: {
          description: "invalid list query";
          schema: {
            json_schema: {
              ref: "#/definitions/rpcStatus";
            };
          };
        };
      };
    };
  }
}

message AddOrganizationRequest{
  message Admin {
    oneof user_type{
      string user_id = 1;
      zitadel.user.v2.AddHumanUserRequest human = 2;
    }
    // specify Org Member Roles for the provided user (default is ORG_OWNER if roles are empty)
    repeated string roles = 3;
  }

  string name = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"ZITADEL\"";
    }
  ];
  repeated Admin admins = 2;
}

message AddOrganizationResponse{
  message CreatedAdmin {
    string user_id = 1;
    optional string email_code = 2;
    optional string phone_code = 3;
  }
  zitadel.object.v2.Details details = 1;
  string organization_id = 2;
  repeated CreatedAdmin created_admins = 3;
}

message ListOrganizationsRequest {
  //list limitations and ordering
  zitadel.object.v2.ListQuery query = 1;
  // the field the result is sorted
  zitadel.org.v2.OrganizationFieldName sorting_column = 2;
  //criteria the client is looking for
  repeated zitadel.org.v2.SearchQuery queries = 3;
}

message ListOrganizationsResponse {
  zitadel.object.v2.ListDetails details = 1;
  zitadel.org.v2.OrganizationFieldName sorting_column = 2;
  repeated zitadel.org.v2.Organization result = 3;
}
