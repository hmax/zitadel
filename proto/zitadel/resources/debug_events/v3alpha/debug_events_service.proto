syntax = "proto3";

package zitadel.resources.debug_events.v3alpha;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

import "zitadel/protoc_gen_zitadel/v2/options.proto";
import "zitadel/object/v3alpha/object.proto";
import "zitadel/resources/object/v3alpha/object.proto";
import "zitadel/resources/debug_events/v3alpha/event.proto";
import "zitadel/resources/debug_events/v3alpha/state.proto";
import "google/api/visibility.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/resources/debug_events/v3alpha;debug_events";

service ZITADELDebugEvents {
  option (google.api.api_visibility).restriction = "v3alpha, preview";
  rpc CreateDebugEvents(CreateDebugEventsRequest) returns (CreateDebugEventsResponse) {
    option (google.api.http) = {
      post: "/"
      body: "events"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "iam.debug.write"
      }
      http_response: {
        success_code: 201
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Debug Events (preview)";
      summary: "Create a set of debug events.";
      description: "Create a set of debug events which will be pushed to the eventstore and reduced to the projection."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }

  rpc GetDebugEventsStateById(GetDebugEventsStateByIdRequest) returns (GetDebugEventsStateByIdResponse) {
    option (google.api.http) = {
      get: "/v3alpha/debug_events/{id}"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "iam.debug.read"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Debug Events (preview)";
      responses: {
        key: "200"
        value: {
          description: "Debug events state successfully retrieved";
        }
      };
    };
  }

  rpc ListDebugEventsStates(ListDebugEventsStatesRequest) returns (ListDebugEventsStatesResponse) {
    option (google.api.http) = {
      get: "/v3alpha/debug_events"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "iam.debug.read"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Debug Events (preview)";
      responses: {
        key: "200"
        value: {
          description: "Debug events states successfully retrieved";
        }
      };
    };
  }
}

message CreateDebugEventsRequest {
  optional zitadel.object.v3alpha.Instance instance = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      default: "\"domain from HOST or :authority header\""
    }
  ];
  // unique identifier for the aggregate we want to push events to.
  string aggregate_id = 2 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      max_length: 200,
      example: "\"69629026806489455\"";
    }
  ];
  repeated Event events = 3;
}

message CreateDebugEventsResponse {
  zitadel.resources.object.v3alpha.Details details = 1;
}

message GetDebugEventsStateByIdRequest {
  // unique identifier of the aggregate.
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      max_length: 200,
      example: "\"69629026806489455\"";
    }
  ];
  bool trigger_bulk = 2;
}

message GetDebugEventsStateByIdResponse {
  State state = 1;
}

message ListDebugEventsStatesRequest {
  bool trigger_bulk = 1;
}

message ListDebugEventsStatesResponse {
  repeated State states = 1;
}