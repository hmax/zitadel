syntax = "proto3";

package zitadel.resources.webkey.v3alpha;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

import "zitadel/protoc_gen_zitadel/v2/options.proto";

import "zitadel/resources/webkey/v3alpha/key.proto";
import "zitadel/resources/object/v3alpha/object.proto";
import "zitadel/object/v3alpha/object.proto";
import "google/api/visibility.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/resources/webkey/v3alpha;webkey";

service ZITADELWebKeys {
  option (google.api.api_visibility).restriction = "v3alpha, preview";
  rpc CreateWebKey(CreateWebKeyRequest) returns (CreateWebKeyResponse) {
    option (google.api.http) = {
      post: "/resources/v3alpha/web_keys"
      body: "key"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "iam.web_key.write"
      }
      http_response: {
        success_code: 201
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Generate a web key pair for the instance";
      description: "Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation. The public key can be used to valite OIDC tokens."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
  
  rpc ActivateWebKey(ActivateWebKeyRequest) returns (ActivateWebKeyResponse) {
    option (google.api.http) = {
      post: "/resources/v3alpha/web_keys/{id}/_activate"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "iam.web_key.write"
      }
      http_response: {
        success_code: 200
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Activate a signing key for the instance";
      description: "Switch the active signing web key. The previously active key will be deactivated. Note that the JWKs OIDC endpoint returns a cacheable response. Therefore it is not advised to activate a key that has been created within the cache duration (default is 5min), as the public key may not have been propagated to caches and clients yet."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
  
  rpc DeleteWebKey(DeleteWebKeyRequest) returns (DeleteWebKeyResponse) {
    option (google.api.http) = {
      delete: "/resources/v3alpha/web_keys/{id}"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "iam.web_key.delete"
      }
      http_response: {
        success_code: 200
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a web key pair for the instance";
      description: "Delete a web key pair. Only inactive keys can be deleted. Once a key is deleted, any tokens signed by this key will be invalid."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
  
  rpc ListWebKeys(ListWebKeysRequest) returns (ListWebKeysResponse) {
    option (google.api.http) = {
      get: "/resources/v3alpha/web_keys"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "iam.web_key.read"
      }
      http_response: {
        success_code: 200
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List web key details for the instance";
      description: "List web key details for the instance"
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
}

message CreateWebKeyRequest {
  optional zitadel.object.v3alpha.Instance instance = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      default: "\"domain from HOST or :authority header\""
    }
  ];
  WebKey key = 2;
}

message CreateWebKeyResponse {
  zitadel.resources.object.v3alpha.Details details = 1;
}

message ActivateWebKeyRequest {
  optional zitadel.object.v3alpha.Instance instance = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      default: "\"domain from HOST or :authority header\""
    }
  ];
  string id = 2 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      max_length: 200,
      example: "\"69629026806489455\"";
    }
  ];
}

message ActivateWebKeyResponse {
  zitadel.resources.object.v3alpha.Details details = 1;
}

message DeleteWebKeyRequest {
  optional zitadel.object.v3alpha.Instance instance = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      default: "\"domain from HOST or :authority header\""
    }
  ];
  string id = 2 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      max_length: 200,
      example: "\"69629026806489455\"";
    }
  ];
}

message DeleteWebKeyResponse {
  zitadel.resources.object.v3alpha.Details details = 1;
}

message ListWebKeysRequest {
  optional zitadel.object.v3alpha.Instance instance = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      default: "\"domain from HOST or :authority header\""
    }
  ];
}

message ListWebKeysResponse {
  repeated GetWebKey web_keys = 1;
}